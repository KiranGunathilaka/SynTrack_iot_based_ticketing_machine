
Syntrack.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fa0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b0c  08004140  08004140  00005140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c4c  08005c4c  00007060  2**0
                  CONTENTS
  4 .ARM          00000008  08005c4c  08005c4c  00006c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c54  08005c54  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c54  08005c54  00006c54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005c58  08005c58  00006c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08005c5c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000244  20000060  08005cbc  00007060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002a4  08005cbc  000072a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007b32  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001afe  00000000  00000000  0000ebc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007c8  00000000  00000000  000106c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005bb  00000000  00000000  00010e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001530f  00000000  00000000  00011443  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009bd3  00000000  00000000  00026752  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083d29  00000000  00000000  00030325  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b404e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000022fc  00000000  00000000  000b4094  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000b6390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004128 	.word	0x08004128

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08004128 	.word	0x08004128

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <ILI9341_DrawHollowCircle>:
	us *= (SystemCoreClock / 1000000);
	while (us--);
}

void ILI9341_DrawHollowCircle(uint16_t X, uint16_t Y, uint16_t radius, uint16_t color)
{
 8000570:	b590      	push	{r4, r7, lr}
 8000572:	b089      	sub	sp, #36	@ 0x24
 8000574:	af00      	add	r7, sp, #0
 8000576:	4604      	mov	r4, r0
 8000578:	4608      	mov	r0, r1
 800057a:	4611      	mov	r1, r2
 800057c:	461a      	mov	r2, r3
 800057e:	4623      	mov	r3, r4
 8000580:	80fb      	strh	r3, [r7, #6]
 8000582:	4603      	mov	r3, r0
 8000584:	80bb      	strh	r3, [r7, #4]
 8000586:	460b      	mov	r3, r1
 8000588:	807b      	strh	r3, [r7, #2]
 800058a:	4613      	mov	r3, r2
 800058c:	803b      	strh	r3, [r7, #0]
	int x = radius-1;
 800058e:	887b      	ldrh	r3, [r7, #2]
 8000590:	3b01      	subs	r3, #1
 8000592:	61fb      	str	r3, [r7, #28]
	int y = 0;
 8000594:	2300      	movs	r3, #0
 8000596:	61bb      	str	r3, [r7, #24]
	int dx = 1;
 8000598:	2301      	movs	r3, #1
 800059a:	617b      	str	r3, [r7, #20]
	int dy = 1;
 800059c:	2301      	movs	r3, #1
 800059e:	613b      	str	r3, [r7, #16]
	int err = dx - (radius << 1);
 80005a0:	887b      	ldrh	r3, [r7, #2]
 80005a2:	005b      	lsls	r3, r3, #1
 80005a4:	697a      	ldr	r2, [r7, #20]
 80005a6:	1ad3      	subs	r3, r2, r3
 80005a8:	60fb      	str	r3, [r7, #12]

	while (x >= y)
 80005aa:	e08d      	b.n	80006c8 <ILI9341_DrawHollowCircle+0x158>
	{
		ILI9341_DrawPixel(X + x, Y + y, color);
 80005ac:	69fb      	ldr	r3, [r7, #28]
 80005ae:	b29a      	uxth	r2, r3
 80005b0:	88fb      	ldrh	r3, [r7, #6]
 80005b2:	4413      	add	r3, r2
 80005b4:	b298      	uxth	r0, r3
 80005b6:	69bb      	ldr	r3, [r7, #24]
 80005b8:	b29a      	uxth	r2, r3
 80005ba:	88bb      	ldrh	r3, [r7, #4]
 80005bc:	4413      	add	r3, r2
 80005be:	b29b      	uxth	r3, r3
 80005c0:	883a      	ldrh	r2, [r7, #0]
 80005c2:	4619      	mov	r1, r3
 80005c4:	f000 fd82 	bl	80010cc <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X + y, Y + x, color);
 80005c8:	69bb      	ldr	r3, [r7, #24]
 80005ca:	b29a      	uxth	r2, r3
 80005cc:	88fb      	ldrh	r3, [r7, #6]
 80005ce:	4413      	add	r3, r2
 80005d0:	b298      	uxth	r0, r3
 80005d2:	69fb      	ldr	r3, [r7, #28]
 80005d4:	b29a      	uxth	r2, r3
 80005d6:	88bb      	ldrh	r3, [r7, #4]
 80005d8:	4413      	add	r3, r2
 80005da:	b29b      	uxth	r3, r3
 80005dc:	883a      	ldrh	r2, [r7, #0]
 80005de:	4619      	mov	r1, r3
 80005e0:	f000 fd74 	bl	80010cc <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X - y, Y + x, color);
 80005e4:	69bb      	ldr	r3, [r7, #24]
 80005e6:	b29b      	uxth	r3, r3
 80005e8:	88fa      	ldrh	r2, [r7, #6]
 80005ea:	1ad3      	subs	r3, r2, r3
 80005ec:	b298      	uxth	r0, r3
 80005ee:	69fb      	ldr	r3, [r7, #28]
 80005f0:	b29a      	uxth	r2, r3
 80005f2:	88bb      	ldrh	r3, [r7, #4]
 80005f4:	4413      	add	r3, r2
 80005f6:	b29b      	uxth	r3, r3
 80005f8:	883a      	ldrh	r2, [r7, #0]
 80005fa:	4619      	mov	r1, r3
 80005fc:	f000 fd66 	bl	80010cc <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X - x, Y + y, color);
 8000600:	69fb      	ldr	r3, [r7, #28]
 8000602:	b29b      	uxth	r3, r3
 8000604:	88fa      	ldrh	r2, [r7, #6]
 8000606:	1ad3      	subs	r3, r2, r3
 8000608:	b298      	uxth	r0, r3
 800060a:	69bb      	ldr	r3, [r7, #24]
 800060c:	b29a      	uxth	r2, r3
 800060e:	88bb      	ldrh	r3, [r7, #4]
 8000610:	4413      	add	r3, r2
 8000612:	b29b      	uxth	r3, r3
 8000614:	883a      	ldrh	r2, [r7, #0]
 8000616:	4619      	mov	r1, r3
 8000618:	f000 fd58 	bl	80010cc <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X - x, Y - y, color);
 800061c:	69fb      	ldr	r3, [r7, #28]
 800061e:	b29b      	uxth	r3, r3
 8000620:	88fa      	ldrh	r2, [r7, #6]
 8000622:	1ad3      	subs	r3, r2, r3
 8000624:	b298      	uxth	r0, r3
 8000626:	69bb      	ldr	r3, [r7, #24]
 8000628:	b29b      	uxth	r3, r3
 800062a:	88ba      	ldrh	r2, [r7, #4]
 800062c:	1ad3      	subs	r3, r2, r3
 800062e:	b29b      	uxth	r3, r3
 8000630:	883a      	ldrh	r2, [r7, #0]
 8000632:	4619      	mov	r1, r3
 8000634:	f000 fd4a 	bl	80010cc <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X - y, Y - x, color);
 8000638:	69bb      	ldr	r3, [r7, #24]
 800063a:	b29b      	uxth	r3, r3
 800063c:	88fa      	ldrh	r2, [r7, #6]
 800063e:	1ad3      	subs	r3, r2, r3
 8000640:	b298      	uxth	r0, r3
 8000642:	69fb      	ldr	r3, [r7, #28]
 8000644:	b29b      	uxth	r3, r3
 8000646:	88ba      	ldrh	r2, [r7, #4]
 8000648:	1ad3      	subs	r3, r2, r3
 800064a:	b29b      	uxth	r3, r3
 800064c:	883a      	ldrh	r2, [r7, #0]
 800064e:	4619      	mov	r1, r3
 8000650:	f000 fd3c 	bl	80010cc <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X + y, Y - x, color);
 8000654:	69bb      	ldr	r3, [r7, #24]
 8000656:	b29a      	uxth	r2, r3
 8000658:	88fb      	ldrh	r3, [r7, #6]
 800065a:	4413      	add	r3, r2
 800065c:	b298      	uxth	r0, r3
 800065e:	69fb      	ldr	r3, [r7, #28]
 8000660:	b29b      	uxth	r3, r3
 8000662:	88ba      	ldrh	r2, [r7, #4]
 8000664:	1ad3      	subs	r3, r2, r3
 8000666:	b29b      	uxth	r3, r3
 8000668:	883a      	ldrh	r2, [r7, #0]
 800066a:	4619      	mov	r1, r3
 800066c:	f000 fd2e 	bl	80010cc <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X + x, Y - y, color);
 8000670:	69fb      	ldr	r3, [r7, #28]
 8000672:	b29a      	uxth	r2, r3
 8000674:	88fb      	ldrh	r3, [r7, #6]
 8000676:	4413      	add	r3, r2
 8000678:	b298      	uxth	r0, r3
 800067a:	69bb      	ldr	r3, [r7, #24]
 800067c:	b29b      	uxth	r3, r3
 800067e:	88ba      	ldrh	r2, [r7, #4]
 8000680:	1ad3      	subs	r3, r2, r3
 8000682:	b29b      	uxth	r3, r3
 8000684:	883a      	ldrh	r2, [r7, #0]
 8000686:	4619      	mov	r1, r3
 8000688:	f000 fd20 	bl	80010cc <ILI9341_DrawPixel>

		if (err <= 0)
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	2b00      	cmp	r3, #0
 8000690:	dc09      	bgt.n	80006a6 <ILI9341_DrawHollowCircle+0x136>
		{
			y++;
 8000692:	69bb      	ldr	r3, [r7, #24]
 8000694:	3301      	adds	r3, #1
 8000696:	61bb      	str	r3, [r7, #24]
			err += dy;
 8000698:	68fa      	ldr	r2, [r7, #12]
 800069a:	693b      	ldr	r3, [r7, #16]
 800069c:	4413      	add	r3, r2
 800069e:	60fb      	str	r3, [r7, #12]
			dy += 2;
 80006a0:	693b      	ldr	r3, [r7, #16]
 80006a2:	3302      	adds	r3, #2
 80006a4:	613b      	str	r3, [r7, #16]
		}

		if (err > 0)
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	dd0d      	ble.n	80006c8 <ILI9341_DrawHollowCircle+0x158>
		{
			x--;
 80006ac:	69fb      	ldr	r3, [r7, #28]
 80006ae:	3b01      	subs	r3, #1
 80006b0:	61fb      	str	r3, [r7, #28]
			dx += 2;
 80006b2:	697b      	ldr	r3, [r7, #20]
 80006b4:	3302      	adds	r3, #2
 80006b6:	617b      	str	r3, [r7, #20]
			err += (-radius << 1) + dx;
 80006b8:	887b      	ldrh	r3, [r7, #2]
 80006ba:	425b      	negs	r3, r3
 80006bc:	005a      	lsls	r2, r3, #1
 80006be:	697b      	ldr	r3, [r7, #20]
 80006c0:	4413      	add	r3, r2
 80006c2:	68fa      	ldr	r2, [r7, #12]
 80006c4:	4413      	add	r3, r2
 80006c6:	60fb      	str	r3, [r7, #12]
	while (x >= y)
 80006c8:	69fa      	ldr	r2, [r7, #28]
 80006ca:	69bb      	ldr	r3, [r7, #24]
 80006cc:	429a      	cmp	r2, r3
 80006ce:	f6bf af6d 	bge.w	80005ac <ILI9341_DrawHollowCircle+0x3c>
		}
	}
}
 80006d2:	bf00      	nop
 80006d4:	bf00      	nop
 80006d6:	3724      	adds	r7, #36	@ 0x24
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd90      	pop	{r4, r7, pc}

080006dc <ILI9341_DrawFilledCircle>:

void ILI9341_DrawFilledCircle(uint16_t X, uint16_t Y, uint16_t radius, uint16_t color)
{
 80006dc:	b590      	push	{r4, r7, lr}
 80006de:	b08b      	sub	sp, #44	@ 0x2c
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4604      	mov	r4, r0
 80006e4:	4608      	mov	r0, r1
 80006e6:	4611      	mov	r1, r2
 80006e8:	461a      	mov	r2, r3
 80006ea:	4623      	mov	r3, r4
 80006ec:	80fb      	strh	r3, [r7, #6]
 80006ee:	4603      	mov	r3, r0
 80006f0:	80bb      	strh	r3, [r7, #4]
 80006f2:	460b      	mov	r3, r1
 80006f4:	807b      	strh	r3, [r7, #2]
 80006f6:	4613      	mov	r3, r2
 80006f8:	803b      	strh	r3, [r7, #0]

	int x = radius;
 80006fa:	887b      	ldrh	r3, [r7, #2]
 80006fc:	627b      	str	r3, [r7, #36]	@ 0x24
	int y = 0;
 80006fe:	2300      	movs	r3, #0
 8000700:	623b      	str	r3, [r7, #32]
	int xChange = 1 - (radius << 1);
 8000702:	887b      	ldrh	r3, [r7, #2]
 8000704:	005b      	lsls	r3, r3, #1
 8000706:	f1c3 0301 	rsb	r3, r3, #1
 800070a:	61fb      	str	r3, [r7, #28]
	int yChange = 0;
 800070c:	2300      	movs	r3, #0
 800070e:	61bb      	str	r3, [r7, #24]
	int radiusError = 0;
 8000710:	2300      	movs	r3, #0
 8000712:	617b      	str	r3, [r7, #20]

	while (x >= y)
 8000714:	e061      	b.n	80007da <ILI9341_DrawFilledCircle+0xfe>
	{
		for (int i = X - x; i <= X + x; i++)
 8000716:	88fa      	ldrh	r2, [r7, #6]
 8000718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800071a:	1ad3      	subs	r3, r2, r3
 800071c:	613b      	str	r3, [r7, #16]
 800071e:	e018      	b.n	8000752 <ILI9341_DrawFilledCircle+0x76>
		{
			ILI9341_DrawPixel(i, Y + y,color);
 8000720:	693b      	ldr	r3, [r7, #16]
 8000722:	b298      	uxth	r0, r3
 8000724:	6a3b      	ldr	r3, [r7, #32]
 8000726:	b29a      	uxth	r2, r3
 8000728:	88bb      	ldrh	r3, [r7, #4]
 800072a:	4413      	add	r3, r2
 800072c:	b29b      	uxth	r3, r3
 800072e:	883a      	ldrh	r2, [r7, #0]
 8000730:	4619      	mov	r1, r3
 8000732:	f000 fccb 	bl	80010cc <ILI9341_DrawPixel>
			ILI9341_DrawPixel(i, Y - y,color);
 8000736:	693b      	ldr	r3, [r7, #16]
 8000738:	b298      	uxth	r0, r3
 800073a:	6a3b      	ldr	r3, [r7, #32]
 800073c:	b29b      	uxth	r3, r3
 800073e:	88ba      	ldrh	r2, [r7, #4]
 8000740:	1ad3      	subs	r3, r2, r3
 8000742:	b29b      	uxth	r3, r3
 8000744:	883a      	ldrh	r2, [r7, #0]
 8000746:	4619      	mov	r1, r3
 8000748:	f000 fcc0 	bl	80010cc <ILI9341_DrawPixel>
		for (int i = X - x; i <= X + x; i++)
 800074c:	693b      	ldr	r3, [r7, #16]
 800074e:	3301      	adds	r3, #1
 8000750:	613b      	str	r3, [r7, #16]
 8000752:	88fa      	ldrh	r2, [r7, #6]
 8000754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000756:	4413      	add	r3, r2
 8000758:	693a      	ldr	r2, [r7, #16]
 800075a:	429a      	cmp	r2, r3
 800075c:	dde0      	ble.n	8000720 <ILI9341_DrawFilledCircle+0x44>
		}

		for (int i = X - y; i <= X + y; i++)
 800075e:	88fa      	ldrh	r2, [r7, #6]
 8000760:	6a3b      	ldr	r3, [r7, #32]
 8000762:	1ad3      	subs	r3, r2, r3
 8000764:	60fb      	str	r3, [r7, #12]
 8000766:	e018      	b.n	800079a <ILI9341_DrawFilledCircle+0xbe>
		{
			ILI9341_DrawPixel(i, Y + x,color);
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	b298      	uxth	r0, r3
 800076c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800076e:	b29a      	uxth	r2, r3
 8000770:	88bb      	ldrh	r3, [r7, #4]
 8000772:	4413      	add	r3, r2
 8000774:	b29b      	uxth	r3, r3
 8000776:	883a      	ldrh	r2, [r7, #0]
 8000778:	4619      	mov	r1, r3
 800077a:	f000 fca7 	bl	80010cc <ILI9341_DrawPixel>
			ILI9341_DrawPixel(i, Y - x,color);
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	b298      	uxth	r0, r3
 8000782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000784:	b29b      	uxth	r3, r3
 8000786:	88ba      	ldrh	r2, [r7, #4]
 8000788:	1ad3      	subs	r3, r2, r3
 800078a:	b29b      	uxth	r3, r3
 800078c:	883a      	ldrh	r2, [r7, #0]
 800078e:	4619      	mov	r1, r3
 8000790:	f000 fc9c 	bl	80010cc <ILI9341_DrawPixel>
		for (int i = X - y; i <= X + y; i++)
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	3301      	adds	r3, #1
 8000798:	60fb      	str	r3, [r7, #12]
 800079a:	88fa      	ldrh	r2, [r7, #6]
 800079c:	6a3b      	ldr	r3, [r7, #32]
 800079e:	4413      	add	r3, r2
 80007a0:	68fa      	ldr	r2, [r7, #12]
 80007a2:	429a      	cmp	r2, r3
 80007a4:	dde0      	ble.n	8000768 <ILI9341_DrawFilledCircle+0x8c>
		}

		y++;
 80007a6:	6a3b      	ldr	r3, [r7, #32]
 80007a8:	3301      	adds	r3, #1
 80007aa:	623b      	str	r3, [r7, #32]
		radiusError += yChange;
 80007ac:	697a      	ldr	r2, [r7, #20]
 80007ae:	69bb      	ldr	r3, [r7, #24]
 80007b0:	4413      	add	r3, r2
 80007b2:	617b      	str	r3, [r7, #20]
		yChange += 2;
 80007b4:	69bb      	ldr	r3, [r7, #24]
 80007b6:	3302      	adds	r3, #2
 80007b8:	61bb      	str	r3, [r7, #24]

		if (((radiusError << 1) + xChange) > 0)
 80007ba:	697b      	ldr	r3, [r7, #20]
 80007bc:	005a      	lsls	r2, r3, #1
 80007be:	69fb      	ldr	r3, [r7, #28]
 80007c0:	4413      	add	r3, r2
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	dd09      	ble.n	80007da <ILI9341_DrawFilledCircle+0xfe>
		{
			x--;
 80007c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007c8:	3b01      	subs	r3, #1
 80007ca:	627b      	str	r3, [r7, #36]	@ 0x24
			radiusError += xChange;
 80007cc:	697a      	ldr	r2, [r7, #20]
 80007ce:	69fb      	ldr	r3, [r7, #28]
 80007d0:	4413      	add	r3, r2
 80007d2:	617b      	str	r3, [r7, #20]
			xChange += 2;
 80007d4:	69fb      	ldr	r3, [r7, #28]
 80007d6:	3302      	adds	r3, #2
 80007d8:	61fb      	str	r3, [r7, #28]
	while (x >= y)
 80007da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80007dc:	6a3b      	ldr	r3, [r7, #32]
 80007de:	429a      	cmp	r2, r3
 80007e0:	da99      	bge.n	8000716 <ILI9341_DrawFilledCircle+0x3a>
		}
	}
}
 80007e2:	bf00      	nop
 80007e4:	bf00      	nop
 80007e6:	372c      	adds	r7, #44	@ 0x2c
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd90      	pop	{r4, r7, pc}

080007ec <ILI9341_DrawHollowRectangleCoord>:

void ILI9341_DrawHollowRectangleCoord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t color)
{
 80007ec:	b590      	push	{r4, r7, lr}
 80007ee:	b087      	sub	sp, #28
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	4604      	mov	r4, r0
 80007f4:	4608      	mov	r0, r1
 80007f6:	4611      	mov	r1, r2
 80007f8:	461a      	mov	r2, r3
 80007fa:	4623      	mov	r3, r4
 80007fc:	80fb      	strh	r3, [r7, #6]
 80007fe:	4603      	mov	r3, r0
 8000800:	80bb      	strh	r3, [r7, #4]
 8000802:	460b      	mov	r3, r1
 8000804:	807b      	strh	r3, [r7, #2]
 8000806:	4613      	mov	r3, r2
 8000808:	803b      	strh	r3, [r7, #0]
	uint16_t xLen = 0;
 800080a:	2300      	movs	r3, #0
 800080c:	82fb      	strh	r3, [r7, #22]
	uint16_t yLen = 0;
 800080e:	2300      	movs	r3, #0
 8000810:	82bb      	strh	r3, [r7, #20]
	uint8_t negX = 0;
 8000812:	2300      	movs	r3, #0
 8000814:	74fb      	strb	r3, [r7, #19]
	uint8_t negY = 0;
 8000816:	2300      	movs	r3, #0
 8000818:	74bb      	strb	r3, [r7, #18]
	float negCalc = 0;
 800081a:	f04f 0300 	mov.w	r3, #0
 800081e:	60fb      	str	r3, [r7, #12]

	negCalc = X1 - X0;
 8000820:	887a      	ldrh	r2, [r7, #2]
 8000822:	88fb      	ldrh	r3, [r7, #6]
 8000824:	1ad3      	subs	r3, r2, r3
 8000826:	ee07 3a90 	vmov	s15, r3
 800082a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800082e:	edc7 7a03 	vstr	s15, [r7, #12]
	if(negCalc < 0) negX = 1;
 8000832:	edd7 7a03 	vldr	s15, [r7, #12]
 8000836:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800083a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800083e:	d501      	bpl.n	8000844 <ILI9341_DrawHollowRectangleCoord+0x58>
 8000840:	2301      	movs	r3, #1
 8000842:	74fb      	strb	r3, [r7, #19]
	negCalc = 0;
 8000844:	f04f 0300 	mov.w	r3, #0
 8000848:	60fb      	str	r3, [r7, #12]

	negCalc = Y1 - Y0;
 800084a:	883a      	ldrh	r2, [r7, #0]
 800084c:	88bb      	ldrh	r3, [r7, #4]
 800084e:	1ad3      	subs	r3, r2, r3
 8000850:	ee07 3a90 	vmov	s15, r3
 8000854:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000858:	edc7 7a03 	vstr	s15, [r7, #12]
	if(negCalc < 0) negY = 1;
 800085c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000860:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000864:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000868:	d501      	bpl.n	800086e <ILI9341_DrawHollowRectangleCoord+0x82>
 800086a:	2301      	movs	r3, #1
 800086c:	74bb      	strb	r3, [r7, #18]

	//DRAW HORIZONTAL!
	if(!negX)
 800086e:	7cfb      	ldrb	r3, [r7, #19]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d104      	bne.n	800087e <ILI9341_DrawHollowRectangleCoord+0x92>
	{
		xLen = X1 - X0;
 8000874:	887a      	ldrh	r2, [r7, #2]
 8000876:	88fb      	ldrh	r3, [r7, #6]
 8000878:	1ad3      	subs	r3, r2, r3
 800087a:	82fb      	strh	r3, [r7, #22]
 800087c:	e003      	b.n	8000886 <ILI9341_DrawHollowRectangleCoord+0x9a>
	}
	else
	{
		xLen = X0 - X1;
 800087e:	88fa      	ldrh	r2, [r7, #6]
 8000880:	887b      	ldrh	r3, [r7, #2]
 8000882:	1ad3      	subs	r3, r2, r3
 8000884:	82fb      	strh	r3, [r7, #22]
	}
	ILI9341_DrawHLine(X0, Y0, xLen, color);
 8000886:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000888:	8afa      	ldrh	r2, [r7, #22]
 800088a:	88b9      	ldrh	r1, [r7, #4]
 800088c:	88f8      	ldrh	r0, [r7, #6]
 800088e:	f000 fcdf 	bl	8001250 <ILI9341_DrawHLine>
	ILI9341_DrawHLine(X0, Y1, xLen, color);
 8000892:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000894:	8afa      	ldrh	r2, [r7, #22]
 8000896:	8839      	ldrh	r1, [r7, #0]
 8000898:	88f8      	ldrh	r0, [r7, #6]
 800089a:	f000 fcd9 	bl	8001250 <ILI9341_DrawHLine>

	//DRAW VERTICAL!
	if(!negY)
 800089e:	7cbb      	ldrb	r3, [r7, #18]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d104      	bne.n	80008ae <ILI9341_DrawHollowRectangleCoord+0xc2>
	{
		yLen = Y1 - Y0;
 80008a4:	883a      	ldrh	r2, [r7, #0]
 80008a6:	88bb      	ldrh	r3, [r7, #4]
 80008a8:	1ad3      	subs	r3, r2, r3
 80008aa:	82bb      	strh	r3, [r7, #20]
 80008ac:	e003      	b.n	80008b6 <ILI9341_DrawHollowRectangleCoord+0xca>
	}
	else
	{
		yLen = Y0 - Y1;
 80008ae:	88ba      	ldrh	r2, [r7, #4]
 80008b0:	883b      	ldrh	r3, [r7, #0]
 80008b2:	1ad3      	subs	r3, r2, r3
 80008b4:	82bb      	strh	r3, [r7, #20]
	}

	ILI9341_DrawVLine(X0, Y0, yLen, color);
 80008b6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80008b8:	8aba      	ldrh	r2, [r7, #20]
 80008ba:	88b9      	ldrh	r1, [r7, #4]
 80008bc:	88f8      	ldrh	r0, [r7, #6]
 80008be:	f000 fd0b 	bl	80012d8 <ILI9341_DrawVLine>
	ILI9341_DrawVLine(X1, Y0, yLen, color);
 80008c2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80008c4:	8aba      	ldrh	r2, [r7, #20]
 80008c6:	88b9      	ldrh	r1, [r7, #4]
 80008c8:	8878      	ldrh	r0, [r7, #2]
 80008ca:	f000 fd05 	bl	80012d8 <ILI9341_DrawVLine>

	if((xLen > 0)||(yLen > 0))
 80008ce:	8afb      	ldrh	r3, [r7, #22]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d102      	bne.n	80008da <ILI9341_DrawHollowRectangleCoord+0xee>
 80008d4:	8abb      	ldrh	r3, [r7, #20]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d005      	beq.n	80008e6 <ILI9341_DrawHollowRectangleCoord+0xfa>
	{
		ILI9341_DrawPixel(X1, Y1, color);
 80008da:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80008dc:	8839      	ldrh	r1, [r7, #0]
 80008de:	887b      	ldrh	r3, [r7, #2]
 80008e0:	4618      	mov	r0, r3
 80008e2:	f000 fbf3 	bl	80010cc <ILI9341_DrawPixel>
	}
}
 80008e6:	bf00      	nop
 80008e8:	371c      	adds	r7, #28
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd90      	pop	{r4, r7, pc}

080008ee <ILI9341_DrawChar>:

	ILI9341_DrawRectangle(X0True, Y0True, xLen, yLen, color);
}

void ILI9341_DrawChar(char ch, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 80008ee:	b590      	push	{r4, r7, lr}
 80008f0:	b08d      	sub	sp, #52	@ 0x34
 80008f2:	af02      	add	r7, sp, #8
 80008f4:	60b9      	str	r1, [r7, #8]
 80008f6:	4611      	mov	r1, r2
 80008f8:	461a      	mov	r2, r3
 80008fa:	4603      	mov	r3, r0
 80008fc:	73fb      	strb	r3, [r7, #15]
 80008fe:	460b      	mov	r3, r1
 8000900:	81bb      	strh	r3, [r7, #12]
 8000902:	4613      	mov	r3, r2
 8000904:	80fb      	strh	r3, [r7, #6]
	if ((ch < 31) || (ch > 127)) return;
 8000906:	7bfb      	ldrb	r3, [r7, #15]
 8000908:	2b1e      	cmp	r3, #30
 800090a:	d964      	bls.n	80009d6 <ILI9341_DrawChar+0xe8>
 800090c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000910:	2b00      	cmp	r3, #0
 8000912:	db60      	blt.n	80009d6 <ILI9341_DrawChar+0xe8>

	uint8_t fOffset, fWidth, fHeight, fBPL;
	uint8_t *tempChar;

	fOffset = font[0];
 8000914:	68bb      	ldr	r3, [r7, #8]
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	77fb      	strb	r3, [r7, #31]
	fWidth = font[1];
 800091a:	68bb      	ldr	r3, [r7, #8]
 800091c:	3301      	adds	r3, #1
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	77bb      	strb	r3, [r7, #30]
	fHeight = font[2];
 8000922:	68bb      	ldr	r3, [r7, #8]
 8000924:	3302      	adds	r3, #2
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	777b      	strb	r3, [r7, #29]
	fBPL = font[3];
 800092a:	68bb      	ldr	r3, [r7, #8]
 800092c:	3303      	adds	r3, #3
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	773b      	strb	r3, [r7, #28]

	tempChar = (uint8_t*)&font[((ch - 0x20) * fOffset) + 4]; /* Current Character = Meta + (Character Index * Offset) */
 8000932:	7bfb      	ldrb	r3, [r7, #15]
 8000934:	3b20      	subs	r3, #32
 8000936:	7ffa      	ldrb	r2, [r7, #31]
 8000938:	fb02 f303 	mul.w	r3, r2, r3
 800093c:	3304      	adds	r3, #4
 800093e:	68ba      	ldr	r2, [r7, #8]
 8000940:	4413      	add	r3, r2
 8000942:	61bb      	str	r3, [r7, #24]

	/* Clear background first */
	ILI9341_DrawRectangle(X, Y, fWidth, fHeight, bgcolor);
 8000944:	7fbb      	ldrb	r3, [r7, #30]
 8000946:	b29a      	uxth	r2, r3
 8000948:	7f7b      	ldrb	r3, [r7, #29]
 800094a:	b29c      	uxth	r4, r3
 800094c:	88f9      	ldrh	r1, [r7, #6]
 800094e:	89b8      	ldrh	r0, [r7, #12]
 8000950:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8000952:	9300      	str	r3, [sp, #0]
 8000954:	4623      	mov	r3, r4
 8000956:	f000 fc1f 	bl	8001198 <ILI9341_DrawRectangle>

	for (int j=0; j < fHeight; j++)
 800095a:	2300      	movs	r3, #0
 800095c:	627b      	str	r3, [r7, #36]	@ 0x24
 800095e:	e035      	b.n	80009cc <ILI9341_DrawChar+0xde>
	{
		for (int i=0; i < fWidth; i++)
 8000960:	2300      	movs	r3, #0
 8000962:	623b      	str	r3, [r7, #32]
 8000964:	e02b      	b.n	80009be <ILI9341_DrawChar+0xd0>
		{
			uint8_t z =  tempChar[fBPL * i + ((j & 0xF8) >> 3) + 1]; /* (j & 0xF8) >> 3, increase one by 8-bits */
 8000966:	7f3b      	ldrb	r3, [r7, #28]
 8000968:	6a3a      	ldr	r2, [r7, #32]
 800096a:	fb03 f202 	mul.w	r2, r3, r2
 800096e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000970:	10db      	asrs	r3, r3, #3
 8000972:	f003 031f 	and.w	r3, r3, #31
 8000976:	4413      	add	r3, r2
 8000978:	3301      	adds	r3, #1
 800097a:	69ba      	ldr	r2, [r7, #24]
 800097c:	4413      	add	r3, r2
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	75fb      	strb	r3, [r7, #23]
			uint8_t b = 1 << (j & 0x07);
 8000982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000984:	f003 0307 	and.w	r3, r3, #7
 8000988:	2201      	movs	r2, #1
 800098a:	fa02 f303 	lsl.w	r3, r2, r3
 800098e:	75bb      	strb	r3, [r7, #22]
			if (( z & b ) != 0x00)
 8000990:	7dfa      	ldrb	r2, [r7, #23]
 8000992:	7dbb      	ldrb	r3, [r7, #22]
 8000994:	4013      	ands	r3, r2
 8000996:	b2db      	uxtb	r3, r3
 8000998:	2b00      	cmp	r3, #0
 800099a:	d00d      	beq.n	80009b8 <ILI9341_DrawChar+0xca>
			{
				ILI9341_DrawPixel(X+i, Y+j, color);
 800099c:	6a3b      	ldr	r3, [r7, #32]
 800099e:	b29a      	uxth	r2, r3
 80009a0:	89bb      	ldrh	r3, [r7, #12]
 80009a2:	4413      	add	r3, r2
 80009a4:	b298      	uxth	r0, r3
 80009a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009a8:	b29a      	uxth	r2, r3
 80009aa:	88fb      	ldrh	r3, [r7, #6]
 80009ac:	4413      	add	r3, r2
 80009ae:	b29b      	uxth	r3, r3
 80009b0:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 80009b2:	4619      	mov	r1, r3
 80009b4:	f000 fb8a 	bl	80010cc <ILI9341_DrawPixel>
		for (int i=0; i < fWidth; i++)
 80009b8:	6a3b      	ldr	r3, [r7, #32]
 80009ba:	3301      	adds	r3, #1
 80009bc:	623b      	str	r3, [r7, #32]
 80009be:	7fbb      	ldrb	r3, [r7, #30]
 80009c0:	6a3a      	ldr	r2, [r7, #32]
 80009c2:	429a      	cmp	r2, r3
 80009c4:	dbcf      	blt.n	8000966 <ILI9341_DrawChar+0x78>
	for (int j=0; j < fHeight; j++)
 80009c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009c8:	3301      	adds	r3, #1
 80009ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80009cc:	7f7b      	ldrb	r3, [r7, #29]
 80009ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80009d0:	429a      	cmp	r2, r3
 80009d2:	dbc5      	blt.n	8000960 <ILI9341_DrawChar+0x72>
 80009d4:	e000      	b.n	80009d8 <ILI9341_DrawChar+0xea>
	if ((ch < 31) || (ch > 127)) return;
 80009d6:	bf00      	nop
			}
		}
	}
}
 80009d8:	372c      	adds	r7, #44	@ 0x2c
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd90      	pop	{r4, r7, pc}

080009de <ILI9341_DrawText>:

void ILI9341_DrawText(const char* str, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 80009de:	b580      	push	{r7, lr}
 80009e0:	b08a      	sub	sp, #40	@ 0x28
 80009e2:	af02      	add	r7, sp, #8
 80009e4:	60f8      	str	r0, [r7, #12]
 80009e6:	60b9      	str	r1, [r7, #8]
 80009e8:	4611      	mov	r1, r2
 80009ea:	461a      	mov	r2, r3
 80009ec:	460b      	mov	r3, r1
 80009ee:	80fb      	strh	r3, [r7, #6]
 80009f0:	4613      	mov	r3, r2
 80009f2:	80bb      	strh	r3, [r7, #4]
	uint8_t charWidth;			/* Width of character */
	uint8_t fOffset = font[0];	/* Offset of character */
 80009f4:	68bb      	ldr	r3, [r7, #8]
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	77fb      	strb	r3, [r7, #31]
	uint8_t fWidth = font[1];	/* Width of font */
 80009fa:	68bb      	ldr	r3, [r7, #8]
 80009fc:	3301      	adds	r3, #1
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	77bb      	strb	r3, [r7, #30]

	while (*str)
 8000a02:	e02d      	b.n	8000a60 <ILI9341_DrawText+0x82>
	{
		ILI9341_DrawChar(*str, font, X, Y, color, bgcolor);
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	7818      	ldrb	r0, [r3, #0]
 8000a08:	88b9      	ldrh	r1, [r7, #4]
 8000a0a:	88fa      	ldrh	r2, [r7, #6]
 8000a0c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000a0e:	9301      	str	r3, [sp, #4]
 8000a10:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000a12:	9300      	str	r3, [sp, #0]
 8000a14:	460b      	mov	r3, r1
 8000a16:	68b9      	ldr	r1, [r7, #8]
 8000a18:	f7ff ff69 	bl	80008ee <ILI9341_DrawChar>

		/* Check character width and calculate proper position */
		uint8_t *tempChar = (uint8_t*)&font[((*str - 0x20) * fOffset) + 4];
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	3b20      	subs	r3, #32
 8000a22:	7ffa      	ldrb	r2, [r7, #31]
 8000a24:	fb02 f303 	mul.w	r3, r2, r3
 8000a28:	3304      	adds	r3, #4
 8000a2a:	68ba      	ldr	r2, [r7, #8]
 8000a2c:	4413      	add	r3, r2
 8000a2e:	61bb      	str	r3, [r7, #24]
		charWidth = tempChar[0];
 8000a30:	69bb      	ldr	r3, [r7, #24]
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	75fb      	strb	r3, [r7, #23]

		if(charWidth + 2 < fWidth)
 8000a36:	7dfb      	ldrb	r3, [r7, #23]
 8000a38:	1c9a      	adds	r2, r3, #2
 8000a3a:	7fbb      	ldrb	r3, [r7, #30]
 8000a3c:	429a      	cmp	r2, r3
 8000a3e:	da07      	bge.n	8000a50 <ILI9341_DrawText+0x72>
		{
			/* If character width is smaller than font width */
			X += (charWidth + 2);
 8000a40:	7dfb      	ldrb	r3, [r7, #23]
 8000a42:	b29a      	uxth	r2, r3
 8000a44:	88fb      	ldrh	r3, [r7, #6]
 8000a46:	4413      	add	r3, r2
 8000a48:	b29b      	uxth	r3, r3
 8000a4a:	3302      	adds	r3, #2
 8000a4c:	80fb      	strh	r3, [r7, #6]
 8000a4e:	e004      	b.n	8000a5a <ILI9341_DrawText+0x7c>
		}
		else
		{
			X += fWidth;
 8000a50:	7fbb      	ldrb	r3, [r7, #30]
 8000a52:	b29a      	uxth	r2, r3
 8000a54:	88fb      	ldrh	r3, [r7, #6]
 8000a56:	4413      	add	r3, r2
 8000a58:	80fb      	strh	r3, [r7, #6]
		}

		str++;
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	60fb      	str	r3, [r7, #12]
	while (*str)
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d1cd      	bne.n	8000a04 <ILI9341_DrawText+0x26>
	}
}
 8000a68:	bf00      	nop
 8000a6a:	bf00      	nop
 8000a6c:	3720      	adds	r7, #32
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
	...

08000a74 <HAL_SPI_TxCpltCallback>:

volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  /* Deselect when Tx Complete */
  if(hspi == HSPI_INSTANCE)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	4a06      	ldr	r2, [pc, #24]	@ (8000a98 <HAL_SPI_TxCpltCallback+0x24>)
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d104      	bne.n	8000a8e <HAL_SPI_TxCpltCallback+0x1a>
  {
	  HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000a84:	2201      	movs	r2, #1
 8000a86:	2110      	movs	r1, #16
 8000a88:	4804      	ldr	r0, [pc, #16]	@ (8000a9c <HAL_SPI_TxCpltCallback+0x28>)
 8000a8a:	f001 fe7d 	bl	8002788 <HAL_GPIO_WritePin>
  }
}
 8000a8e:	bf00      	nop
 8000a90:	3708      	adds	r7, #8
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	2000007c 	.word	0x2000007c
 8000a9c:	40020000 	.word	0x40020000

08000aa0 <ILI9341_SPI_Tx>:

static void ILI9341_SPI_Tx(uint8_t data)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8000aaa:	bf00      	nop
 8000aac:	4b08      	ldr	r3, [pc, #32]	@ (8000ad0 <ILI9341_SPI_Tx+0x30>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	689b      	ldr	r3, [r3, #8]
 8000ab2:	f003 0302 	and.w	r3, r3, #2
 8000ab6:	2b02      	cmp	r3, #2
 8000ab8:	d1f8      	bne.n	8000aac <ILI9341_SPI_Tx+0xc>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, &data, 1);
 8000aba:	1dfb      	adds	r3, r7, #7
 8000abc:	2201      	movs	r2, #1
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4803      	ldr	r0, [pc, #12]	@ (8000ad0 <ILI9341_SPI_Tx+0x30>)
 8000ac2:	f002 fc6d 	bl	80033a0 <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
}
 8000ac6:	bf00      	nop
 8000ac8:	3708      	adds	r7, #8
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	2000007c 	.word	0x2000007c

08000ad4 <ILI9341_SPI_TxBuffer>:

static void ILI9341_SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
 8000adc:	460b      	mov	r3, r1
 8000ade:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8000ae0:	bf00      	nop
 8000ae2:	4b08      	ldr	r3, [pc, #32]	@ (8000b04 <ILI9341_SPI_TxBuffer+0x30>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	689b      	ldr	r3, [r3, #8]
 8000ae8:	f003 0302 	and.w	r3, r3, #2
 8000aec:	2b02      	cmp	r3, #2
 8000aee:	d1f8      	bne.n	8000ae2 <ILI9341_SPI_TxBuffer+0xe>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, buffer, len);
 8000af0:	887b      	ldrh	r3, [r7, #2]
 8000af2:	461a      	mov	r2, r3
 8000af4:	6879      	ldr	r1, [r7, #4]
 8000af6:	4803      	ldr	r0, [pc, #12]	@ (8000b04 <ILI9341_SPI_TxBuffer+0x30>)
 8000af8:	f002 fc52 	bl	80033a0 <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, buffer, len, 10);
}
 8000afc:	bf00      	nop
 8000afe:	3708      	adds	r7, #8
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	2000007c 	.word	0x2000007c

08000b08 <ILI9341_WriteCommand>:

void ILI9341_WriteCommand(uint8_t cmd)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	4603      	mov	r3, r0
 8000b10:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	//command
 8000b12:	2200      	movs	r2, #0
 8000b14:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b18:	4807      	ldr	r0, [pc, #28]	@ (8000b38 <ILI9341_WriteCommand+0x30>)
 8000b1a:	f001 fe35 	bl	8002788 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8000b1e:	2200      	movs	r2, #0
 8000b20:	2110      	movs	r1, #16
 8000b22:	4805      	ldr	r0, [pc, #20]	@ (8000b38 <ILI9341_WriteCommand+0x30>)
 8000b24:	f001 fe30 	bl	8002788 <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(cmd);
 8000b28:	79fb      	ldrb	r3, [r7, #7]
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f7ff ffb8 	bl	8000aa0 <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8000b30:	bf00      	nop
 8000b32:	3708      	adds	r7, #8
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	40020000 	.word	0x40020000

08000b3c <ILI9341_WriteData>:

void ILI9341_WriteData(uint8_t data)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	4603      	mov	r3, r0
 8000b44:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 8000b46:	2201      	movs	r2, #1
 8000b48:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b4c:	4807      	ldr	r0, [pc, #28]	@ (8000b6c <ILI9341_WriteData+0x30>)
 8000b4e:	f001 fe1b 	bl	8002788 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8000b52:	2200      	movs	r2, #0
 8000b54:	2110      	movs	r1, #16
 8000b56:	4805      	ldr	r0, [pc, #20]	@ (8000b6c <ILI9341_WriteData+0x30>)
 8000b58:	f001 fe16 	bl	8002788 <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(data);
 8000b5c:	79fb      	ldrb	r3, [r7, #7]
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f7ff ff9e 	bl	8000aa0 <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8000b64:	bf00      	nop
 8000b66:	3708      	adds	r7, #8
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	40020000 	.word	0x40020000

08000b70 <ILI9341_WriteBuffer>:

void ILI9341_WriteBuffer(uint8_t *buffer, uint16_t len)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
 8000b78:	460b      	mov	r3, r1
 8000b7a:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b82:	4808      	ldr	r0, [pc, #32]	@ (8000ba4 <ILI9341_WriteBuffer+0x34>)
 8000b84:	f001 fe00 	bl	8002788 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8000b88:	2200      	movs	r2, #0
 8000b8a:	2110      	movs	r1, #16
 8000b8c:	4805      	ldr	r0, [pc, #20]	@ (8000ba4 <ILI9341_WriteBuffer+0x34>)
 8000b8e:	f001 fdfb 	bl	8002788 <HAL_GPIO_WritePin>
	ILI9341_SPI_TxBuffer(buffer, len);
 8000b92:	887b      	ldrh	r3, [r7, #2]
 8000b94:	4619      	mov	r1, r3
 8000b96:	6878      	ldr	r0, [r7, #4]
 8000b98:	f7ff ff9c 	bl	8000ad4 <ILI9341_SPI_TxBuffer>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8000b9c:	bf00      	nop
 8000b9e:	3708      	adds	r7, #8
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	40020000 	.word	0x40020000

08000ba8 <ILI9341_SetAddress>:

void ILI9341_SetAddress(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8000ba8:	b590      	push	{r4, r7, lr}
 8000baa:	b085      	sub	sp, #20
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4604      	mov	r4, r0
 8000bb0:	4608      	mov	r0, r1
 8000bb2:	4611      	mov	r1, r2
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	4623      	mov	r3, r4
 8000bb8:	80fb      	strh	r3, [r7, #6]
 8000bba:	4603      	mov	r3, r0
 8000bbc:	80bb      	strh	r3, [r7, #4]
 8000bbe:	460b      	mov	r3, r1
 8000bc0:	807b      	strh	r3, [r7, #2]
 8000bc2:	4613      	mov	r3, r2
 8000bc4:	803b      	strh	r3, [r7, #0]
	uint8_t buffer[4];
	buffer[0] = x1 >> 8;
 8000bc6:	88fb      	ldrh	r3, [r7, #6]
 8000bc8:	0a1b      	lsrs	r3, r3, #8
 8000bca:	b29b      	uxth	r3, r3
 8000bcc:	b2db      	uxtb	r3, r3
 8000bce:	733b      	strb	r3, [r7, #12]
	buffer[1] = x1;
 8000bd0:	88fb      	ldrh	r3, [r7, #6]
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	737b      	strb	r3, [r7, #13]
	buffer[2] = x2 >> 8;
 8000bd6:	887b      	ldrh	r3, [r7, #2]
 8000bd8:	0a1b      	lsrs	r3, r3, #8
 8000bda:	b29b      	uxth	r3, r3
 8000bdc:	b2db      	uxtb	r3, r3
 8000bde:	73bb      	strb	r3, [r7, #14]
	buffer[3] = x2;
 8000be0:	887b      	ldrh	r3, [r7, #2]
 8000be2:	b2db      	uxtb	r3, r3
 8000be4:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2A);
 8000be6:	202a      	movs	r0, #42	@ 0x2a
 8000be8:	f7ff ff8e 	bl	8000b08 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 8000bec:	f107 030c 	add.w	r3, r7, #12
 8000bf0:	2104      	movs	r1, #4
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f7ff ffbc 	bl	8000b70 <ILI9341_WriteBuffer>

	buffer[0] = y1 >> 8;
 8000bf8:	88bb      	ldrh	r3, [r7, #4]
 8000bfa:	0a1b      	lsrs	r3, r3, #8
 8000bfc:	b29b      	uxth	r3, r3
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	733b      	strb	r3, [r7, #12]
	buffer[1] = y1;
 8000c02:	88bb      	ldrh	r3, [r7, #4]
 8000c04:	b2db      	uxtb	r3, r3
 8000c06:	737b      	strb	r3, [r7, #13]
	buffer[2] = y2 >> 8;
 8000c08:	883b      	ldrh	r3, [r7, #0]
 8000c0a:	0a1b      	lsrs	r3, r3, #8
 8000c0c:	b29b      	uxth	r3, r3
 8000c0e:	b2db      	uxtb	r3, r3
 8000c10:	73bb      	strb	r3, [r7, #14]
	buffer[3] = y2;
 8000c12:	883b      	ldrh	r3, [r7, #0]
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2B);
 8000c18:	202b      	movs	r0, #43	@ 0x2b
 8000c1a:	f7ff ff75 	bl	8000b08 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 8000c1e:	f107 030c 	add.w	r3, r7, #12
 8000c22:	2104      	movs	r1, #4
 8000c24:	4618      	mov	r0, r3
 8000c26:	f7ff ffa3 	bl	8000b70 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);
 8000c2a:	202c      	movs	r0, #44	@ 0x2c
 8000c2c:	f7ff ff6c 	bl	8000b08 <ILI9341_WriteCommand>
}
 8000c30:	bf00      	nop
 8000c32:	3714      	adds	r7, #20
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd90      	pop	{r4, r7, pc}

08000c38 <ILI9341_Reset>:

void ILI9341_Reset(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);	//Disable
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c42:	480d      	ldr	r0, [pc, #52]	@ (8000c78 <ILI9341_Reset+0x40>)
 8000c44:	f001 fda0 	bl	8002788 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000c48:	200a      	movs	r0, #10
 8000c4a:	f000 ff73 	bl	8001b34 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);		//Select
 8000c4e:	2200      	movs	r2, #0
 8000c50:	2110      	movs	r1, #16
 8000c52:	4809      	ldr	r0, [pc, #36]	@ (8000c78 <ILI9341_Reset+0x40>)
 8000c54:	f001 fd98 	bl	8002788 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000c58:	200a      	movs	r0, #10
 8000c5a:	f000 ff6b 	bl	8001b34 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 8000c5e:	2201      	movs	r2, #1
 8000c60:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c64:	4804      	ldr	r0, [pc, #16]	@ (8000c78 <ILI9341_Reset+0x40>)
 8000c66:	f001 fd8f 	bl	8002788 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET); 		//Deselect
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	2110      	movs	r1, #16
 8000c6e:	4802      	ldr	r0, [pc, #8]	@ (8000c78 <ILI9341_Reset+0x40>)
 8000c70:	f001 fd8a 	bl	8002788 <HAL_GPIO_WritePin>
}
 8000c74:	bf00      	nop
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	40020000 	.word	0x40020000

08000c7c <ILI9341_Enable>:

void ILI9341_Enable(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 8000c80:	2201      	movs	r2, #1
 8000c82:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c86:	4802      	ldr	r0, [pc, #8]	@ (8000c90 <ILI9341_Enable+0x14>)
 8000c88:	f001 fd7e 	bl	8002788 <HAL_GPIO_WritePin>
}
 8000c8c:	bf00      	nop
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	40020000 	.word	0x40020000

08000c94 <ILI9341_Init>:

void ILI9341_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
	ILI9341_Enable();
 8000c98:	f7ff fff0 	bl	8000c7c <ILI9341_Enable>
	ILI9341_Reset();
 8000c9c:	f7ff ffcc 	bl	8000c38 <ILI9341_Reset>

	//SOFTWARE RESET
	ILI9341_WriteCommand(0x01);
 8000ca0:	2001      	movs	r0, #1
 8000ca2:	f7ff ff31 	bl	8000b08 <ILI9341_WriteCommand>
	HAL_Delay(10);
 8000ca6:	200a      	movs	r0, #10
 8000ca8:	f000 ff44 	bl	8001b34 <HAL_Delay>

	//POWER CONTROL A
	ILI9341_WriteCommand(0xCB);
 8000cac:	20cb      	movs	r0, #203	@ 0xcb
 8000cae:	f7ff ff2b 	bl	8000b08 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x39);
 8000cb2:	2039      	movs	r0, #57	@ 0x39
 8000cb4:	f7ff ff42 	bl	8000b3c <ILI9341_WriteData>
	ILI9341_WriteData(0x2C);
 8000cb8:	202c      	movs	r0, #44	@ 0x2c
 8000cba:	f7ff ff3f 	bl	8000b3c <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000cbe:	2000      	movs	r0, #0
 8000cc0:	f7ff ff3c 	bl	8000b3c <ILI9341_WriteData>
	ILI9341_WriteData(0x34);
 8000cc4:	2034      	movs	r0, #52	@ 0x34
 8000cc6:	f7ff ff39 	bl	8000b3c <ILI9341_WriteData>
	ILI9341_WriteData(0x02);
 8000cca:	2002      	movs	r0, #2
 8000ccc:	f7ff ff36 	bl	8000b3c <ILI9341_WriteData>

	//POWER CONTROL B
	ILI9341_WriteCommand(0xCF);
 8000cd0:	20cf      	movs	r0, #207	@ 0xcf
 8000cd2:	f7ff ff19 	bl	8000b08 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000cd6:	2000      	movs	r0, #0
 8000cd8:	f7ff ff30 	bl	8000b3c <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 8000cdc:	20c1      	movs	r0, #193	@ 0xc1
 8000cde:	f7ff ff2d 	bl	8000b3c <ILI9341_WriteData>
	ILI9341_WriteData(0x30);
 8000ce2:	2030      	movs	r0, #48	@ 0x30
 8000ce4:	f7ff ff2a 	bl	8000b3c <ILI9341_WriteData>

	//DRIVER TIMING CONTROL A
	ILI9341_WriteCommand(0xE8);
 8000ce8:	20e8      	movs	r0, #232	@ 0xe8
 8000cea:	f7ff ff0d 	bl	8000b08 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x85);
 8000cee:	2085      	movs	r0, #133	@ 0x85
 8000cf0:	f7ff ff24 	bl	8000b3c <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000cf4:	2000      	movs	r0, #0
 8000cf6:	f7ff ff21 	bl	8000b3c <ILI9341_WriteData>
	ILI9341_WriteData(0x78);
 8000cfa:	2078      	movs	r0, #120	@ 0x78
 8000cfc:	f7ff ff1e 	bl	8000b3c <ILI9341_WriteData>

	//DRIVER TIMING CONTROL B
	ILI9341_WriteCommand(0xEA);
 8000d00:	20ea      	movs	r0, #234	@ 0xea
 8000d02:	f7ff ff01 	bl	8000b08 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000d06:	2000      	movs	r0, #0
 8000d08:	f7ff ff18 	bl	8000b3c <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000d0c:	2000      	movs	r0, #0
 8000d0e:	f7ff ff15 	bl	8000b3c <ILI9341_WriteData>

	//POWER ON SEQUENCE CONTROL
	ILI9341_WriteCommand(0xED);
 8000d12:	20ed      	movs	r0, #237	@ 0xed
 8000d14:	f7ff fef8 	bl	8000b08 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x64);
 8000d18:	2064      	movs	r0, #100	@ 0x64
 8000d1a:	f7ff ff0f 	bl	8000b3c <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8000d1e:	2003      	movs	r0, #3
 8000d20:	f7ff ff0c 	bl	8000b3c <ILI9341_WriteData>
	ILI9341_WriteData(0x12);
 8000d24:	2012      	movs	r0, #18
 8000d26:	f7ff ff09 	bl	8000b3c <ILI9341_WriteData>
	ILI9341_WriteData(0x81);
 8000d2a:	2081      	movs	r0, #129	@ 0x81
 8000d2c:	f7ff ff06 	bl	8000b3c <ILI9341_WriteData>

	//PUMP RATIO CONTROL
	ILI9341_WriteCommand(0xF7);
 8000d30:	20f7      	movs	r0, #247	@ 0xf7
 8000d32:	f7ff fee9 	bl	8000b08 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x20);
 8000d36:	2020      	movs	r0, #32
 8000d38:	f7ff ff00 	bl	8000b3c <ILI9341_WriteData>

	//POWER CONTROL,VRH[5:0]
	ILI9341_WriteCommand(0xC0);
 8000d3c:	20c0      	movs	r0, #192	@ 0xc0
 8000d3e:	f7ff fee3 	bl	8000b08 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x23);
 8000d42:	2023      	movs	r0, #35	@ 0x23
 8000d44:	f7ff fefa 	bl	8000b3c <ILI9341_WriteData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_WriteCommand(0xC1);
 8000d48:	20c1      	movs	r0, #193	@ 0xc1
 8000d4a:	f7ff fedd 	bl	8000b08 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x10);
 8000d4e:	2010      	movs	r0, #16
 8000d50:	f7ff fef4 	bl	8000b3c <ILI9341_WriteData>

	//VCM CONTROL
	ILI9341_WriteCommand(0xC5);
 8000d54:	20c5      	movs	r0, #197	@ 0xc5
 8000d56:	f7ff fed7 	bl	8000b08 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x3E);
 8000d5a:	203e      	movs	r0, #62	@ 0x3e
 8000d5c:	f7ff feee 	bl	8000b3c <ILI9341_WriteData>
	ILI9341_WriteData(0x28);
 8000d60:	2028      	movs	r0, #40	@ 0x28
 8000d62:	f7ff feeb 	bl	8000b3c <ILI9341_WriteData>

	//VCM CONTROL 2
	ILI9341_WriteCommand(0xC7);
 8000d66:	20c7      	movs	r0, #199	@ 0xc7
 8000d68:	f7ff fece 	bl	8000b08 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x86);
 8000d6c:	2086      	movs	r0, #134	@ 0x86
 8000d6e:	f7ff fee5 	bl	8000b3c <ILI9341_WriteData>

	//MEMORY ACCESS CONTROL
	ILI9341_WriteCommand(0x36);
 8000d72:	2036      	movs	r0, #54	@ 0x36
 8000d74:	f7ff fec8 	bl	8000b08 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x48);
 8000d78:	2048      	movs	r0, #72	@ 0x48
 8000d7a:	f7ff fedf 	bl	8000b3c <ILI9341_WriteData>

	//PIXEL FORMAT
	ILI9341_WriteCommand(0x3A);
 8000d7e:	203a      	movs	r0, #58	@ 0x3a
 8000d80:	f7ff fec2 	bl	8000b08 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x55);
 8000d84:	2055      	movs	r0, #85	@ 0x55
 8000d86:	f7ff fed9 	bl	8000b3c <ILI9341_WriteData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_WriteCommand(0xB1);
 8000d8a:	20b1      	movs	r0, #177	@ 0xb1
 8000d8c:	f7ff febc 	bl	8000b08 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000d90:	2000      	movs	r0, #0
 8000d92:	f7ff fed3 	bl	8000b3c <ILI9341_WriteData>
	ILI9341_WriteData(0x18);
 8000d96:	2018      	movs	r0, #24
 8000d98:	f7ff fed0 	bl	8000b3c <ILI9341_WriteData>

	//DISPLAY FUNCTION CONTROL
	ILI9341_WriteCommand(0xB6);
 8000d9c:	20b6      	movs	r0, #182	@ 0xb6
 8000d9e:	f7ff feb3 	bl	8000b08 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x08);
 8000da2:	2008      	movs	r0, #8
 8000da4:	f7ff feca 	bl	8000b3c <ILI9341_WriteData>
	ILI9341_WriteData(0x82);
 8000da8:	2082      	movs	r0, #130	@ 0x82
 8000daa:	f7ff fec7 	bl	8000b3c <ILI9341_WriteData>
	ILI9341_WriteData(0x27);
 8000dae:	2027      	movs	r0, #39	@ 0x27
 8000db0:	f7ff fec4 	bl	8000b3c <ILI9341_WriteData>

	//3GAMMA FUNCTION DISABLE
	ILI9341_WriteCommand(0xF2);
 8000db4:	20f2      	movs	r0, #242	@ 0xf2
 8000db6:	f7ff fea7 	bl	8000b08 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000dba:	2000      	movs	r0, #0
 8000dbc:	f7ff febe 	bl	8000b3c <ILI9341_WriteData>

	//GAMMA CURVE SELECTED
	ILI9341_WriteCommand(0x26);
 8000dc0:	2026      	movs	r0, #38	@ 0x26
 8000dc2:	f7ff fea1 	bl	8000b08 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x01);
 8000dc6:	2001      	movs	r0, #1
 8000dc8:	f7ff feb8 	bl	8000b3c <ILI9341_WriteData>

	//POSITIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE0);
 8000dcc:	20e0      	movs	r0, #224	@ 0xe0
 8000dce:	f7ff fe9b 	bl	8000b08 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x0F);
 8000dd2:	200f      	movs	r0, #15
 8000dd4:	f7ff feb2 	bl	8000b3c <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8000dd8:	2031      	movs	r0, #49	@ 0x31
 8000dda:	f7ff feaf 	bl	8000b3c <ILI9341_WriteData>
	ILI9341_WriteData(0x2B);
 8000dde:	202b      	movs	r0, #43	@ 0x2b
 8000de0:	f7ff feac 	bl	8000b3c <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 8000de4:	200c      	movs	r0, #12
 8000de6:	f7ff fea9 	bl	8000b3c <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8000dea:	200e      	movs	r0, #14
 8000dec:	f7ff fea6 	bl	8000b3c <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 8000df0:	2008      	movs	r0, #8
 8000df2:	f7ff fea3 	bl	8000b3c <ILI9341_WriteData>
	ILI9341_WriteData(0x4E);
 8000df6:	204e      	movs	r0, #78	@ 0x4e
 8000df8:	f7ff fea0 	bl	8000b3c <ILI9341_WriteData>
	ILI9341_WriteData(0xF1);
 8000dfc:	20f1      	movs	r0, #241	@ 0xf1
 8000dfe:	f7ff fe9d 	bl	8000b3c <ILI9341_WriteData>
	ILI9341_WriteData(0x37);
 8000e02:	2037      	movs	r0, #55	@ 0x37
 8000e04:	f7ff fe9a 	bl	8000b3c <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 8000e08:	2007      	movs	r0, #7
 8000e0a:	f7ff fe97 	bl	8000b3c <ILI9341_WriteData>
	ILI9341_WriteData(0x10);
 8000e0e:	2010      	movs	r0, #16
 8000e10:	f7ff fe94 	bl	8000b3c <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8000e14:	2003      	movs	r0, #3
 8000e16:	f7ff fe91 	bl	8000b3c <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8000e1a:	200e      	movs	r0, #14
 8000e1c:	f7ff fe8e 	bl	8000b3c <ILI9341_WriteData>
	ILI9341_WriteData(0x09);
 8000e20:	2009      	movs	r0, #9
 8000e22:	f7ff fe8b 	bl	8000b3c <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000e26:	2000      	movs	r0, #0
 8000e28:	f7ff fe88 	bl	8000b3c <ILI9341_WriteData>

	//NEGATIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE1);
 8000e2c:	20e1      	movs	r0, #225	@ 0xe1
 8000e2e:	f7ff fe6b 	bl	8000b08 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000e32:	2000      	movs	r0, #0
 8000e34:	f7ff fe82 	bl	8000b3c <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8000e38:	200e      	movs	r0, #14
 8000e3a:	f7ff fe7f 	bl	8000b3c <ILI9341_WriteData>
	ILI9341_WriteData(0x14);
 8000e3e:	2014      	movs	r0, #20
 8000e40:	f7ff fe7c 	bl	8000b3c <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8000e44:	2003      	movs	r0, #3
 8000e46:	f7ff fe79 	bl	8000b3c <ILI9341_WriteData>
	ILI9341_WriteData(0x11);
 8000e4a:	2011      	movs	r0, #17
 8000e4c:	f7ff fe76 	bl	8000b3c <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 8000e50:	2007      	movs	r0, #7
 8000e52:	f7ff fe73 	bl	8000b3c <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8000e56:	2031      	movs	r0, #49	@ 0x31
 8000e58:	f7ff fe70 	bl	8000b3c <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 8000e5c:	20c1      	movs	r0, #193	@ 0xc1
 8000e5e:	f7ff fe6d 	bl	8000b3c <ILI9341_WriteData>
	ILI9341_WriteData(0x48);
 8000e62:	2048      	movs	r0, #72	@ 0x48
 8000e64:	f7ff fe6a 	bl	8000b3c <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 8000e68:	2008      	movs	r0, #8
 8000e6a:	f7ff fe67 	bl	8000b3c <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 8000e6e:	200f      	movs	r0, #15
 8000e70:	f7ff fe64 	bl	8000b3c <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 8000e74:	200c      	movs	r0, #12
 8000e76:	f7ff fe61 	bl	8000b3c <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8000e7a:	2031      	movs	r0, #49	@ 0x31
 8000e7c:	f7ff fe5e 	bl	8000b3c <ILI9341_WriteData>
	ILI9341_WriteData(0x36);
 8000e80:	2036      	movs	r0, #54	@ 0x36
 8000e82:	f7ff fe5b 	bl	8000b3c <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 8000e86:	200f      	movs	r0, #15
 8000e88:	f7ff fe58 	bl	8000b3c <ILI9341_WriteData>

	//EXIT SLEEP
	ILI9341_WriteCommand(0x11);
 8000e8c:	2011      	movs	r0, #17
 8000e8e:	f7ff fe3b 	bl	8000b08 <ILI9341_WriteCommand>
	HAL_Delay(100);
 8000e92:	2064      	movs	r0, #100	@ 0x64
 8000e94:	f000 fe4e 	bl	8001b34 <HAL_Delay>

	//TURN ON DISPLAY
	ILI9341_WriteCommand(0x29);
 8000e98:	2029      	movs	r0, #41	@ 0x29
 8000e9a:	f7ff fe35 	bl	8000b08 <ILI9341_WriteCommand>

	//STARTING ROTATION
	ILI9341_SetRotation(SCREEN_VERTICAL_1);
 8000e9e:	2000      	movs	r0, #0
 8000ea0:	f000 f802 	bl	8000ea8 <ILI9341_SetRotation>
}
 8000ea4:	bf00      	nop
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <ILI9341_SetRotation>:

void ILI9341_SetRotation(uint8_t rotation)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	71fb      	strb	r3, [r7, #7]
	ILI9341_WriteCommand(0x36);
 8000eb2:	2036      	movs	r0, #54	@ 0x36
 8000eb4:	f7ff fe28 	bl	8000b08 <ILI9341_WriteCommand>
	HAL_Delay(1);
 8000eb8:	2001      	movs	r0, #1
 8000eba:	f000 fe3b 	bl	8001b34 <HAL_Delay>

	switch(rotation)
 8000ebe:	79fb      	ldrb	r3, [r7, #7]
 8000ec0:	2b03      	cmp	r3, #3
 8000ec2:	d837      	bhi.n	8000f34 <ILI9341_SetRotation+0x8c>
 8000ec4:	a201      	add	r2, pc, #4	@ (adr r2, 8000ecc <ILI9341_SetRotation+0x24>)
 8000ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eca:	bf00      	nop
 8000ecc:	08000edd 	.word	0x08000edd
 8000ed0:	08000ef3 	.word	0x08000ef3
 8000ed4:	08000f09 	.word	0x08000f09
 8000ed8:	08000f1f 	.word	0x08000f1f
	{
	case SCREEN_VERTICAL_1:
		ILI9341_WriteData(0x40|0x08);
 8000edc:	2048      	movs	r0, #72	@ 0x48
 8000ede:	f7ff fe2d 	bl	8000b3c <ILI9341_WriteData>
		LCD_WIDTH = 240;
 8000ee2:	4b17      	ldr	r3, [pc, #92]	@ (8000f40 <ILI9341_SetRotation+0x98>)
 8000ee4:	22f0      	movs	r2, #240	@ 0xf0
 8000ee6:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8000ee8:	4b16      	ldr	r3, [pc, #88]	@ (8000f44 <ILI9341_SetRotation+0x9c>)
 8000eea:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000eee:	801a      	strh	r2, [r3, #0]
		break;
 8000ef0:	e021      	b.n	8000f36 <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_1:
		ILI9341_WriteData(0x20|0x08);
 8000ef2:	2028      	movs	r0, #40	@ 0x28
 8000ef4:	f7ff fe22 	bl	8000b3c <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 8000ef8:	4b11      	ldr	r3, [pc, #68]	@ (8000f40 <ILI9341_SetRotation+0x98>)
 8000efa:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000efe:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8000f00:	4b10      	ldr	r3, [pc, #64]	@ (8000f44 <ILI9341_SetRotation+0x9c>)
 8000f02:	22f0      	movs	r2, #240	@ 0xf0
 8000f04:	801a      	strh	r2, [r3, #0]
		break;
 8000f06:	e016      	b.n	8000f36 <ILI9341_SetRotation+0x8e>
	case SCREEN_VERTICAL_2:
		ILI9341_WriteData(0x80|0x08);
 8000f08:	2088      	movs	r0, #136	@ 0x88
 8000f0a:	f7ff fe17 	bl	8000b3c <ILI9341_WriteData>
		LCD_WIDTH  = 240;
 8000f0e:	4b0c      	ldr	r3, [pc, #48]	@ (8000f40 <ILI9341_SetRotation+0x98>)
 8000f10:	22f0      	movs	r2, #240	@ 0xf0
 8000f12:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8000f14:	4b0b      	ldr	r3, [pc, #44]	@ (8000f44 <ILI9341_SetRotation+0x9c>)
 8000f16:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000f1a:	801a      	strh	r2, [r3, #0]
		break;
 8000f1c:	e00b      	b.n	8000f36 <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_2:
		ILI9341_WriteData(0x40|0x80|0x20|0x08);
 8000f1e:	20e8      	movs	r0, #232	@ 0xe8
 8000f20:	f7ff fe0c 	bl	8000b3c <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 8000f24:	4b06      	ldr	r3, [pc, #24]	@ (8000f40 <ILI9341_SetRotation+0x98>)
 8000f26:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000f2a:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8000f2c:	4b05      	ldr	r3, [pc, #20]	@ (8000f44 <ILI9341_SetRotation+0x9c>)
 8000f2e:	22f0      	movs	r2, #240	@ 0xf0
 8000f30:	801a      	strh	r2, [r3, #0]
		break;
 8000f32:	e000      	b.n	8000f36 <ILI9341_SetRotation+0x8e>
	default:
		break;
 8000f34:	bf00      	nop
	}
}
 8000f36:	bf00      	nop
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	20000002 	.word	0x20000002
 8000f44:	20000000 	.word	0x20000000

08000f48 <ILI9341_DrawColorBurst>:
	uint8_t buffer[2] = {color>>8, color};
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
}

void ILI9341_DrawColorBurst(uint16_t color, uint32_t size)
{
 8000f48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000f4c:	b08d      	sub	sp, #52	@ 0x34
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	4603      	mov	r3, r0
 8000f52:	6039      	str	r1, [r7, #0]
 8000f54:	80fb      	strh	r3, [r7, #6]
 8000f56:	466b      	mov	r3, sp
 8000f58:	461e      	mov	r6, r3
	uint32_t BufferSize = 0;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if((size*2) < BURST_MAX_SIZE)
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000f66:	d202      	bcs.n	8000f6e <ILI9341_DrawColorBurst+0x26>
	{
		BufferSize = size;
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000f6c:	e002      	b.n	8000f74 <ILI9341_DrawColorBurst+0x2c>
	}
	else
	{
		BufferSize = BURST_MAX_SIZE;
 8000f6e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000f72:	62fb      	str	r3, [r7, #44]	@ 0x2c
	}

	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8000f74:	2201      	movs	r2, #1
 8000f76:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f7a:	483f      	ldr	r0, [pc, #252]	@ (8001078 <ILI9341_DrawColorBurst+0x130>)
 8000f7c:	f001 fc04 	bl	8002788 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000f80:	2200      	movs	r2, #0
 8000f82:	2110      	movs	r1, #16
 8000f84:	483c      	ldr	r0, [pc, #240]	@ (8001078 <ILI9341_DrawColorBurst+0x130>)
 8000f86:	f001 fbff 	bl	8002788 <HAL_GPIO_WritePin>

	uint8_t chifted = color>>8;
 8000f8a:	88fb      	ldrh	r3, [r7, #6]
 8000f8c:	0a1b      	lsrs	r3, r3, #8
 8000f8e:	b29b      	uxth	r3, r3
 8000f90:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	uint8_t BurstBuffer[BufferSize];
 8000f94:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000f96:	460b      	mov	r3, r1
 8000f98:	3b01      	subs	r3, #1
 8000f9a:	61fb      	str	r3, [r7, #28]
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	4688      	mov	r8, r1
 8000fa0:	4699      	mov	r9, r3
 8000fa2:	f04f 0200 	mov.w	r2, #0
 8000fa6:	f04f 0300 	mov.w	r3, #0
 8000faa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000fae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000fb2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	460c      	mov	r4, r1
 8000fba:	461d      	mov	r5, r3
 8000fbc:	f04f 0200 	mov.w	r2, #0
 8000fc0:	f04f 0300 	mov.w	r3, #0
 8000fc4:	00eb      	lsls	r3, r5, #3
 8000fc6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000fca:	00e2      	lsls	r2, r4, #3
 8000fcc:	1dcb      	adds	r3, r1, #7
 8000fce:	08db      	lsrs	r3, r3, #3
 8000fd0:	00db      	lsls	r3, r3, #3
 8000fd2:	ebad 0d03 	sub.w	sp, sp, r3
 8000fd6:	466b      	mov	r3, sp
 8000fd8:	3300      	adds	r3, #0
 8000fda:	61bb      	str	r3, [r7, #24]

	for(uint32_t j = 0; j < BufferSize; j+=2)
 8000fdc:	2300      	movs	r3, #0
 8000fde:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000fe0:	e00e      	b.n	8001000 <ILI9341_DrawColorBurst+0xb8>
	{
		BurstBuffer[j] = chifted;
 8000fe2:	69ba      	ldr	r2, [r7, #24]
 8000fe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000fe6:	4413      	add	r3, r2
 8000fe8:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8000fec:	701a      	strb	r2, [r3, #0]
		BurstBuffer[j+1] = color;
 8000fee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	88fa      	ldrh	r2, [r7, #6]
 8000ff4:	b2d1      	uxtb	r1, r2
 8000ff6:	69ba      	ldr	r2, [r7, #24]
 8000ff8:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < BufferSize; j+=2)
 8000ffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ffc:	3302      	adds	r3, #2
 8000ffe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001000:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001002:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001004:	429a      	cmp	r2, r3
 8001006:	d3ec      	bcc.n	8000fe2 <ILI9341_DrawColorBurst+0x9a>
	}

	uint32_t SendingSize = size * 2;
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	617b      	str	r3, [r7, #20]
	uint32_t SendingInBlock = SendingSize / BufferSize;
 800100e:	697a      	ldr	r2, [r7, #20]
 8001010:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001012:	fbb2 f3f3 	udiv	r3, r2, r3
 8001016:	613b      	str	r3, [r7, #16]
	uint32_t RemainderFromBlock = SendingSize % BufferSize;
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800101c:	fbb3 f2f2 	udiv	r2, r3, r2
 8001020:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001022:	fb01 f202 	mul.w	r2, r1, r2
 8001026:	1a9b      	subs	r3, r3, r2
 8001028:	60fb      	str	r3, [r7, #12]

	if(SendingInBlock != 0)
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d010      	beq.n	8001052 <ILI9341_DrawColorBurst+0x10a>
	{
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 8001030:	2300      	movs	r3, #0
 8001032:	627b      	str	r3, [r7, #36]	@ 0x24
 8001034:	e009      	b.n	800104a <ILI9341_DrawColorBurst+0x102>
		{
			HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, BufferSize, 10);
 8001036:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001038:	b29a      	uxth	r2, r3
 800103a:	230a      	movs	r3, #10
 800103c:	69b9      	ldr	r1, [r7, #24]
 800103e:	480f      	ldr	r0, [pc, #60]	@ (800107c <ILI9341_DrawColorBurst+0x134>)
 8001040:	f002 f869 	bl	8003116 <HAL_SPI_Transmit>
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 8001044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001046:	3301      	adds	r3, #1
 8001048:	627b      	str	r3, [r7, #36]	@ 0x24
 800104a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	429a      	cmp	r2, r3
 8001050:	d3f1      	bcc.n	8001036 <ILI9341_DrawColorBurst+0xee>
		}
	}

	HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, RemainderFromBlock, 10);
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	b29a      	uxth	r2, r3
 8001056:	230a      	movs	r3, #10
 8001058:	69b9      	ldr	r1, [r7, #24]
 800105a:	4808      	ldr	r0, [pc, #32]	@ (800107c <ILI9341_DrawColorBurst+0x134>)
 800105c:	f002 f85b 	bl	8003116 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001060:	2201      	movs	r2, #1
 8001062:	2110      	movs	r1, #16
 8001064:	4804      	ldr	r0, [pc, #16]	@ (8001078 <ILI9341_DrawColorBurst+0x130>)
 8001066:	f001 fb8f 	bl	8002788 <HAL_GPIO_WritePin>
 800106a:	46b5      	mov	sp, r6
}
 800106c:	bf00      	nop
 800106e:	3734      	adds	r7, #52	@ 0x34
 8001070:	46bd      	mov	sp, r7
 8001072:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001076:	bf00      	nop
 8001078:	40020000 	.word	0x40020000
 800107c:	2000007c 	.word	0x2000007c

08001080 <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	4603      	mov	r3, r0
 8001088:	80fb      	strh	r3, [r7, #6]
	ILI9341_SetAddress(0, 0, LCD_WIDTH, LCD_HEIGHT);
 800108a:	4b0e      	ldr	r3, [pc, #56]	@ (80010c4 <ILI9341_FillScreen+0x44>)
 800108c:	881b      	ldrh	r3, [r3, #0]
 800108e:	b29a      	uxth	r2, r3
 8001090:	4b0d      	ldr	r3, [pc, #52]	@ (80010c8 <ILI9341_FillScreen+0x48>)
 8001092:	881b      	ldrh	r3, [r3, #0]
 8001094:	b29b      	uxth	r3, r3
 8001096:	2100      	movs	r1, #0
 8001098:	2000      	movs	r0, #0
 800109a:	f7ff fd85 	bl	8000ba8 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, LCD_WIDTH*LCD_HEIGHT);
 800109e:	4b09      	ldr	r3, [pc, #36]	@ (80010c4 <ILI9341_FillScreen+0x44>)
 80010a0:	881b      	ldrh	r3, [r3, #0]
 80010a2:	b29b      	uxth	r3, r3
 80010a4:	461a      	mov	r2, r3
 80010a6:	4b08      	ldr	r3, [pc, #32]	@ (80010c8 <ILI9341_FillScreen+0x48>)
 80010a8:	881b      	ldrh	r3, [r3, #0]
 80010aa:	b29b      	uxth	r3, r3
 80010ac:	fb02 f303 	mul.w	r3, r2, r3
 80010b0:	461a      	mov	r2, r3
 80010b2:	88fb      	ldrh	r3, [r7, #6]
 80010b4:	4611      	mov	r1, r2
 80010b6:	4618      	mov	r0, r3
 80010b8:	f7ff ff46 	bl	8000f48 <ILI9341_DrawColorBurst>
}
 80010bc:	bf00      	nop
 80010be:	3708      	adds	r7, #8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	20000002 	.word	0x20000002
 80010c8:	20000000 	.word	0x20000000

080010cc <ILI9341_DrawPixel>:

void ILI9341_DrawPixel(uint16_t x,uint16_t y,uint16_t color)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b086      	sub	sp, #24
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	80fb      	strh	r3, [r7, #6]
 80010d6:	460b      	mov	r3, r1
 80010d8:	80bb      	strh	r3, [r7, #4]
 80010da:	4613      	mov	r3, r2
 80010dc:	807b      	strh	r3, [r7, #2]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 80010de:	4b2c      	ldr	r3, [pc, #176]	@ (8001190 <ILI9341_DrawPixel+0xc4>)
 80010e0:	881b      	ldrh	r3, [r3, #0]
 80010e2:	b29b      	uxth	r3, r3
 80010e4:	88fa      	ldrh	r2, [r7, #6]
 80010e6:	429a      	cmp	r2, r3
 80010e8:	d24d      	bcs.n	8001186 <ILI9341_DrawPixel+0xba>
 80010ea:	4b2a      	ldr	r3, [pc, #168]	@ (8001194 <ILI9341_DrawPixel+0xc8>)
 80010ec:	881b      	ldrh	r3, [r3, #0]
 80010ee:	b29b      	uxth	r3, r3
 80010f0:	88ba      	ldrh	r2, [r7, #4]
 80010f2:	429a      	cmp	r2, r3
 80010f4:	d247      	bcs.n	8001186 <ILI9341_DrawPixel+0xba>

	uint8_t bufferX[4] = {x>>8, x, (x+1)>>8, (x+1)};
 80010f6:	88fb      	ldrh	r3, [r7, #6]
 80010f8:	0a1b      	lsrs	r3, r3, #8
 80010fa:	b29b      	uxth	r3, r3
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	753b      	strb	r3, [r7, #20]
 8001100:	88fb      	ldrh	r3, [r7, #6]
 8001102:	b2db      	uxtb	r3, r3
 8001104:	757b      	strb	r3, [r7, #21]
 8001106:	88fb      	ldrh	r3, [r7, #6]
 8001108:	3301      	adds	r3, #1
 800110a:	121b      	asrs	r3, r3, #8
 800110c:	b2db      	uxtb	r3, r3
 800110e:	75bb      	strb	r3, [r7, #22]
 8001110:	88fb      	ldrh	r3, [r7, #6]
 8001112:	b2db      	uxtb	r3, r3
 8001114:	3301      	adds	r3, #1
 8001116:	b2db      	uxtb	r3, r3
 8001118:	75fb      	strb	r3, [r7, #23]
	uint8_t bufferY[4] = {y>>8, y, (y+1)>>8, (y+1)};
 800111a:	88bb      	ldrh	r3, [r7, #4]
 800111c:	0a1b      	lsrs	r3, r3, #8
 800111e:	b29b      	uxth	r3, r3
 8001120:	b2db      	uxtb	r3, r3
 8001122:	743b      	strb	r3, [r7, #16]
 8001124:	88bb      	ldrh	r3, [r7, #4]
 8001126:	b2db      	uxtb	r3, r3
 8001128:	747b      	strb	r3, [r7, #17]
 800112a:	88bb      	ldrh	r3, [r7, #4]
 800112c:	3301      	adds	r3, #1
 800112e:	121b      	asrs	r3, r3, #8
 8001130:	b2db      	uxtb	r3, r3
 8001132:	74bb      	strb	r3, [r7, #18]
 8001134:	88bb      	ldrh	r3, [r7, #4]
 8001136:	b2db      	uxtb	r3, r3
 8001138:	3301      	adds	r3, #1
 800113a:	b2db      	uxtb	r3, r3
 800113c:	74fb      	strb	r3, [r7, #19]
	uint8_t bufferC[2] = {color>>8, color};
 800113e:	887b      	ldrh	r3, [r7, #2]
 8001140:	0a1b      	lsrs	r3, r3, #8
 8001142:	b29b      	uxth	r3, r3
 8001144:	b2db      	uxtb	r3, r3
 8001146:	733b      	strb	r3, [r7, #12]
 8001148:	887b      	ldrh	r3, [r7, #2]
 800114a:	b2db      	uxtb	r3, r3
 800114c:	737b      	strb	r3, [r7, #13]

	ILI9341_WriteCommand(0x2A);						//ADDRESS
 800114e:	202a      	movs	r0, #42	@ 0x2a
 8001150:	f7ff fcda 	bl	8000b08 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferX, sizeof(bufferX));	//XDATA
 8001154:	f107 0314 	add.w	r3, r7, #20
 8001158:	2104      	movs	r1, #4
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff fd08 	bl	8000b70 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2B);						//ADDRESS
 8001160:	202b      	movs	r0, #43	@ 0x2b
 8001162:	f7ff fcd1 	bl	8000b08 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferY, sizeof(bufferY));	//YDATA
 8001166:	f107 0310 	add.w	r3, r7, #16
 800116a:	2104      	movs	r1, #4
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff fcff 	bl	8000b70 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);						//ADDRESS
 8001172:	202c      	movs	r0, #44	@ 0x2c
 8001174:	f7ff fcc8 	bl	8000b08 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferC, sizeof(bufferC));	//COLOR
 8001178:	f107 030c 	add.w	r3, r7, #12
 800117c:	2102      	movs	r1, #2
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff fcf6 	bl	8000b70 <ILI9341_WriteBuffer>
 8001184:	e000      	b.n	8001188 <ILI9341_DrawPixel+0xbc>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001186:	bf00      	nop
}
 8001188:	3718      	adds	r7, #24
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	20000002 	.word	0x20000002
 8001194:	20000000 	.word	0x20000000

08001198 <ILI9341_DrawRectangle>:

void ILI9341_DrawRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color)
{
 8001198:	b590      	push	{r4, r7, lr}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	4604      	mov	r4, r0
 80011a0:	4608      	mov	r0, r1
 80011a2:	4611      	mov	r1, r2
 80011a4:	461a      	mov	r2, r3
 80011a6:	4623      	mov	r3, r4
 80011a8:	80fb      	strh	r3, [r7, #6]
 80011aa:	4603      	mov	r3, r0
 80011ac:	80bb      	strh	r3, [r7, #4]
 80011ae:	460b      	mov	r3, r1
 80011b0:	807b      	strh	r3, [r7, #2]
 80011b2:	4613      	mov	r3, r2
 80011b4:	803b      	strh	r3, [r7, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 80011b6:	4b24      	ldr	r3, [pc, #144]	@ (8001248 <ILI9341_DrawRectangle+0xb0>)
 80011b8:	881b      	ldrh	r3, [r3, #0]
 80011ba:	b29b      	uxth	r3, r3
 80011bc:	88fa      	ldrh	r2, [r7, #6]
 80011be:	429a      	cmp	r2, r3
 80011c0:	d23d      	bcs.n	800123e <ILI9341_DrawRectangle+0xa6>
 80011c2:	4b22      	ldr	r3, [pc, #136]	@ (800124c <ILI9341_DrawRectangle+0xb4>)
 80011c4:	881b      	ldrh	r3, [r3, #0]
 80011c6:	b29b      	uxth	r3, r3
 80011c8:	88ba      	ldrh	r2, [r7, #4]
 80011ca:	429a      	cmp	r2, r3
 80011cc:	d237      	bcs.n	800123e <ILI9341_DrawRectangle+0xa6>

	if((x+width-1)>=LCD_WIDTH)
 80011ce:	88fa      	ldrh	r2, [r7, #6]
 80011d0:	887b      	ldrh	r3, [r7, #2]
 80011d2:	4413      	add	r3, r2
 80011d4:	4a1c      	ldr	r2, [pc, #112]	@ (8001248 <ILI9341_DrawRectangle+0xb0>)
 80011d6:	8812      	ldrh	r2, [r2, #0]
 80011d8:	b292      	uxth	r2, r2
 80011da:	4293      	cmp	r3, r2
 80011dc:	dd05      	ble.n	80011ea <ILI9341_DrawRectangle+0x52>
	{
		width=LCD_WIDTH-x;
 80011de:	4b1a      	ldr	r3, [pc, #104]	@ (8001248 <ILI9341_DrawRectangle+0xb0>)
 80011e0:	881b      	ldrh	r3, [r3, #0]
 80011e2:	b29a      	uxth	r2, r3
 80011e4:	88fb      	ldrh	r3, [r7, #6]
 80011e6:	1ad3      	subs	r3, r2, r3
 80011e8:	807b      	strh	r3, [r7, #2]
	}

	if((y+height-1)>=LCD_HEIGHT)
 80011ea:	88ba      	ldrh	r2, [r7, #4]
 80011ec:	883b      	ldrh	r3, [r7, #0]
 80011ee:	4413      	add	r3, r2
 80011f0:	4a16      	ldr	r2, [pc, #88]	@ (800124c <ILI9341_DrawRectangle+0xb4>)
 80011f2:	8812      	ldrh	r2, [r2, #0]
 80011f4:	b292      	uxth	r2, r2
 80011f6:	4293      	cmp	r3, r2
 80011f8:	dd05      	ble.n	8001206 <ILI9341_DrawRectangle+0x6e>
	{
		height=LCD_HEIGHT-y;
 80011fa:	4b14      	ldr	r3, [pc, #80]	@ (800124c <ILI9341_DrawRectangle+0xb4>)
 80011fc:	881b      	ldrh	r3, [r3, #0]
 80011fe:	b29a      	uxth	r2, r3
 8001200:	88bb      	ldrh	r3, [r7, #4]
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	803b      	strh	r3, [r7, #0]
	}

	ILI9341_SetAddress(x, y, x+width-1, y+height-1);
 8001206:	88fa      	ldrh	r2, [r7, #6]
 8001208:	887b      	ldrh	r3, [r7, #2]
 800120a:	4413      	add	r3, r2
 800120c:	b29b      	uxth	r3, r3
 800120e:	3b01      	subs	r3, #1
 8001210:	b29c      	uxth	r4, r3
 8001212:	88ba      	ldrh	r2, [r7, #4]
 8001214:	883b      	ldrh	r3, [r7, #0]
 8001216:	4413      	add	r3, r2
 8001218:	b29b      	uxth	r3, r3
 800121a:	3b01      	subs	r3, #1
 800121c:	b29b      	uxth	r3, r3
 800121e:	88b9      	ldrh	r1, [r7, #4]
 8001220:	88f8      	ldrh	r0, [r7, #6]
 8001222:	4622      	mov	r2, r4
 8001224:	f7ff fcc0 	bl	8000ba8 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, height*width);
 8001228:	883b      	ldrh	r3, [r7, #0]
 800122a:	887a      	ldrh	r2, [r7, #2]
 800122c:	fb02 f303 	mul.w	r3, r2, r3
 8001230:	461a      	mov	r2, r3
 8001232:	8b3b      	ldrh	r3, [r7, #24]
 8001234:	4611      	mov	r1, r2
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff fe86 	bl	8000f48 <ILI9341_DrawColorBurst>
 800123c:	e000      	b.n	8001240 <ILI9341_DrawRectangle+0xa8>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 800123e:	bf00      	nop
}
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	bd90      	pop	{r4, r7, pc}
 8001246:	bf00      	nop
 8001248:	20000002 	.word	0x20000002
 800124c:	20000000 	.word	0x20000000

08001250 <ILI9341_DrawHLine>:

void ILI9341_DrawHLine(uint16_t x, uint16_t y, uint16_t width, uint16_t color)
{
 8001250:	b590      	push	{r4, r7, lr}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	4604      	mov	r4, r0
 8001258:	4608      	mov	r0, r1
 800125a:	4611      	mov	r1, r2
 800125c:	461a      	mov	r2, r3
 800125e:	4623      	mov	r3, r4
 8001260:	80fb      	strh	r3, [r7, #6]
 8001262:	4603      	mov	r3, r0
 8001264:	80bb      	strh	r3, [r7, #4]
 8001266:	460b      	mov	r3, r1
 8001268:	807b      	strh	r3, [r7, #2]
 800126a:	4613      	mov	r3, r2
 800126c:	803b      	strh	r3, [r7, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 800126e:	4b18      	ldr	r3, [pc, #96]	@ (80012d0 <ILI9341_DrawHLine+0x80>)
 8001270:	881b      	ldrh	r3, [r3, #0]
 8001272:	b29b      	uxth	r3, r3
 8001274:	88fa      	ldrh	r2, [r7, #6]
 8001276:	429a      	cmp	r2, r3
 8001278:	d225      	bcs.n	80012c6 <ILI9341_DrawHLine+0x76>
 800127a:	4b16      	ldr	r3, [pc, #88]	@ (80012d4 <ILI9341_DrawHLine+0x84>)
 800127c:	881b      	ldrh	r3, [r3, #0]
 800127e:	b29b      	uxth	r3, r3
 8001280:	88ba      	ldrh	r2, [r7, #4]
 8001282:	429a      	cmp	r2, r3
 8001284:	d21f      	bcs.n	80012c6 <ILI9341_DrawHLine+0x76>

	if((x+width-1)>=LCD_WIDTH)
 8001286:	88fa      	ldrh	r2, [r7, #6]
 8001288:	887b      	ldrh	r3, [r7, #2]
 800128a:	4413      	add	r3, r2
 800128c:	4a10      	ldr	r2, [pc, #64]	@ (80012d0 <ILI9341_DrawHLine+0x80>)
 800128e:	8812      	ldrh	r2, [r2, #0]
 8001290:	b292      	uxth	r2, r2
 8001292:	4293      	cmp	r3, r2
 8001294:	dd05      	ble.n	80012a2 <ILI9341_DrawHLine+0x52>
	{
		width=LCD_WIDTH-x;
 8001296:	4b0e      	ldr	r3, [pc, #56]	@ (80012d0 <ILI9341_DrawHLine+0x80>)
 8001298:	881b      	ldrh	r3, [r3, #0]
 800129a:	b29a      	uxth	r2, r3
 800129c:	88fb      	ldrh	r3, [r7, #6]
 800129e:	1ad3      	subs	r3, r2, r3
 80012a0:	807b      	strh	r3, [r7, #2]
	}

	ILI9341_SetAddress(x, y, x+width-1, y);
 80012a2:	88fa      	ldrh	r2, [r7, #6]
 80012a4:	887b      	ldrh	r3, [r7, #2]
 80012a6:	4413      	add	r3, r2
 80012a8:	b29b      	uxth	r3, r3
 80012aa:	3b01      	subs	r3, #1
 80012ac:	b29a      	uxth	r2, r3
 80012ae:	88bb      	ldrh	r3, [r7, #4]
 80012b0:	88b9      	ldrh	r1, [r7, #4]
 80012b2:	88f8      	ldrh	r0, [r7, #6]
 80012b4:	f7ff fc78 	bl	8000ba8 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, width);
 80012b8:	887a      	ldrh	r2, [r7, #2]
 80012ba:	883b      	ldrh	r3, [r7, #0]
 80012bc:	4611      	mov	r1, r2
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff fe42 	bl	8000f48 <ILI9341_DrawColorBurst>
 80012c4:	e000      	b.n	80012c8 <ILI9341_DrawHLine+0x78>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 80012c6:	bf00      	nop
}
 80012c8:	370c      	adds	r7, #12
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd90      	pop	{r4, r7, pc}
 80012ce:	bf00      	nop
 80012d0:	20000002 	.word	0x20000002
 80012d4:	20000000 	.word	0x20000000

080012d8 <ILI9341_DrawVLine>:

void ILI9341_DrawVLine(uint16_t x, uint16_t y, uint16_t height, uint16_t color)
{
 80012d8:	b590      	push	{r4, r7, lr}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	4604      	mov	r4, r0
 80012e0:	4608      	mov	r0, r1
 80012e2:	4611      	mov	r1, r2
 80012e4:	461a      	mov	r2, r3
 80012e6:	4623      	mov	r3, r4
 80012e8:	80fb      	strh	r3, [r7, #6]
 80012ea:	4603      	mov	r3, r0
 80012ec:	80bb      	strh	r3, [r7, #4]
 80012ee:	460b      	mov	r3, r1
 80012f0:	807b      	strh	r3, [r7, #2]
 80012f2:	4613      	mov	r3, r2
 80012f4:	803b      	strh	r3, [r7, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 80012f6:	4b18      	ldr	r3, [pc, #96]	@ (8001358 <ILI9341_DrawVLine+0x80>)
 80012f8:	881b      	ldrh	r3, [r3, #0]
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	88fa      	ldrh	r2, [r7, #6]
 80012fe:	429a      	cmp	r2, r3
 8001300:	d225      	bcs.n	800134e <ILI9341_DrawVLine+0x76>
 8001302:	4b16      	ldr	r3, [pc, #88]	@ (800135c <ILI9341_DrawVLine+0x84>)
 8001304:	881b      	ldrh	r3, [r3, #0]
 8001306:	b29b      	uxth	r3, r3
 8001308:	88ba      	ldrh	r2, [r7, #4]
 800130a:	429a      	cmp	r2, r3
 800130c:	d21f      	bcs.n	800134e <ILI9341_DrawVLine+0x76>

	if((y+height-1)>=LCD_HEIGHT)
 800130e:	88ba      	ldrh	r2, [r7, #4]
 8001310:	887b      	ldrh	r3, [r7, #2]
 8001312:	4413      	add	r3, r2
 8001314:	4a11      	ldr	r2, [pc, #68]	@ (800135c <ILI9341_DrawVLine+0x84>)
 8001316:	8812      	ldrh	r2, [r2, #0]
 8001318:	b292      	uxth	r2, r2
 800131a:	4293      	cmp	r3, r2
 800131c:	dd05      	ble.n	800132a <ILI9341_DrawVLine+0x52>
	{
		height=LCD_HEIGHT-y;
 800131e:	4b0f      	ldr	r3, [pc, #60]	@ (800135c <ILI9341_DrawVLine+0x84>)
 8001320:	881b      	ldrh	r3, [r3, #0]
 8001322:	b29a      	uxth	r2, r3
 8001324:	88bb      	ldrh	r3, [r7, #4]
 8001326:	1ad3      	subs	r3, r2, r3
 8001328:	807b      	strh	r3, [r7, #2]
	}

	ILI9341_SetAddress(x, y, x, y+height-1);
 800132a:	88ba      	ldrh	r2, [r7, #4]
 800132c:	887b      	ldrh	r3, [r7, #2]
 800132e:	4413      	add	r3, r2
 8001330:	b29b      	uxth	r3, r3
 8001332:	3b01      	subs	r3, #1
 8001334:	b29b      	uxth	r3, r3
 8001336:	88fa      	ldrh	r2, [r7, #6]
 8001338:	88b9      	ldrh	r1, [r7, #4]
 800133a:	88f8      	ldrh	r0, [r7, #6]
 800133c:	f7ff fc34 	bl	8000ba8 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, height);
 8001340:	887a      	ldrh	r2, [r7, #2]
 8001342:	883b      	ldrh	r3, [r7, #0]
 8001344:	4611      	mov	r1, r2
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff fdfe 	bl	8000f48 <ILI9341_DrawColorBurst>
 800134c:	e000      	b.n	8001350 <ILI9341_DrawVLine+0x78>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 800134e:	bf00      	nop
}
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	bd90      	pop	{r4, r7, pc}
 8001356:	bf00      	nop
 8001358:	20000002 	.word	0x20000002
 800135c:	20000000 	.word	0x20000000

08001360 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001366:	f000 fb73 	bl	8001a50 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800136a:	f000 f91b 	bl	80015a4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800136e:	f000 f9d7 	bl	8001720 <MX_GPIO_Init>
	MX_DMA_Init();
 8001372:	f000 f9b5 	bl	80016e0 <MX_DMA_Init>
	MX_SPI1_Init();
 8001376:	f000 f97d 	bl	8001674 <MX_SPI1_Init>
	/* USER CODE BEGIN 2 */
	ILI9341_Init();
 800137a:	f7ff fc8b 	bl	8000c94 <ILI9341_Init>

	// Simple Text writing (Text, Font, X, Y, Color, BackColor)
	// Available Fonts are FONT1, FONT2, FONT3 and FONT4
	ILI9341_FillScreen(WHITE);
 800137e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001382:	f7ff fe7d 	bl	8001080 <ILI9341_FillScreen>
	ILI9341_SetRotation(SCREEN_HORIZONTAL_2);
 8001386:	2003      	movs	r0, #3
 8001388:	f7ff fd8e 	bl	8000ea8 <ILI9341_SetRotation>
	ILI9341_DrawText("HELLO WORLD", FONT4, 90, 110, BLACK, WHITE);
 800138c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001390:	9301      	str	r3, [sp, #4]
 8001392:	2300      	movs	r3, #0
 8001394:	9300      	str	r3, [sp, #0]
 8001396:	236e      	movs	r3, #110	@ 0x6e
 8001398:	225a      	movs	r2, #90	@ 0x5a
 800139a:	497d      	ldr	r1, [pc, #500]	@ (8001590 <main+0x230>)
 800139c:	487d      	ldr	r0, [pc, #500]	@ (8001594 <main+0x234>)
 800139e:	f7ff fb1e 	bl	80009de <ILI9341_DrawText>
	HAL_Delay(1000);
 80013a2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80013a6:	f000 fbc5 	bl	8001b34 <HAL_Delay>

	//Writing numbers
	ILI9341_FillScreen(WHITE);
 80013aa:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80013ae:	f7ff fe67 	bl	8001080 <ILI9341_FillScreen>
	static char BufferText[30];
	for (uint8_t i = 0; i <= 5; i++) {
 80013b2:	2300      	movs	r3, #0
 80013b4:	71fb      	strb	r3, [r7, #7]
 80013b6:	e07b      	b.n	80014b0 <main+0x150>
		sprintf(BufferText, "COUNT : %d", i);
 80013b8:	79fb      	ldrb	r3, [r7, #7]
 80013ba:	461a      	mov	r2, r3
 80013bc:	4976      	ldr	r1, [pc, #472]	@ (8001598 <main+0x238>)
 80013be:	4877      	ldr	r0, [pc, #476]	@ (800159c <main+0x23c>)
 80013c0:	f002 fa12 	bl	80037e8 <siprintf>
		ILI9341_DrawText(BufferText, FONT3, 10, 10, BLACK, WHITE);
 80013c4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80013c8:	9301      	str	r3, [sp, #4]
 80013ca:	2300      	movs	r3, #0
 80013cc:	9300      	str	r3, [sp, #0]
 80013ce:	230a      	movs	r3, #10
 80013d0:	220a      	movs	r2, #10
 80013d2:	4973      	ldr	r1, [pc, #460]	@ (80015a0 <main+0x240>)
 80013d4:	4871      	ldr	r0, [pc, #452]	@ (800159c <main+0x23c>)
 80013d6:	f7ff fb02 	bl	80009de <ILI9341_DrawText>
		ILI9341_DrawText(BufferText, FONT3, 10, 30, BLUE, WHITE);
 80013da:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80013de:	9301      	str	r3, [sp, #4]
 80013e0:	231f      	movs	r3, #31
 80013e2:	9300      	str	r3, [sp, #0]
 80013e4:	231e      	movs	r3, #30
 80013e6:	220a      	movs	r2, #10
 80013e8:	496d      	ldr	r1, [pc, #436]	@ (80015a0 <main+0x240>)
 80013ea:	486c      	ldr	r0, [pc, #432]	@ (800159c <main+0x23c>)
 80013ec:	f7ff faf7 	bl	80009de <ILI9341_DrawText>
		ILI9341_DrawText(BufferText, FONT3, 10, 50, RED, WHITE);
 80013f0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80013f4:	9301      	str	r3, [sp, #4]
 80013f6:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80013fa:	9300      	str	r3, [sp, #0]
 80013fc:	2332      	movs	r3, #50	@ 0x32
 80013fe:	220a      	movs	r2, #10
 8001400:	4967      	ldr	r1, [pc, #412]	@ (80015a0 <main+0x240>)
 8001402:	4866      	ldr	r0, [pc, #408]	@ (800159c <main+0x23c>)
 8001404:	f7ff faeb 	bl	80009de <ILI9341_DrawText>
		ILI9341_DrawText(BufferText, FONT3, 10, 70, GREEN, WHITE);
 8001408:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800140c:	9301      	str	r3, [sp, #4]
 800140e:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001412:	9300      	str	r3, [sp, #0]
 8001414:	2346      	movs	r3, #70	@ 0x46
 8001416:	220a      	movs	r2, #10
 8001418:	4961      	ldr	r1, [pc, #388]	@ (80015a0 <main+0x240>)
 800141a:	4860      	ldr	r0, [pc, #384]	@ (800159c <main+0x23c>)
 800141c:	f7ff fadf 	bl	80009de <ILI9341_DrawText>
		ILI9341_DrawText(BufferText, FONT3, 10, 90, YELLOW, WHITE);
 8001420:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001424:	9301      	str	r3, [sp, #4]
 8001426:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800142a:	9300      	str	r3, [sp, #0]
 800142c:	235a      	movs	r3, #90	@ 0x5a
 800142e:	220a      	movs	r2, #10
 8001430:	495b      	ldr	r1, [pc, #364]	@ (80015a0 <main+0x240>)
 8001432:	485a      	ldr	r0, [pc, #360]	@ (800159c <main+0x23c>)
 8001434:	f7ff fad3 	bl	80009de <ILI9341_DrawText>
		ILI9341_DrawText(BufferText, FONT3, 10, 110, PURPLE, WHITE);
 8001438:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800143c:	9301      	str	r3, [sp, #4]
 800143e:	f647 030f 	movw	r3, #30735	@ 0x780f
 8001442:	9300      	str	r3, [sp, #0]
 8001444:	236e      	movs	r3, #110	@ 0x6e
 8001446:	220a      	movs	r2, #10
 8001448:	4955      	ldr	r1, [pc, #340]	@ (80015a0 <main+0x240>)
 800144a:	4854      	ldr	r0, [pc, #336]	@ (800159c <main+0x23c>)
 800144c:	f7ff fac7 	bl	80009de <ILI9341_DrawText>
		ILI9341_DrawText(BufferText, FONT3, 10, 130, ORANGE, WHITE);
 8001450:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001454:	9301      	str	r3, [sp, #4]
 8001456:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 800145a:	9300      	str	r3, [sp, #0]
 800145c:	2382      	movs	r3, #130	@ 0x82
 800145e:	220a      	movs	r2, #10
 8001460:	494f      	ldr	r1, [pc, #316]	@ (80015a0 <main+0x240>)
 8001462:	484e      	ldr	r0, [pc, #312]	@ (800159c <main+0x23c>)
 8001464:	f7ff fabb 	bl	80009de <ILI9341_DrawText>
		ILI9341_DrawText(BufferText, FONT3, 10, 150, MAROON, WHITE);
 8001468:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800146c:	9301      	str	r3, [sp, #4]
 800146e:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 8001472:	9300      	str	r3, [sp, #0]
 8001474:	2396      	movs	r3, #150	@ 0x96
 8001476:	220a      	movs	r2, #10
 8001478:	4949      	ldr	r1, [pc, #292]	@ (80015a0 <main+0x240>)
 800147a:	4848      	ldr	r0, [pc, #288]	@ (800159c <main+0x23c>)
 800147c:	f7ff faaf 	bl	80009de <ILI9341_DrawText>
		ILI9341_DrawText(BufferText, FONT3, 10, 170, WHITE, BLACK);
 8001480:	2300      	movs	r3, #0
 8001482:	9301      	str	r3, [sp, #4]
 8001484:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001488:	9300      	str	r3, [sp, #0]
 800148a:	23aa      	movs	r3, #170	@ 0xaa
 800148c:	220a      	movs	r2, #10
 800148e:	4944      	ldr	r1, [pc, #272]	@ (80015a0 <main+0x240>)
 8001490:	4842      	ldr	r0, [pc, #264]	@ (800159c <main+0x23c>)
 8001492:	f7ff faa4 	bl	80009de <ILI9341_DrawText>
		ILI9341_DrawText(BufferText, FONT3, 10, 190, BLUE, BLACK);
 8001496:	2300      	movs	r3, #0
 8001498:	9301      	str	r3, [sp, #4]
 800149a:	231f      	movs	r3, #31
 800149c:	9300      	str	r3, [sp, #0]
 800149e:	23be      	movs	r3, #190	@ 0xbe
 80014a0:	220a      	movs	r2, #10
 80014a2:	493f      	ldr	r1, [pc, #252]	@ (80015a0 <main+0x240>)
 80014a4:	483d      	ldr	r0, [pc, #244]	@ (800159c <main+0x23c>)
 80014a6:	f7ff fa9a 	bl	80009de <ILI9341_DrawText>
	for (uint8_t i = 0; i <= 5; i++) {
 80014aa:	79fb      	ldrb	r3, [r7, #7]
 80014ac:	3301      	adds	r3, #1
 80014ae:	71fb      	strb	r3, [r7, #7]
 80014b0:	79fb      	ldrb	r3, [r7, #7]
 80014b2:	2b05      	cmp	r3, #5
 80014b4:	d980      	bls.n	80013b8 <main+0x58>
	}

	// Horizontal Line (X, Y, Length, Color)
	ILI9341_FillScreen(WHITE);
 80014b6:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80014ba:	f7ff fde1 	bl	8001080 <ILI9341_FillScreen>
	ILI9341_DrawHLine(50, 120, 200, NAVY);
 80014be:	230f      	movs	r3, #15
 80014c0:	22c8      	movs	r2, #200	@ 0xc8
 80014c2:	2178      	movs	r1, #120	@ 0x78
 80014c4:	2032      	movs	r0, #50	@ 0x32
 80014c6:	f7ff fec3 	bl	8001250 <ILI9341_DrawHLine>
	HAL_Delay(1000);
 80014ca:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80014ce:	f000 fb31 	bl	8001b34 <HAL_Delay>

	// Vertical Line (X, Y, Length, Color)
	ILI9341_FillScreen(WHITE);
 80014d2:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80014d6:	f7ff fdd3 	bl	8001080 <ILI9341_FillScreen>
	ILI9341_DrawVLine(160, 40, 150, DARKGREEN);
 80014da:	f44f 7378 	mov.w	r3, #992	@ 0x3e0
 80014de:	2296      	movs	r2, #150	@ 0x96
 80014e0:	2128      	movs	r1, #40	@ 0x28
 80014e2:	20a0      	movs	r0, #160	@ 0xa0
 80014e4:	f7ff fef8 	bl	80012d8 <ILI9341_DrawVLine>
	HAL_Delay(1000);
 80014e8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80014ec:	f000 fb22 	bl	8001b34 <HAL_Delay>

	// Hollow Circle (Centre X, Centre Y, Radius, Color)
	ILI9341_FillScreen(WHITE);
 80014f0:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80014f4:	f7ff fdc4 	bl	8001080 <ILI9341_FillScreen>
	ILI9341_DrawHollowCircle(160, 120, 80, PINK);
 80014f8:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 80014fc:	2250      	movs	r2, #80	@ 0x50
 80014fe:	2178      	movs	r1, #120	@ 0x78
 8001500:	20a0      	movs	r0, #160	@ 0xa0
 8001502:	f7ff f835 	bl	8000570 <ILI9341_DrawHollowCircle>
	HAL_Delay(1000);
 8001506:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800150a:	f000 fb13 	bl	8001b34 <HAL_Delay>

	// Filled Circle (Centre X, Centre Y, Radius, Color)
	ILI9341_FillScreen(WHITE);
 800150e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001512:	f7ff fdb5 	bl	8001080 <ILI9341_FillScreen>
	ILI9341_DrawFilledCircle(160, 120, 50, CYAN);
 8001516:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800151a:	2232      	movs	r2, #50	@ 0x32
 800151c:	2178      	movs	r1, #120	@ 0x78
 800151e:	20a0      	movs	r0, #160	@ 0xa0
 8001520:	f7ff f8dc 	bl	80006dc <ILI9341_DrawFilledCircle>
	HAL_Delay(1000);
 8001524:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001528:	f000 fb04 	bl	8001b34 <HAL_Delay>

	// Filled Rectangle (Start X, Start Y, Length X, Length Y)
	ILI9341_FillScreen(WHITE);
 800152c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001530:	f7ff fda6 	bl	8001080 <ILI9341_FillScreen>
	ILI9341_DrawRectangle(50, 50, 220, 140, GREENYELLOW);
 8001534:	f64a 73e5 	movw	r3, #45029	@ 0xafe5
 8001538:	9300      	str	r3, [sp, #0]
 800153a:	238c      	movs	r3, #140	@ 0x8c
 800153c:	22dc      	movs	r2, #220	@ 0xdc
 800153e:	2132      	movs	r1, #50	@ 0x32
 8001540:	2032      	movs	r0, #50	@ 0x32
 8001542:	f7ff fe29 	bl	8001198 <ILI9341_DrawRectangle>
	HAL_Delay(1000);
 8001546:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800154a:	f000 faf3 	bl	8001b34 <HAL_Delay>

	// Hollow Rectangle (Start X, Start Y, End X, End Y)
	ILI9341_FillScreen(WHITE);
 800154e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001552:	f7ff fd95 	bl	8001080 <ILI9341_FillScreen>
	ILI9341_DrawHollowRectangleCoord(50, 50, 270, 190, DARKCYAN);
 8001556:	f240 33ef 	movw	r3, #1007	@ 0x3ef
 800155a:	9300      	str	r3, [sp, #0]
 800155c:	23be      	movs	r3, #190	@ 0xbe
 800155e:	f44f 7287 	mov.w	r2, #270	@ 0x10e
 8001562:	2132      	movs	r1, #50	@ 0x32
 8001564:	2032      	movs	r0, #50	@ 0x32
 8001566:	f7ff f941 	bl	80007ec <ILI9341_DrawHollowRectangleCoord>
	HAL_Delay(1000);
 800156a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800156e:	f000 fae1 	bl	8001b34 <HAL_Delay>

	// Simple Pixel Only (X, Y, Color)
	ILI9341_FillScreen(WHITE);
 8001572:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001576:	f7ff fd83 	bl	8001080 <ILI9341_FillScreen>
	ILI9341_DrawPixel(100, 100, BLACK);
 800157a:	2200      	movs	r2, #0
 800157c:	2164      	movs	r1, #100	@ 0x64
 800157e:	2064      	movs	r0, #100	@ 0x64
 8001580:	f7ff fda4 	bl	80010cc <ILI9341_DrawPixel>
	HAL_Delay(1000);
 8001584:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001588:	f000 fad4 	bl	8001b34 <HAL_Delay>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 800158c:	bf00      	nop
 800158e:	e7fd      	b.n	800158c <main+0x22c>
 8001590:	08004abc 	.word	0x08004abc
 8001594:	08004140 	.word	0x08004140
 8001598:	0800414c 	.word	0x0800414c
 800159c:	20000134 	.word	0x20000134
 80015a0:	08004158 	.word	0x08004158

080015a4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b094      	sub	sp, #80	@ 0x50
 80015a8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80015aa:	f107 0320 	add.w	r3, r7, #32
 80015ae:	2230      	movs	r2, #48	@ 0x30
 80015b0:	2100      	movs	r1, #0
 80015b2:	4618      	mov	r0, r3
 80015b4:	f002 f938 	bl	8003828 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80015b8:	f107 030c 	add.w	r3, r7, #12
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	605a      	str	r2, [r3, #4]
 80015c2:	609a      	str	r2, [r3, #8]
 80015c4:	60da      	str	r2, [r3, #12]
 80015c6:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80015c8:	2300      	movs	r3, #0
 80015ca:	60bb      	str	r3, [r7, #8]
 80015cc:	4b27      	ldr	r3, [pc, #156]	@ (800166c <SystemClock_Config+0xc8>)
 80015ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015d0:	4a26      	ldr	r2, [pc, #152]	@ (800166c <SystemClock_Config+0xc8>)
 80015d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80015d8:	4b24      	ldr	r3, [pc, #144]	@ (800166c <SystemClock_Config+0xc8>)
 80015da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015e0:	60bb      	str	r3, [r7, #8]
 80015e2:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015e4:	2300      	movs	r3, #0
 80015e6:	607b      	str	r3, [r7, #4]
 80015e8:	4b21      	ldr	r3, [pc, #132]	@ (8001670 <SystemClock_Config+0xcc>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a20      	ldr	r2, [pc, #128]	@ (8001670 <SystemClock_Config+0xcc>)
 80015ee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80015f2:	6013      	str	r3, [r2, #0]
 80015f4:	4b1e      	ldr	r3, [pc, #120]	@ (8001670 <SystemClock_Config+0xcc>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80015fc:	607b      	str	r3, [r7, #4]
 80015fe:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001600:	2302      	movs	r3, #2
 8001602:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001604:	2301      	movs	r3, #1
 8001606:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001608:	2310      	movs	r3, #16
 800160a:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800160c:	2302      	movs	r3, #2
 800160e:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001610:	2300      	movs	r3, #0
 8001612:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8001614:	2308      	movs	r3, #8
 8001616:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 72;
 8001618:	2348      	movs	r3, #72	@ 0x48
 800161a:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800161c:	2302      	movs	r3, #2
 800161e:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8001620:	2304      	movs	r3, #4
 8001622:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001624:	f107 0320 	add.w	r3, r7, #32
 8001628:	4618      	mov	r0, r3
 800162a:	f001 f8c7 	bl	80027bc <HAL_RCC_OscConfig>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <SystemClock_Config+0x94>
		Error_Handler();
 8001634:	f000 f8b8 	bl	80017a8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001638:	230f      	movs	r3, #15
 800163a:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800163c:	2302      	movs	r3, #2
 800163e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001640:	2300      	movs	r3, #0
 8001642:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001644:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001648:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800164a:	2300      	movs	r3, #0
 800164c:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800164e:	f107 030c 	add.w	r3, r7, #12
 8001652:	2102      	movs	r1, #2
 8001654:	4618      	mov	r0, r3
 8001656:	f001 fb29 	bl	8002cac <HAL_RCC_ClockConfig>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <SystemClock_Config+0xc0>
		Error_Handler();
 8001660:	f000 f8a2 	bl	80017a8 <Error_Handler>
	}
}
 8001664:	bf00      	nop
 8001666:	3750      	adds	r7, #80	@ 0x50
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	40023800 	.word	0x40023800
 8001670:	40007000 	.word	0x40007000

08001674 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8001678:	4b17      	ldr	r3, [pc, #92]	@ (80016d8 <MX_SPI1_Init+0x64>)
 800167a:	4a18      	ldr	r2, [pc, #96]	@ (80016dc <MX_SPI1_Init+0x68>)
 800167c:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800167e:	4b16      	ldr	r3, [pc, #88]	@ (80016d8 <MX_SPI1_Init+0x64>)
 8001680:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001684:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001686:	4b14      	ldr	r3, [pc, #80]	@ (80016d8 <MX_SPI1_Init+0x64>)
 8001688:	2200      	movs	r2, #0
 800168a:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800168c:	4b12      	ldr	r3, [pc, #72]	@ (80016d8 <MX_SPI1_Init+0x64>)
 800168e:	2200      	movs	r2, #0
 8001690:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001692:	4b11      	ldr	r3, [pc, #68]	@ (80016d8 <MX_SPI1_Init+0x64>)
 8001694:	2200      	movs	r2, #0
 8001696:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001698:	4b0f      	ldr	r3, [pc, #60]	@ (80016d8 <MX_SPI1_Init+0x64>)
 800169a:	2200      	movs	r2, #0
 800169c:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800169e:	4b0e      	ldr	r3, [pc, #56]	@ (80016d8 <MX_SPI1_Init+0x64>)
 80016a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016a4:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80016a6:	4b0c      	ldr	r3, [pc, #48]	@ (80016d8 <MX_SPI1_Init+0x64>)
 80016a8:	2208      	movs	r2, #8
 80016aa:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016ac:	4b0a      	ldr	r3, [pc, #40]	@ (80016d8 <MX_SPI1_Init+0x64>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80016b2:	4b09      	ldr	r3, [pc, #36]	@ (80016d8 <MX_SPI1_Init+0x64>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016b8:	4b07      	ldr	r3, [pc, #28]	@ (80016d8 <MX_SPI1_Init+0x64>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi1.Init.CRCPolynomial = 10;
 80016be:	4b06      	ldr	r3, [pc, #24]	@ (80016d8 <MX_SPI1_Init+0x64>)
 80016c0:	220a      	movs	r2, #10
 80016c2:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 80016c4:	4804      	ldr	r0, [pc, #16]	@ (80016d8 <MX_SPI1_Init+0x64>)
 80016c6:	f001 fc9d 	bl	8003004 <HAL_SPI_Init>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <MX_SPI1_Init+0x60>
		Error_Handler();
 80016d0:	f000 f86a 	bl	80017a8 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80016d4:	bf00      	nop
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	2000007c 	.word	0x2000007c
 80016dc:	40013000 	.word	0x40013000

080016e0 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	607b      	str	r3, [r7, #4]
 80016ea:	4b0c      	ldr	r3, [pc, #48]	@ (800171c <MX_DMA_Init+0x3c>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ee:	4a0b      	ldr	r2, [pc, #44]	@ (800171c <MX_DMA_Init+0x3c>)
 80016f0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80016f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016f6:	4b09      	ldr	r3, [pc, #36]	@ (800171c <MX_DMA_Init+0x3c>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016fe:	607b      	str	r3, [r7, #4]
 8001700:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001702:	2200      	movs	r2, #0
 8001704:	2100      	movs	r1, #0
 8001706:	203a      	movs	r0, #58	@ 0x3a
 8001708:	f000 fb13 	bl	8001d32 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800170c:	203a      	movs	r0, #58	@ 0x3a
 800170e:	f000 fb2c 	bl	8001d6a <HAL_NVIC_EnableIRQ>

}
 8001712:	bf00      	nop
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	40023800 	.word	0x40023800

08001720 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001720:	b580      	push	{r7, lr}
 8001722:	b088      	sub	sp, #32
 8001724:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001726:	f107 030c 	add.w	r3, r7, #12
 800172a:	2200      	movs	r2, #0
 800172c:	601a      	str	r2, [r3, #0]
 800172e:	605a      	str	r2, [r3, #4]
 8001730:	609a      	str	r2, [r3, #8]
 8001732:	60da      	str	r2, [r3, #12]
 8001734:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001736:	2300      	movs	r3, #0
 8001738:	60bb      	str	r3, [r7, #8]
 800173a:	4b19      	ldr	r3, [pc, #100]	@ (80017a0 <MX_GPIO_Init+0x80>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173e:	4a18      	ldr	r2, [pc, #96]	@ (80017a0 <MX_GPIO_Init+0x80>)
 8001740:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001744:	6313      	str	r3, [r2, #48]	@ 0x30
 8001746:	4b16      	ldr	r3, [pc, #88]	@ (80017a0 <MX_GPIO_Init+0x80>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800174a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800174e:	60bb      	str	r3, [r7, #8]
 8001750:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	607b      	str	r3, [r7, #4]
 8001756:	4b12      	ldr	r3, [pc, #72]	@ (80017a0 <MX_GPIO_Init+0x80>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175a:	4a11      	ldr	r2, [pc, #68]	@ (80017a0 <MX_GPIO_Init+0x80>)
 800175c:	f043 0301 	orr.w	r3, r3, #1
 8001760:	6313      	str	r3, [r2, #48]	@ 0x30
 8001762:	4b0f      	ldr	r3, [pc, #60]	@ (80017a0 <MX_GPIO_Init+0x80>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	607b      	str	r3, [r7, #4]
 800176c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, CS_Pin | D_C_Pin | RESET_Pin, GPIO_PIN_RESET);
 800176e:	2200      	movs	r2, #0
 8001770:	f44f 7144 	mov.w	r1, #784	@ 0x310
 8001774:	480b      	ldr	r0, [pc, #44]	@ (80017a4 <MX_GPIO_Init+0x84>)
 8001776:	f001 f807 	bl	8002788 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : CS_Pin D_C_Pin RESET_Pin */
	GPIO_InitStruct.Pin = CS_Pin | D_C_Pin | RESET_Pin;
 800177a:	f44f 7344 	mov.w	r3, #784	@ 0x310
 800177e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001780:	2301      	movs	r3, #1
 8001782:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001784:	2300      	movs	r3, #0
 8001786:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001788:	2300      	movs	r3, #0
 800178a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800178c:	f107 030c 	add.w	r3, r7, #12
 8001790:	4619      	mov	r1, r3
 8001792:	4804      	ldr	r0, [pc, #16]	@ (80017a4 <MX_GPIO_Init+0x84>)
 8001794:	f000 fe74 	bl	8002480 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001798:	bf00      	nop
 800179a:	3720      	adds	r7, #32
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	40023800 	.word	0x40023800
 80017a4:	40020000 	.word	0x40020000

080017a8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017ac:	b672      	cpsid	i
}
 80017ae:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80017b0:	bf00      	nop
 80017b2:	e7fd      	b.n	80017b0 <Error_Handler+0x8>

080017b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ba:	2300      	movs	r3, #0
 80017bc:	607b      	str	r3, [r7, #4]
 80017be:	4b10      	ldr	r3, [pc, #64]	@ (8001800 <HAL_MspInit+0x4c>)
 80017c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017c2:	4a0f      	ldr	r2, [pc, #60]	@ (8001800 <HAL_MspInit+0x4c>)
 80017c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80017ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001800 <HAL_MspInit+0x4c>)
 80017cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017d2:	607b      	str	r3, [r7, #4]
 80017d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017d6:	2300      	movs	r3, #0
 80017d8:	603b      	str	r3, [r7, #0]
 80017da:	4b09      	ldr	r3, [pc, #36]	@ (8001800 <HAL_MspInit+0x4c>)
 80017dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017de:	4a08      	ldr	r2, [pc, #32]	@ (8001800 <HAL_MspInit+0x4c>)
 80017e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80017e6:	4b06      	ldr	r3, [pc, #24]	@ (8001800 <HAL_MspInit+0x4c>)
 80017e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017ee:	603b      	str	r3, [r7, #0]
 80017f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017f2:	bf00      	nop
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	40023800 	.word	0x40023800

08001804 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b08a      	sub	sp, #40	@ 0x28
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800180c:	f107 0314 	add.w	r3, r7, #20
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	605a      	str	r2, [r3, #4]
 8001816:	609a      	str	r2, [r3, #8]
 8001818:	60da      	str	r2, [r3, #12]
 800181a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a30      	ldr	r2, [pc, #192]	@ (80018e4 <HAL_SPI_MspInit+0xe0>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d159      	bne.n	80018da <HAL_SPI_MspInit+0xd6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	613b      	str	r3, [r7, #16]
 800182a:	4b2f      	ldr	r3, [pc, #188]	@ (80018e8 <HAL_SPI_MspInit+0xe4>)
 800182c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800182e:	4a2e      	ldr	r2, [pc, #184]	@ (80018e8 <HAL_SPI_MspInit+0xe4>)
 8001830:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001834:	6453      	str	r3, [r2, #68]	@ 0x44
 8001836:	4b2c      	ldr	r3, [pc, #176]	@ (80018e8 <HAL_SPI_MspInit+0xe4>)
 8001838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800183a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800183e:	613b      	str	r3, [r7, #16]
 8001840:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001842:	2300      	movs	r3, #0
 8001844:	60fb      	str	r3, [r7, #12]
 8001846:	4b28      	ldr	r3, [pc, #160]	@ (80018e8 <HAL_SPI_MspInit+0xe4>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800184a:	4a27      	ldr	r2, [pc, #156]	@ (80018e8 <HAL_SPI_MspInit+0xe4>)
 800184c:	f043 0301 	orr.w	r3, r3, #1
 8001850:	6313      	str	r3, [r2, #48]	@ 0x30
 8001852:	4b25      	ldr	r3, [pc, #148]	@ (80018e8 <HAL_SPI_MspInit+0xe4>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	60fb      	str	r3, [r7, #12]
 800185c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800185e:	23a0      	movs	r3, #160	@ 0xa0
 8001860:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001862:	2302      	movs	r3, #2
 8001864:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001866:	2300      	movs	r3, #0
 8001868:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800186a:	2303      	movs	r3, #3
 800186c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800186e:	2305      	movs	r3, #5
 8001870:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001872:	f107 0314 	add.w	r3, r7, #20
 8001876:	4619      	mov	r1, r3
 8001878:	481c      	ldr	r0, [pc, #112]	@ (80018ec <HAL_SPI_MspInit+0xe8>)
 800187a:	f000 fe01 	bl	8002480 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream2;
 800187e:	4b1c      	ldr	r3, [pc, #112]	@ (80018f0 <HAL_SPI_MspInit+0xec>)
 8001880:	4a1c      	ldr	r2, [pc, #112]	@ (80018f4 <HAL_SPI_MspInit+0xf0>)
 8001882:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_2;
 8001884:	4b1a      	ldr	r3, [pc, #104]	@ (80018f0 <HAL_SPI_MspInit+0xec>)
 8001886:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800188a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800188c:	4b18      	ldr	r3, [pc, #96]	@ (80018f0 <HAL_SPI_MspInit+0xec>)
 800188e:	2240      	movs	r2, #64	@ 0x40
 8001890:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001892:	4b17      	ldr	r3, [pc, #92]	@ (80018f0 <HAL_SPI_MspInit+0xec>)
 8001894:	2200      	movs	r2, #0
 8001896:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001898:	4b15      	ldr	r3, [pc, #84]	@ (80018f0 <HAL_SPI_MspInit+0xec>)
 800189a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800189e:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018a0:	4b13      	ldr	r3, [pc, #76]	@ (80018f0 <HAL_SPI_MspInit+0xec>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018a6:	4b12      	ldr	r3, [pc, #72]	@ (80018f0 <HAL_SPI_MspInit+0xec>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80018ac:	4b10      	ldr	r3, [pc, #64]	@ (80018f0 <HAL_SPI_MspInit+0xec>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80018b2:	4b0f      	ldr	r3, [pc, #60]	@ (80018f0 <HAL_SPI_MspInit+0xec>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018b8:	4b0d      	ldr	r3, [pc, #52]	@ (80018f0 <HAL_SPI_MspInit+0xec>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80018be:	480c      	ldr	r0, [pc, #48]	@ (80018f0 <HAL_SPI_MspInit+0xec>)
 80018c0:	f000 fa6e 	bl	8001da0 <HAL_DMA_Init>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 80018ca:	f7ff ff6d 	bl	80017a8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4a07      	ldr	r2, [pc, #28]	@ (80018f0 <HAL_SPI_MspInit+0xec>)
 80018d2:	649a      	str	r2, [r3, #72]	@ 0x48
 80018d4:	4a06      	ldr	r2, [pc, #24]	@ (80018f0 <HAL_SPI_MspInit+0xec>)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80018da:	bf00      	nop
 80018dc:	3728      	adds	r7, #40	@ 0x28
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	40013000 	.word	0x40013000
 80018e8:	40023800 	.word	0x40023800
 80018ec:	40020000 	.word	0x40020000
 80018f0:	200000d4 	.word	0x200000d4
 80018f4:	40026440 	.word	0x40026440

080018f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018fc:	bf00      	nop
 80018fe:	e7fd      	b.n	80018fc <NMI_Handler+0x4>

08001900 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001904:	bf00      	nop
 8001906:	e7fd      	b.n	8001904 <HardFault_Handler+0x4>

08001908 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800190c:	bf00      	nop
 800190e:	e7fd      	b.n	800190c <MemManage_Handler+0x4>

08001910 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001914:	bf00      	nop
 8001916:	e7fd      	b.n	8001914 <BusFault_Handler+0x4>

08001918 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800191c:	bf00      	nop
 800191e:	e7fd      	b.n	800191c <UsageFault_Handler+0x4>

08001920 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001924:	bf00      	nop
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr

0800192e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800192e:	b480      	push	{r7}
 8001930:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001932:	bf00      	nop
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr

0800193c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001940:	bf00      	nop
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr

0800194a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800194e:	f000 f8d1 	bl	8001af4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001952:	bf00      	nop
 8001954:	bd80      	pop	{r7, pc}
	...

08001958 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800195c:	4802      	ldr	r0, [pc, #8]	@ (8001968 <DMA2_Stream2_IRQHandler+0x10>)
 800195e:	f000 fb25 	bl	8001fac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001962:	bf00      	nop
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	200000d4 	.word	0x200000d4

0800196c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b086      	sub	sp, #24
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001974:	4a14      	ldr	r2, [pc, #80]	@ (80019c8 <_sbrk+0x5c>)
 8001976:	4b15      	ldr	r3, [pc, #84]	@ (80019cc <_sbrk+0x60>)
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001980:	4b13      	ldr	r3, [pc, #76]	@ (80019d0 <_sbrk+0x64>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d102      	bne.n	800198e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001988:	4b11      	ldr	r3, [pc, #68]	@ (80019d0 <_sbrk+0x64>)
 800198a:	4a12      	ldr	r2, [pc, #72]	@ (80019d4 <_sbrk+0x68>)
 800198c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800198e:	4b10      	ldr	r3, [pc, #64]	@ (80019d0 <_sbrk+0x64>)
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4413      	add	r3, r2
 8001996:	693a      	ldr	r2, [r7, #16]
 8001998:	429a      	cmp	r2, r3
 800199a:	d207      	bcs.n	80019ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800199c:	f001 ff4c 	bl	8003838 <__errno>
 80019a0:	4603      	mov	r3, r0
 80019a2:	220c      	movs	r2, #12
 80019a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019a6:	f04f 33ff 	mov.w	r3, #4294967295
 80019aa:	e009      	b.n	80019c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019ac:	4b08      	ldr	r3, [pc, #32]	@ (80019d0 <_sbrk+0x64>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019b2:	4b07      	ldr	r3, [pc, #28]	@ (80019d0 <_sbrk+0x64>)
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4413      	add	r3, r2
 80019ba:	4a05      	ldr	r2, [pc, #20]	@ (80019d0 <_sbrk+0x64>)
 80019bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019be:	68fb      	ldr	r3, [r7, #12]
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3718      	adds	r7, #24
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	20020000 	.word	0x20020000
 80019cc:	00000400 	.word	0x00000400
 80019d0:	20000154 	.word	0x20000154
 80019d4:	200002a8 	.word	0x200002a8

080019d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019dc:	4b06      	ldr	r3, [pc, #24]	@ (80019f8 <SystemInit+0x20>)
 80019de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019e2:	4a05      	ldr	r2, [pc, #20]	@ (80019f8 <SystemInit+0x20>)
 80019e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019ec:	bf00      	nop
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	e000ed00 	.word	0xe000ed00

080019fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80019fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a34 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a00:	f7ff ffea 	bl	80019d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a04:	480c      	ldr	r0, [pc, #48]	@ (8001a38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a06:	490d      	ldr	r1, [pc, #52]	@ (8001a3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a08:	4a0d      	ldr	r2, [pc, #52]	@ (8001a40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a0c:	e002      	b.n	8001a14 <LoopCopyDataInit>

08001a0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a12:	3304      	adds	r3, #4

08001a14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a18:	d3f9      	bcc.n	8001a0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a1a:	4a0a      	ldr	r2, [pc, #40]	@ (8001a44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a1c:	4c0a      	ldr	r4, [pc, #40]	@ (8001a48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a20:	e001      	b.n	8001a26 <LoopFillZerobss>

08001a22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a24:	3204      	adds	r2, #4

08001a26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a28:	d3fb      	bcc.n	8001a22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a2a:	f001 ff0b 	bl	8003844 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a2e:	f7ff fc97 	bl	8001360 <main>
  bx  lr    
 8001a32:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a3c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001a40:	08005c5c 	.word	0x08005c5c
  ldr r2, =_sbss
 8001a44:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001a48:	200002a4 	.word	0x200002a4

08001a4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a4c:	e7fe      	b.n	8001a4c <ADC_IRQHandler>
	...

08001a50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a54:	4b0e      	ldr	r3, [pc, #56]	@ (8001a90 <HAL_Init+0x40>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a0d      	ldr	r2, [pc, #52]	@ (8001a90 <HAL_Init+0x40>)
 8001a5a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a60:	4b0b      	ldr	r3, [pc, #44]	@ (8001a90 <HAL_Init+0x40>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a0a      	ldr	r2, [pc, #40]	@ (8001a90 <HAL_Init+0x40>)
 8001a66:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a6c:	4b08      	ldr	r3, [pc, #32]	@ (8001a90 <HAL_Init+0x40>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a07      	ldr	r2, [pc, #28]	@ (8001a90 <HAL_Init+0x40>)
 8001a72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a78:	2003      	movs	r0, #3
 8001a7a:	f000 f94f 	bl	8001d1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a7e:	200f      	movs	r0, #15
 8001a80:	f000 f808 	bl	8001a94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a84:	f7ff fe96 	bl	80017b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a88:	2300      	movs	r3, #0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	40023c00 	.word	0x40023c00

08001a94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a9c:	4b12      	ldr	r3, [pc, #72]	@ (8001ae8 <HAL_InitTick+0x54>)
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	4b12      	ldr	r3, [pc, #72]	@ (8001aec <HAL_InitTick+0x58>)
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001aaa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f000 f967 	bl	8001d86 <HAL_SYSTICK_Config>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e00e      	b.n	8001ae0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2b0f      	cmp	r3, #15
 8001ac6:	d80a      	bhi.n	8001ade <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ac8:	2200      	movs	r2, #0
 8001aca:	6879      	ldr	r1, [r7, #4]
 8001acc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ad0:	f000 f92f 	bl	8001d32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ad4:	4a06      	ldr	r2, [pc, #24]	@ (8001af0 <HAL_InitTick+0x5c>)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ada:	2300      	movs	r3, #0
 8001adc:	e000      	b.n	8001ae0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3708      	adds	r7, #8
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	20000004 	.word	0x20000004
 8001aec:	2000000c 	.word	0x2000000c
 8001af0:	20000008 	.word	0x20000008

08001af4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001af8:	4b06      	ldr	r3, [pc, #24]	@ (8001b14 <HAL_IncTick+0x20>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	461a      	mov	r2, r3
 8001afe:	4b06      	ldr	r3, [pc, #24]	@ (8001b18 <HAL_IncTick+0x24>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4413      	add	r3, r2
 8001b04:	4a04      	ldr	r2, [pc, #16]	@ (8001b18 <HAL_IncTick+0x24>)
 8001b06:	6013      	str	r3, [r2, #0]
}
 8001b08:	bf00      	nop
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	2000000c 	.word	0x2000000c
 8001b18:	20000158 	.word	0x20000158

08001b1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b20:	4b03      	ldr	r3, [pc, #12]	@ (8001b30 <HAL_GetTick+0x14>)
 8001b22:	681b      	ldr	r3, [r3, #0]
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	20000158 	.word	0x20000158

08001b34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b3c:	f7ff ffee 	bl	8001b1c <HAL_GetTick>
 8001b40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b4c:	d005      	beq.n	8001b5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b4e:	4b0a      	ldr	r3, [pc, #40]	@ (8001b78 <HAL_Delay+0x44>)
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	461a      	mov	r2, r3
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	4413      	add	r3, r2
 8001b58:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b5a:	bf00      	nop
 8001b5c:	f7ff ffde 	bl	8001b1c <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	68fa      	ldr	r2, [r7, #12]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d8f7      	bhi.n	8001b5c <HAL_Delay+0x28>
  {
  }
}
 8001b6c:	bf00      	nop
 8001b6e:	bf00      	nop
 8001b70:	3710      	adds	r7, #16
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	2000000c 	.word	0x2000000c

08001b7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b085      	sub	sp, #20
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f003 0307 	and.w	r3, r3, #7
 8001b8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b8c:	4b0c      	ldr	r3, [pc, #48]	@ (8001bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b92:	68ba      	ldr	r2, [r7, #8]
 8001b94:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b98:	4013      	ands	r3, r2
 8001b9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ba4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ba8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bae:	4a04      	ldr	r2, [pc, #16]	@ (8001bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	60d3      	str	r3, [r2, #12]
}
 8001bb4:	bf00      	nop
 8001bb6:	3714      	adds	r7, #20
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr
 8001bc0:	e000ed00 	.word	0xe000ed00

08001bc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bc8:	4b04      	ldr	r3, [pc, #16]	@ (8001bdc <__NVIC_GetPriorityGrouping+0x18>)
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	0a1b      	lsrs	r3, r3, #8
 8001bce:	f003 0307 	and.w	r3, r3, #7
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr
 8001bdc:	e000ed00 	.word	0xe000ed00

08001be0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	4603      	mov	r3, r0
 8001be8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	db0b      	blt.n	8001c0a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bf2:	79fb      	ldrb	r3, [r7, #7]
 8001bf4:	f003 021f 	and.w	r2, r3, #31
 8001bf8:	4907      	ldr	r1, [pc, #28]	@ (8001c18 <__NVIC_EnableIRQ+0x38>)
 8001bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfe:	095b      	lsrs	r3, r3, #5
 8001c00:	2001      	movs	r0, #1
 8001c02:	fa00 f202 	lsl.w	r2, r0, r2
 8001c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c0a:	bf00      	nop
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	e000e100 	.word	0xe000e100

08001c1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	4603      	mov	r3, r0
 8001c24:	6039      	str	r1, [r7, #0]
 8001c26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	db0a      	blt.n	8001c46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	b2da      	uxtb	r2, r3
 8001c34:	490c      	ldr	r1, [pc, #48]	@ (8001c68 <__NVIC_SetPriority+0x4c>)
 8001c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3a:	0112      	lsls	r2, r2, #4
 8001c3c:	b2d2      	uxtb	r2, r2
 8001c3e:	440b      	add	r3, r1
 8001c40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c44:	e00a      	b.n	8001c5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	b2da      	uxtb	r2, r3
 8001c4a:	4908      	ldr	r1, [pc, #32]	@ (8001c6c <__NVIC_SetPriority+0x50>)
 8001c4c:	79fb      	ldrb	r3, [r7, #7]
 8001c4e:	f003 030f 	and.w	r3, r3, #15
 8001c52:	3b04      	subs	r3, #4
 8001c54:	0112      	lsls	r2, r2, #4
 8001c56:	b2d2      	uxtb	r2, r2
 8001c58:	440b      	add	r3, r1
 8001c5a:	761a      	strb	r2, [r3, #24]
}
 8001c5c:	bf00      	nop
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr
 8001c68:	e000e100 	.word	0xe000e100
 8001c6c:	e000ed00 	.word	0xe000ed00

08001c70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b089      	sub	sp, #36	@ 0x24
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	60f8      	str	r0, [r7, #12]
 8001c78:	60b9      	str	r1, [r7, #8]
 8001c7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	f003 0307 	and.w	r3, r3, #7
 8001c82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	f1c3 0307 	rsb	r3, r3, #7
 8001c8a:	2b04      	cmp	r3, #4
 8001c8c:	bf28      	it	cs
 8001c8e:	2304      	movcs	r3, #4
 8001c90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	3304      	adds	r3, #4
 8001c96:	2b06      	cmp	r3, #6
 8001c98:	d902      	bls.n	8001ca0 <NVIC_EncodePriority+0x30>
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	3b03      	subs	r3, #3
 8001c9e:	e000      	b.n	8001ca2 <NVIC_EncodePriority+0x32>
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cae:	43da      	mvns	r2, r3
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	401a      	ands	r2, r3
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cb8:	f04f 31ff 	mov.w	r1, #4294967295
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc2:	43d9      	mvns	r1, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cc8:	4313      	orrs	r3, r2
         );
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3724      	adds	r7, #36	@ 0x24
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
	...

08001cd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	3b01      	subs	r3, #1
 8001ce4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ce8:	d301      	bcc.n	8001cee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cea:	2301      	movs	r3, #1
 8001cec:	e00f      	b.n	8001d0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cee:	4a0a      	ldr	r2, [pc, #40]	@ (8001d18 <SysTick_Config+0x40>)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cf6:	210f      	movs	r1, #15
 8001cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cfc:	f7ff ff8e 	bl	8001c1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d00:	4b05      	ldr	r3, [pc, #20]	@ (8001d18 <SysTick_Config+0x40>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d06:	4b04      	ldr	r3, [pc, #16]	@ (8001d18 <SysTick_Config+0x40>)
 8001d08:	2207      	movs	r2, #7
 8001d0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	e000e010 	.word	0xe000e010

08001d1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f7ff ff29 	bl	8001b7c <__NVIC_SetPriorityGrouping>
}
 8001d2a:	bf00      	nop
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b086      	sub	sp, #24
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	4603      	mov	r3, r0
 8001d3a:	60b9      	str	r1, [r7, #8]
 8001d3c:	607a      	str	r2, [r7, #4]
 8001d3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d40:	2300      	movs	r3, #0
 8001d42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d44:	f7ff ff3e 	bl	8001bc4 <__NVIC_GetPriorityGrouping>
 8001d48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	68b9      	ldr	r1, [r7, #8]
 8001d4e:	6978      	ldr	r0, [r7, #20]
 8001d50:	f7ff ff8e 	bl	8001c70 <NVIC_EncodePriority>
 8001d54:	4602      	mov	r2, r0
 8001d56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d5a:	4611      	mov	r1, r2
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7ff ff5d 	bl	8001c1c <__NVIC_SetPriority>
}
 8001d62:	bf00      	nop
 8001d64:	3718      	adds	r7, #24
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b082      	sub	sp, #8
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	4603      	mov	r3, r0
 8001d72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7ff ff31 	bl	8001be0 <__NVIC_EnableIRQ>
}
 8001d7e:	bf00      	nop
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b082      	sub	sp, #8
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f7ff ffa2 	bl	8001cd8 <SysTick_Config>
 8001d94:	4603      	mov	r3, r0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
	...

08001da0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b086      	sub	sp, #24
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001da8:	2300      	movs	r3, #0
 8001daa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001dac:	f7ff feb6 	bl	8001b1c <HAL_GetTick>
 8001db0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d101      	bne.n	8001dbc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e099      	b.n	8001ef0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2202      	movs	r2, #2
 8001dc0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f022 0201 	bic.w	r2, r2, #1
 8001dda:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ddc:	e00f      	b.n	8001dfe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001dde:	f7ff fe9d 	bl	8001b1c <HAL_GetTick>
 8001de2:	4602      	mov	r2, r0
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	2b05      	cmp	r3, #5
 8001dea:	d908      	bls.n	8001dfe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2220      	movs	r2, #32
 8001df0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2203      	movs	r2, #3
 8001df6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e078      	b.n	8001ef0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0301 	and.w	r3, r3, #1
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d1e8      	bne.n	8001dde <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e14:	697a      	ldr	r2, [r7, #20]
 8001e16:	4b38      	ldr	r3, [pc, #224]	@ (8001ef8 <HAL_DMA_Init+0x158>)
 8001e18:	4013      	ands	r3, r2
 8001e1a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685a      	ldr	r2, [r3, #4]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	691b      	ldr	r3, [r3, #16]
 8001e30:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e36:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	699b      	ldr	r3, [r3, #24]
 8001e3c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e42:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6a1b      	ldr	r3, [r3, #32]
 8001e48:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e4a:	697a      	ldr	r2, [r7, #20]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e54:	2b04      	cmp	r3, #4
 8001e56:	d107      	bne.n	8001e68 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e60:	4313      	orrs	r3, r2
 8001e62:	697a      	ldr	r2, [r7, #20]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	697a      	ldr	r2, [r7, #20]
 8001e6e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	695b      	ldr	r3, [r3, #20]
 8001e76:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	f023 0307 	bic.w	r3, r3, #7
 8001e7e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e84:	697a      	ldr	r2, [r7, #20]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e8e:	2b04      	cmp	r3, #4
 8001e90:	d117      	bne.n	8001ec2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e96:	697a      	ldr	r2, [r7, #20]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d00e      	beq.n	8001ec2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f000 fa6f 	bl	8002388 <DMA_CheckFifoParam>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d008      	beq.n	8001ec2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2240      	movs	r2, #64	@ 0x40
 8001eb4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2201      	movs	r2, #1
 8001eba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e016      	b.n	8001ef0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	697a      	ldr	r2, [r7, #20]
 8001ec8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f000 fa26 	bl	800231c <DMA_CalcBaseAndBitshift>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ed8:	223f      	movs	r2, #63	@ 0x3f
 8001eda:	409a      	lsls	r2, r3
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2201      	movs	r2, #1
 8001eea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001eee:	2300      	movs	r3, #0
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3718      	adds	r7, #24
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	f010803f 	.word	0xf010803f

08001efc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b086      	sub	sp, #24
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	60b9      	str	r1, [r7, #8]
 8001f06:	607a      	str	r2, [r7, #4]
 8001f08:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f12:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d101      	bne.n	8001f22 <HAL_DMA_Start_IT+0x26>
 8001f1e:	2302      	movs	r3, #2
 8001f20:	e040      	b.n	8001fa4 <HAL_DMA_Start_IT+0xa8>
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2201      	movs	r2, #1
 8001f26:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d12f      	bne.n	8001f96 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2202      	movs	r2, #2
 8001f3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2200      	movs	r2, #0
 8001f42:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	68b9      	ldr	r1, [r7, #8]
 8001f4a:	68f8      	ldr	r0, [r7, #12]
 8001f4c:	f000 f9b8 	bl	80022c0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f54:	223f      	movs	r2, #63	@ 0x3f
 8001f56:	409a      	lsls	r2, r3
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f042 0216 	orr.w	r2, r2, #22
 8001f6a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d007      	beq.n	8001f84 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f042 0208 	orr.w	r2, r2, #8
 8001f82:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f042 0201 	orr.w	r2, r2, #1
 8001f92:	601a      	str	r2, [r3, #0]
 8001f94:	e005      	b.n	8001fa2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001f9e:	2302      	movs	r3, #2
 8001fa0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001fa2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3718      	adds	r7, #24
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b086      	sub	sp, #24
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001fb8:	4b8e      	ldr	r3, [pc, #568]	@ (80021f4 <HAL_DMA_IRQHandler+0x248>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a8e      	ldr	r2, [pc, #568]	@ (80021f8 <HAL_DMA_IRQHandler+0x24c>)
 8001fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc2:	0a9b      	lsrs	r3, r3, #10
 8001fc4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fd6:	2208      	movs	r2, #8
 8001fd8:	409a      	lsls	r2, r3
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	4013      	ands	r3, r2
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d01a      	beq.n	8002018 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0304 	and.w	r3, r3, #4
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d013      	beq.n	8002018 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f022 0204 	bic.w	r2, r2, #4
 8001ffe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002004:	2208      	movs	r2, #8
 8002006:	409a      	lsls	r2, r3
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002010:	f043 0201 	orr.w	r2, r3, #1
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800201c:	2201      	movs	r2, #1
 800201e:	409a      	lsls	r2, r3
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	4013      	ands	r3, r2
 8002024:	2b00      	cmp	r3, #0
 8002026:	d012      	beq.n	800204e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	695b      	ldr	r3, [r3, #20]
 800202e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002032:	2b00      	cmp	r3, #0
 8002034:	d00b      	beq.n	800204e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800203a:	2201      	movs	r2, #1
 800203c:	409a      	lsls	r2, r3
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002046:	f043 0202 	orr.w	r2, r3, #2
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002052:	2204      	movs	r2, #4
 8002054:	409a      	lsls	r2, r3
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	4013      	ands	r3, r2
 800205a:	2b00      	cmp	r3, #0
 800205c:	d012      	beq.n	8002084 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0302 	and.w	r3, r3, #2
 8002068:	2b00      	cmp	r3, #0
 800206a:	d00b      	beq.n	8002084 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002070:	2204      	movs	r2, #4
 8002072:	409a      	lsls	r2, r3
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800207c:	f043 0204 	orr.w	r2, r3, #4
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002088:	2210      	movs	r2, #16
 800208a:	409a      	lsls	r2, r3
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	4013      	ands	r3, r2
 8002090:	2b00      	cmp	r3, #0
 8002092:	d043      	beq.n	800211c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0308 	and.w	r3, r3, #8
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d03c      	beq.n	800211c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020a6:	2210      	movs	r2, #16
 80020a8:	409a      	lsls	r2, r3
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d018      	beq.n	80020ee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d108      	bne.n	80020dc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d024      	beq.n	800211c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	4798      	blx	r3
 80020da:	e01f      	b.n	800211c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d01b      	beq.n	800211c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	4798      	blx	r3
 80020ec:	e016      	b.n	800211c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d107      	bne.n	800210c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f022 0208 	bic.w	r2, r2, #8
 800210a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002110:	2b00      	cmp	r3, #0
 8002112:	d003      	beq.n	800211c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002120:	2220      	movs	r2, #32
 8002122:	409a      	lsls	r2, r3
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	4013      	ands	r3, r2
 8002128:	2b00      	cmp	r3, #0
 800212a:	f000 808f 	beq.w	800224c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0310 	and.w	r3, r3, #16
 8002138:	2b00      	cmp	r3, #0
 800213a:	f000 8087 	beq.w	800224c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002142:	2220      	movs	r2, #32
 8002144:	409a      	lsls	r2, r3
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002150:	b2db      	uxtb	r3, r3
 8002152:	2b05      	cmp	r3, #5
 8002154:	d136      	bne.n	80021c4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f022 0216 	bic.w	r2, r2, #22
 8002164:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	695a      	ldr	r2, [r3, #20]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002174:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800217a:	2b00      	cmp	r3, #0
 800217c:	d103      	bne.n	8002186 <HAL_DMA_IRQHandler+0x1da>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002182:	2b00      	cmp	r3, #0
 8002184:	d007      	beq.n	8002196 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f022 0208 	bic.w	r2, r2, #8
 8002194:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800219a:	223f      	movs	r2, #63	@ 0x3f
 800219c:	409a      	lsls	r2, r3
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2201      	movs	r2, #1
 80021a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d07e      	beq.n	80022b8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	4798      	blx	r3
        }
        return;
 80021c2:	e079      	b.n	80022b8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d01d      	beq.n	800220e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d10d      	bne.n	80021fc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d031      	beq.n	800224c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	4798      	blx	r3
 80021f0:	e02c      	b.n	800224c <HAL_DMA_IRQHandler+0x2a0>
 80021f2:	bf00      	nop
 80021f4:	20000004 	.word	0x20000004
 80021f8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002200:	2b00      	cmp	r3, #0
 8002202:	d023      	beq.n	800224c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	4798      	blx	r3
 800220c:	e01e      	b.n	800224c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002218:	2b00      	cmp	r3, #0
 800221a:	d10f      	bne.n	800223c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f022 0210 	bic.w	r2, r2, #16
 800222a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2201      	movs	r2, #1
 8002230:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2200      	movs	r2, #0
 8002238:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002240:	2b00      	cmp	r3, #0
 8002242:	d003      	beq.n	800224c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002250:	2b00      	cmp	r3, #0
 8002252:	d032      	beq.n	80022ba <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002258:	f003 0301 	and.w	r3, r3, #1
 800225c:	2b00      	cmp	r3, #0
 800225e:	d022      	beq.n	80022a6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2205      	movs	r2, #5
 8002264:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f022 0201 	bic.w	r2, r2, #1
 8002276:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	3301      	adds	r3, #1
 800227c:	60bb      	str	r3, [r7, #8]
 800227e:	697a      	ldr	r2, [r7, #20]
 8002280:	429a      	cmp	r2, r3
 8002282:	d307      	bcc.n	8002294 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0301 	and.w	r3, r3, #1
 800228e:	2b00      	cmp	r3, #0
 8002290:	d1f2      	bne.n	8002278 <HAL_DMA_IRQHandler+0x2cc>
 8002292:	e000      	b.n	8002296 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002294:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2201      	movs	r2, #1
 800229a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d005      	beq.n	80022ba <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	4798      	blx	r3
 80022b6:	e000      	b.n	80022ba <HAL_DMA_IRQHandler+0x30e>
        return;
 80022b8:	bf00      	nop
    }
  }
}
 80022ba:	3718      	adds	r7, #24
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}

080022c0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b085      	sub	sp, #20
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	60f8      	str	r0, [r7, #12]
 80022c8:	60b9      	str	r1, [r7, #8]
 80022ca:	607a      	str	r2, [r7, #4]
 80022cc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80022dc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	683a      	ldr	r2, [r7, #0]
 80022e4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	2b40      	cmp	r3, #64	@ 0x40
 80022ec:	d108      	bne.n	8002300 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	68ba      	ldr	r2, [r7, #8]
 80022fc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80022fe:	e007      	b.n	8002310 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	68ba      	ldr	r2, [r7, #8]
 8002306:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	60da      	str	r2, [r3, #12]
}
 8002310:	bf00      	nop
 8002312:	3714      	adds	r7, #20
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800231c:	b480      	push	{r7}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	b2db      	uxtb	r3, r3
 800232a:	3b10      	subs	r3, #16
 800232c:	4a14      	ldr	r2, [pc, #80]	@ (8002380 <DMA_CalcBaseAndBitshift+0x64>)
 800232e:	fba2 2303 	umull	r2, r3, r2, r3
 8002332:	091b      	lsrs	r3, r3, #4
 8002334:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002336:	4a13      	ldr	r2, [pc, #76]	@ (8002384 <DMA_CalcBaseAndBitshift+0x68>)
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	4413      	add	r3, r2
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	461a      	mov	r2, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2b03      	cmp	r3, #3
 8002348:	d909      	bls.n	800235e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002352:	f023 0303 	bic.w	r3, r3, #3
 8002356:	1d1a      	adds	r2, r3, #4
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	659a      	str	r2, [r3, #88]	@ 0x58
 800235c:	e007      	b.n	800236e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002366:	f023 0303 	bic.w	r3, r3, #3
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002372:	4618      	mov	r0, r3
 8002374:	3714      	adds	r7, #20
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	aaaaaaab 	.word	0xaaaaaaab
 8002384:	08005c10 	.word	0x08005c10

08002388 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002388:	b480      	push	{r7}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002390:	2300      	movs	r3, #0
 8002392:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002398:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	699b      	ldr	r3, [r3, #24]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d11f      	bne.n	80023e2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	2b03      	cmp	r3, #3
 80023a6:	d856      	bhi.n	8002456 <DMA_CheckFifoParam+0xce>
 80023a8:	a201      	add	r2, pc, #4	@ (adr r2, 80023b0 <DMA_CheckFifoParam+0x28>)
 80023aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023ae:	bf00      	nop
 80023b0:	080023c1 	.word	0x080023c1
 80023b4:	080023d3 	.word	0x080023d3
 80023b8:	080023c1 	.word	0x080023c1
 80023bc:	08002457 	.word	0x08002457
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023c4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d046      	beq.n	800245a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023d0:	e043      	b.n	800245a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023d6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80023da:	d140      	bne.n	800245e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023e0:	e03d      	b.n	800245e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	699b      	ldr	r3, [r3, #24]
 80023e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80023ea:	d121      	bne.n	8002430 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	2b03      	cmp	r3, #3
 80023f0:	d837      	bhi.n	8002462 <DMA_CheckFifoParam+0xda>
 80023f2:	a201      	add	r2, pc, #4	@ (adr r2, 80023f8 <DMA_CheckFifoParam+0x70>)
 80023f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023f8:	08002409 	.word	0x08002409
 80023fc:	0800240f 	.word	0x0800240f
 8002400:	08002409 	.word	0x08002409
 8002404:	08002421 	.word	0x08002421
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	73fb      	strb	r3, [r7, #15]
      break;
 800240c:	e030      	b.n	8002470 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002412:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d025      	beq.n	8002466 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800241e:	e022      	b.n	8002466 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002424:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002428:	d11f      	bne.n	800246a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800242e:	e01c      	b.n	800246a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	2b02      	cmp	r3, #2
 8002434:	d903      	bls.n	800243e <DMA_CheckFifoParam+0xb6>
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	2b03      	cmp	r3, #3
 800243a:	d003      	beq.n	8002444 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800243c:	e018      	b.n	8002470 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	73fb      	strb	r3, [r7, #15]
      break;
 8002442:	e015      	b.n	8002470 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002448:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d00e      	beq.n	800246e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	73fb      	strb	r3, [r7, #15]
      break;
 8002454:	e00b      	b.n	800246e <DMA_CheckFifoParam+0xe6>
      break;
 8002456:	bf00      	nop
 8002458:	e00a      	b.n	8002470 <DMA_CheckFifoParam+0xe8>
      break;
 800245a:	bf00      	nop
 800245c:	e008      	b.n	8002470 <DMA_CheckFifoParam+0xe8>
      break;
 800245e:	bf00      	nop
 8002460:	e006      	b.n	8002470 <DMA_CheckFifoParam+0xe8>
      break;
 8002462:	bf00      	nop
 8002464:	e004      	b.n	8002470 <DMA_CheckFifoParam+0xe8>
      break;
 8002466:	bf00      	nop
 8002468:	e002      	b.n	8002470 <DMA_CheckFifoParam+0xe8>
      break;   
 800246a:	bf00      	nop
 800246c:	e000      	b.n	8002470 <DMA_CheckFifoParam+0xe8>
      break;
 800246e:	bf00      	nop
    }
  } 
  
  return status; 
 8002470:	7bfb      	ldrb	r3, [r7, #15]
}
 8002472:	4618      	mov	r0, r3
 8002474:	3714      	adds	r7, #20
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop

08002480 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002480:	b480      	push	{r7}
 8002482:	b089      	sub	sp, #36	@ 0x24
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800248a:	2300      	movs	r3, #0
 800248c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800248e:	2300      	movs	r3, #0
 8002490:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002492:	2300      	movs	r3, #0
 8002494:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002496:	2300      	movs	r3, #0
 8002498:	61fb      	str	r3, [r7, #28]
 800249a:	e159      	b.n	8002750 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800249c:	2201      	movs	r2, #1
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	fa02 f303 	lsl.w	r3, r2, r3
 80024a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	697a      	ldr	r2, [r7, #20]
 80024ac:	4013      	ands	r3, r2
 80024ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024b0:	693a      	ldr	r2, [r7, #16]
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	f040 8148 	bne.w	800274a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f003 0303 	and.w	r3, r3, #3
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d005      	beq.n	80024d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d130      	bne.n	8002534 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	005b      	lsls	r3, r3, #1
 80024dc:	2203      	movs	r2, #3
 80024de:	fa02 f303 	lsl.w	r3, r2, r3
 80024e2:	43db      	mvns	r3, r3
 80024e4:	69ba      	ldr	r2, [r7, #24]
 80024e6:	4013      	ands	r3, r2
 80024e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	68da      	ldr	r2, [r3, #12]
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	005b      	lsls	r3, r3, #1
 80024f2:	fa02 f303 	lsl.w	r3, r2, r3
 80024f6:	69ba      	ldr	r2, [r7, #24]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	69ba      	ldr	r2, [r7, #24]
 8002500:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002508:	2201      	movs	r2, #1
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	fa02 f303 	lsl.w	r3, r2, r3
 8002510:	43db      	mvns	r3, r3
 8002512:	69ba      	ldr	r2, [r7, #24]
 8002514:	4013      	ands	r3, r2
 8002516:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	091b      	lsrs	r3, r3, #4
 800251e:	f003 0201 	and.w	r2, r3, #1
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	fa02 f303 	lsl.w	r3, r2, r3
 8002528:	69ba      	ldr	r2, [r7, #24]
 800252a:	4313      	orrs	r3, r2
 800252c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f003 0303 	and.w	r3, r3, #3
 800253c:	2b03      	cmp	r3, #3
 800253e:	d017      	beq.n	8002570 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	005b      	lsls	r3, r3, #1
 800254a:	2203      	movs	r2, #3
 800254c:	fa02 f303 	lsl.w	r3, r2, r3
 8002550:	43db      	mvns	r3, r3
 8002552:	69ba      	ldr	r2, [r7, #24]
 8002554:	4013      	ands	r3, r2
 8002556:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	689a      	ldr	r2, [r3, #8]
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	005b      	lsls	r3, r3, #1
 8002560:	fa02 f303 	lsl.w	r3, r2, r3
 8002564:	69ba      	ldr	r2, [r7, #24]
 8002566:	4313      	orrs	r3, r2
 8002568:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f003 0303 	and.w	r3, r3, #3
 8002578:	2b02      	cmp	r3, #2
 800257a:	d123      	bne.n	80025c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	08da      	lsrs	r2, r3, #3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	3208      	adds	r2, #8
 8002584:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002588:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	f003 0307 	and.w	r3, r3, #7
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	220f      	movs	r2, #15
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	43db      	mvns	r3, r3
 800259a:	69ba      	ldr	r2, [r7, #24]
 800259c:	4013      	ands	r3, r2
 800259e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	691a      	ldr	r2, [r3, #16]
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	f003 0307 	and.w	r3, r3, #7
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	fa02 f303 	lsl.w	r3, r2, r3
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	08da      	lsrs	r2, r3, #3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	3208      	adds	r2, #8
 80025be:	69b9      	ldr	r1, [r7, #24]
 80025c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	005b      	lsls	r3, r3, #1
 80025ce:	2203      	movs	r2, #3
 80025d0:	fa02 f303 	lsl.w	r3, r2, r3
 80025d4:	43db      	mvns	r3, r3
 80025d6:	69ba      	ldr	r2, [r7, #24]
 80025d8:	4013      	ands	r3, r2
 80025da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f003 0203 	and.w	r2, r3, #3
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002600:	2b00      	cmp	r3, #0
 8002602:	f000 80a2 	beq.w	800274a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002606:	2300      	movs	r3, #0
 8002608:	60fb      	str	r3, [r7, #12]
 800260a:	4b57      	ldr	r3, [pc, #348]	@ (8002768 <HAL_GPIO_Init+0x2e8>)
 800260c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800260e:	4a56      	ldr	r2, [pc, #344]	@ (8002768 <HAL_GPIO_Init+0x2e8>)
 8002610:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002614:	6453      	str	r3, [r2, #68]	@ 0x44
 8002616:	4b54      	ldr	r3, [pc, #336]	@ (8002768 <HAL_GPIO_Init+0x2e8>)
 8002618:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800261a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800261e:	60fb      	str	r3, [r7, #12]
 8002620:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002622:	4a52      	ldr	r2, [pc, #328]	@ (800276c <HAL_GPIO_Init+0x2ec>)
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	089b      	lsrs	r3, r3, #2
 8002628:	3302      	adds	r3, #2
 800262a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800262e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	f003 0303 	and.w	r3, r3, #3
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	220f      	movs	r2, #15
 800263a:	fa02 f303 	lsl.w	r3, r2, r3
 800263e:	43db      	mvns	r3, r3
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	4013      	ands	r3, r2
 8002644:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a49      	ldr	r2, [pc, #292]	@ (8002770 <HAL_GPIO_Init+0x2f0>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d019      	beq.n	8002682 <HAL_GPIO_Init+0x202>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a48      	ldr	r2, [pc, #288]	@ (8002774 <HAL_GPIO_Init+0x2f4>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d013      	beq.n	800267e <HAL_GPIO_Init+0x1fe>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a47      	ldr	r2, [pc, #284]	@ (8002778 <HAL_GPIO_Init+0x2f8>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d00d      	beq.n	800267a <HAL_GPIO_Init+0x1fa>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a46      	ldr	r2, [pc, #280]	@ (800277c <HAL_GPIO_Init+0x2fc>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d007      	beq.n	8002676 <HAL_GPIO_Init+0x1f6>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a45      	ldr	r2, [pc, #276]	@ (8002780 <HAL_GPIO_Init+0x300>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d101      	bne.n	8002672 <HAL_GPIO_Init+0x1f2>
 800266e:	2304      	movs	r3, #4
 8002670:	e008      	b.n	8002684 <HAL_GPIO_Init+0x204>
 8002672:	2307      	movs	r3, #7
 8002674:	e006      	b.n	8002684 <HAL_GPIO_Init+0x204>
 8002676:	2303      	movs	r3, #3
 8002678:	e004      	b.n	8002684 <HAL_GPIO_Init+0x204>
 800267a:	2302      	movs	r3, #2
 800267c:	e002      	b.n	8002684 <HAL_GPIO_Init+0x204>
 800267e:	2301      	movs	r3, #1
 8002680:	e000      	b.n	8002684 <HAL_GPIO_Init+0x204>
 8002682:	2300      	movs	r3, #0
 8002684:	69fa      	ldr	r2, [r7, #28]
 8002686:	f002 0203 	and.w	r2, r2, #3
 800268a:	0092      	lsls	r2, r2, #2
 800268c:	4093      	lsls	r3, r2
 800268e:	69ba      	ldr	r2, [r7, #24]
 8002690:	4313      	orrs	r3, r2
 8002692:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002694:	4935      	ldr	r1, [pc, #212]	@ (800276c <HAL_GPIO_Init+0x2ec>)
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	089b      	lsrs	r3, r3, #2
 800269a:	3302      	adds	r3, #2
 800269c:	69ba      	ldr	r2, [r7, #24]
 800269e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026a2:	4b38      	ldr	r3, [pc, #224]	@ (8002784 <HAL_GPIO_Init+0x304>)
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	43db      	mvns	r3, r3
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	4013      	ands	r3, r2
 80026b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d003      	beq.n	80026c6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80026be:	69ba      	ldr	r2, [r7, #24]
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026c6:	4a2f      	ldr	r2, [pc, #188]	@ (8002784 <HAL_GPIO_Init+0x304>)
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026cc:	4b2d      	ldr	r3, [pc, #180]	@ (8002784 <HAL_GPIO_Init+0x304>)
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	43db      	mvns	r3, r3
 80026d6:	69ba      	ldr	r2, [r7, #24]
 80026d8:	4013      	ands	r3, r2
 80026da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d003      	beq.n	80026f0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026f0:	4a24      	ldr	r2, [pc, #144]	@ (8002784 <HAL_GPIO_Init+0x304>)
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026f6:	4b23      	ldr	r3, [pc, #140]	@ (8002784 <HAL_GPIO_Init+0x304>)
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	43db      	mvns	r3, r3
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	4013      	ands	r3, r2
 8002704:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d003      	beq.n	800271a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002712:	69ba      	ldr	r2, [r7, #24]
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	4313      	orrs	r3, r2
 8002718:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800271a:	4a1a      	ldr	r2, [pc, #104]	@ (8002784 <HAL_GPIO_Init+0x304>)
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002720:	4b18      	ldr	r3, [pc, #96]	@ (8002784 <HAL_GPIO_Init+0x304>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	43db      	mvns	r3, r3
 800272a:	69ba      	ldr	r2, [r7, #24]
 800272c:	4013      	ands	r3, r2
 800272e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d003      	beq.n	8002744 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800273c:	69ba      	ldr	r2, [r7, #24]
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	4313      	orrs	r3, r2
 8002742:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002744:	4a0f      	ldr	r2, [pc, #60]	@ (8002784 <HAL_GPIO_Init+0x304>)
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	3301      	adds	r3, #1
 800274e:	61fb      	str	r3, [r7, #28]
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	2b0f      	cmp	r3, #15
 8002754:	f67f aea2 	bls.w	800249c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002758:	bf00      	nop
 800275a:	bf00      	nop
 800275c:	3724      	adds	r7, #36	@ 0x24
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop
 8002768:	40023800 	.word	0x40023800
 800276c:	40013800 	.word	0x40013800
 8002770:	40020000 	.word	0x40020000
 8002774:	40020400 	.word	0x40020400
 8002778:	40020800 	.word	0x40020800
 800277c:	40020c00 	.word	0x40020c00
 8002780:	40021000 	.word	0x40021000
 8002784:	40013c00 	.word	0x40013c00

08002788 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	460b      	mov	r3, r1
 8002792:	807b      	strh	r3, [r7, #2]
 8002794:	4613      	mov	r3, r2
 8002796:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002798:	787b      	ldrb	r3, [r7, #1]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d003      	beq.n	80027a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800279e:	887a      	ldrh	r2, [r7, #2]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027a4:	e003      	b.n	80027ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027a6:	887b      	ldrh	r3, [r7, #2]
 80027a8:	041a      	lsls	r2, r3, #16
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	619a      	str	r2, [r3, #24]
}
 80027ae:	bf00      	nop
 80027b0:	370c      	adds	r7, #12
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr
	...

080027bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b086      	sub	sp, #24
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d101      	bne.n	80027ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e267      	b.n	8002c9e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0301 	and.w	r3, r3, #1
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d075      	beq.n	80028c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80027da:	4b88      	ldr	r3, [pc, #544]	@ (80029fc <HAL_RCC_OscConfig+0x240>)
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	f003 030c 	and.w	r3, r3, #12
 80027e2:	2b04      	cmp	r3, #4
 80027e4:	d00c      	beq.n	8002800 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027e6:	4b85      	ldr	r3, [pc, #532]	@ (80029fc <HAL_RCC_OscConfig+0x240>)
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80027ee:	2b08      	cmp	r3, #8
 80027f0:	d112      	bne.n	8002818 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027f2:	4b82      	ldr	r3, [pc, #520]	@ (80029fc <HAL_RCC_OscConfig+0x240>)
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80027fe:	d10b      	bne.n	8002818 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002800:	4b7e      	ldr	r3, [pc, #504]	@ (80029fc <HAL_RCC_OscConfig+0x240>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d05b      	beq.n	80028c4 <HAL_RCC_OscConfig+0x108>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d157      	bne.n	80028c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e242      	b.n	8002c9e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002820:	d106      	bne.n	8002830 <HAL_RCC_OscConfig+0x74>
 8002822:	4b76      	ldr	r3, [pc, #472]	@ (80029fc <HAL_RCC_OscConfig+0x240>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a75      	ldr	r2, [pc, #468]	@ (80029fc <HAL_RCC_OscConfig+0x240>)
 8002828:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800282c:	6013      	str	r3, [r2, #0]
 800282e:	e01d      	b.n	800286c <HAL_RCC_OscConfig+0xb0>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002838:	d10c      	bne.n	8002854 <HAL_RCC_OscConfig+0x98>
 800283a:	4b70      	ldr	r3, [pc, #448]	@ (80029fc <HAL_RCC_OscConfig+0x240>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a6f      	ldr	r2, [pc, #444]	@ (80029fc <HAL_RCC_OscConfig+0x240>)
 8002840:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002844:	6013      	str	r3, [r2, #0]
 8002846:	4b6d      	ldr	r3, [pc, #436]	@ (80029fc <HAL_RCC_OscConfig+0x240>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a6c      	ldr	r2, [pc, #432]	@ (80029fc <HAL_RCC_OscConfig+0x240>)
 800284c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002850:	6013      	str	r3, [r2, #0]
 8002852:	e00b      	b.n	800286c <HAL_RCC_OscConfig+0xb0>
 8002854:	4b69      	ldr	r3, [pc, #420]	@ (80029fc <HAL_RCC_OscConfig+0x240>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a68      	ldr	r2, [pc, #416]	@ (80029fc <HAL_RCC_OscConfig+0x240>)
 800285a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800285e:	6013      	str	r3, [r2, #0]
 8002860:	4b66      	ldr	r3, [pc, #408]	@ (80029fc <HAL_RCC_OscConfig+0x240>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a65      	ldr	r2, [pc, #404]	@ (80029fc <HAL_RCC_OscConfig+0x240>)
 8002866:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800286a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d013      	beq.n	800289c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002874:	f7ff f952 	bl	8001b1c <HAL_GetTick>
 8002878:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800287a:	e008      	b.n	800288e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800287c:	f7ff f94e 	bl	8001b1c <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	2b64      	cmp	r3, #100	@ 0x64
 8002888:	d901      	bls.n	800288e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e207      	b.n	8002c9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800288e:	4b5b      	ldr	r3, [pc, #364]	@ (80029fc <HAL_RCC_OscConfig+0x240>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d0f0      	beq.n	800287c <HAL_RCC_OscConfig+0xc0>
 800289a:	e014      	b.n	80028c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800289c:	f7ff f93e 	bl	8001b1c <HAL_GetTick>
 80028a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028a2:	e008      	b.n	80028b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028a4:	f7ff f93a 	bl	8001b1c <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	2b64      	cmp	r3, #100	@ 0x64
 80028b0:	d901      	bls.n	80028b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e1f3      	b.n	8002c9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028b6:	4b51      	ldr	r3, [pc, #324]	@ (80029fc <HAL_RCC_OscConfig+0x240>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d1f0      	bne.n	80028a4 <HAL_RCC_OscConfig+0xe8>
 80028c2:	e000      	b.n	80028c6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d063      	beq.n	800299a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80028d2:	4b4a      	ldr	r3, [pc, #296]	@ (80029fc <HAL_RCC_OscConfig+0x240>)
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	f003 030c 	and.w	r3, r3, #12
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d00b      	beq.n	80028f6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028de:	4b47      	ldr	r3, [pc, #284]	@ (80029fc <HAL_RCC_OscConfig+0x240>)
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80028e6:	2b08      	cmp	r3, #8
 80028e8:	d11c      	bne.n	8002924 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028ea:	4b44      	ldr	r3, [pc, #272]	@ (80029fc <HAL_RCC_OscConfig+0x240>)
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d116      	bne.n	8002924 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028f6:	4b41      	ldr	r3, [pc, #260]	@ (80029fc <HAL_RCC_OscConfig+0x240>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0302 	and.w	r3, r3, #2
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d005      	beq.n	800290e <HAL_RCC_OscConfig+0x152>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	68db      	ldr	r3, [r3, #12]
 8002906:	2b01      	cmp	r3, #1
 8002908:	d001      	beq.n	800290e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e1c7      	b.n	8002c9e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800290e:	4b3b      	ldr	r3, [pc, #236]	@ (80029fc <HAL_RCC_OscConfig+0x240>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	00db      	lsls	r3, r3, #3
 800291c:	4937      	ldr	r1, [pc, #220]	@ (80029fc <HAL_RCC_OscConfig+0x240>)
 800291e:	4313      	orrs	r3, r2
 8002920:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002922:	e03a      	b.n	800299a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d020      	beq.n	800296e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800292c:	4b34      	ldr	r3, [pc, #208]	@ (8002a00 <HAL_RCC_OscConfig+0x244>)
 800292e:	2201      	movs	r2, #1
 8002930:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002932:	f7ff f8f3 	bl	8001b1c <HAL_GetTick>
 8002936:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002938:	e008      	b.n	800294c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800293a:	f7ff f8ef 	bl	8001b1c <HAL_GetTick>
 800293e:	4602      	mov	r2, r0
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	2b02      	cmp	r3, #2
 8002946:	d901      	bls.n	800294c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	e1a8      	b.n	8002c9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800294c:	4b2b      	ldr	r3, [pc, #172]	@ (80029fc <HAL_RCC_OscConfig+0x240>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0302 	and.w	r3, r3, #2
 8002954:	2b00      	cmp	r3, #0
 8002956:	d0f0      	beq.n	800293a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002958:	4b28      	ldr	r3, [pc, #160]	@ (80029fc <HAL_RCC_OscConfig+0x240>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	691b      	ldr	r3, [r3, #16]
 8002964:	00db      	lsls	r3, r3, #3
 8002966:	4925      	ldr	r1, [pc, #148]	@ (80029fc <HAL_RCC_OscConfig+0x240>)
 8002968:	4313      	orrs	r3, r2
 800296a:	600b      	str	r3, [r1, #0]
 800296c:	e015      	b.n	800299a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800296e:	4b24      	ldr	r3, [pc, #144]	@ (8002a00 <HAL_RCC_OscConfig+0x244>)
 8002970:	2200      	movs	r2, #0
 8002972:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002974:	f7ff f8d2 	bl	8001b1c <HAL_GetTick>
 8002978:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800297a:	e008      	b.n	800298e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800297c:	f7ff f8ce 	bl	8001b1c <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	2b02      	cmp	r3, #2
 8002988:	d901      	bls.n	800298e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e187      	b.n	8002c9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800298e:	4b1b      	ldr	r3, [pc, #108]	@ (80029fc <HAL_RCC_OscConfig+0x240>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0302 	and.w	r3, r3, #2
 8002996:	2b00      	cmp	r3, #0
 8002998:	d1f0      	bne.n	800297c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0308 	and.w	r3, r3, #8
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d036      	beq.n	8002a14 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	695b      	ldr	r3, [r3, #20]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d016      	beq.n	80029dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029ae:	4b15      	ldr	r3, [pc, #84]	@ (8002a04 <HAL_RCC_OscConfig+0x248>)
 80029b0:	2201      	movs	r2, #1
 80029b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029b4:	f7ff f8b2 	bl	8001b1c <HAL_GetTick>
 80029b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029ba:	e008      	b.n	80029ce <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029bc:	f7ff f8ae 	bl	8001b1c <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d901      	bls.n	80029ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e167      	b.n	8002c9e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029ce:	4b0b      	ldr	r3, [pc, #44]	@ (80029fc <HAL_RCC_OscConfig+0x240>)
 80029d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029d2:	f003 0302 	and.w	r3, r3, #2
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d0f0      	beq.n	80029bc <HAL_RCC_OscConfig+0x200>
 80029da:	e01b      	b.n	8002a14 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029dc:	4b09      	ldr	r3, [pc, #36]	@ (8002a04 <HAL_RCC_OscConfig+0x248>)
 80029de:	2200      	movs	r2, #0
 80029e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029e2:	f7ff f89b 	bl	8001b1c <HAL_GetTick>
 80029e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029e8:	e00e      	b.n	8002a08 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029ea:	f7ff f897 	bl	8001b1c <HAL_GetTick>
 80029ee:	4602      	mov	r2, r0
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d907      	bls.n	8002a08 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	e150      	b.n	8002c9e <HAL_RCC_OscConfig+0x4e2>
 80029fc:	40023800 	.word	0x40023800
 8002a00:	42470000 	.word	0x42470000
 8002a04:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a08:	4b88      	ldr	r3, [pc, #544]	@ (8002c2c <HAL_RCC_OscConfig+0x470>)
 8002a0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a0c:	f003 0302 	and.w	r3, r3, #2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d1ea      	bne.n	80029ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0304 	and.w	r3, r3, #4
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	f000 8097 	beq.w	8002b50 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a22:	2300      	movs	r3, #0
 8002a24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a26:	4b81      	ldr	r3, [pc, #516]	@ (8002c2c <HAL_RCC_OscConfig+0x470>)
 8002a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d10f      	bne.n	8002a52 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a32:	2300      	movs	r3, #0
 8002a34:	60bb      	str	r3, [r7, #8]
 8002a36:	4b7d      	ldr	r3, [pc, #500]	@ (8002c2c <HAL_RCC_OscConfig+0x470>)
 8002a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a3a:	4a7c      	ldr	r2, [pc, #496]	@ (8002c2c <HAL_RCC_OscConfig+0x470>)
 8002a3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a40:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a42:	4b7a      	ldr	r3, [pc, #488]	@ (8002c2c <HAL_RCC_OscConfig+0x470>)
 8002a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a4a:	60bb      	str	r3, [r7, #8]
 8002a4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a52:	4b77      	ldr	r3, [pc, #476]	@ (8002c30 <HAL_RCC_OscConfig+0x474>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d118      	bne.n	8002a90 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a5e:	4b74      	ldr	r3, [pc, #464]	@ (8002c30 <HAL_RCC_OscConfig+0x474>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a73      	ldr	r2, [pc, #460]	@ (8002c30 <HAL_RCC_OscConfig+0x474>)
 8002a64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a6a:	f7ff f857 	bl	8001b1c <HAL_GetTick>
 8002a6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a70:	e008      	b.n	8002a84 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a72:	f7ff f853 	bl	8001b1c <HAL_GetTick>
 8002a76:	4602      	mov	r2, r0
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d901      	bls.n	8002a84 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002a80:	2303      	movs	r3, #3
 8002a82:	e10c      	b.n	8002c9e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a84:	4b6a      	ldr	r3, [pc, #424]	@ (8002c30 <HAL_RCC_OscConfig+0x474>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d0f0      	beq.n	8002a72 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d106      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x2ea>
 8002a98:	4b64      	ldr	r3, [pc, #400]	@ (8002c2c <HAL_RCC_OscConfig+0x470>)
 8002a9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a9c:	4a63      	ldr	r2, [pc, #396]	@ (8002c2c <HAL_RCC_OscConfig+0x470>)
 8002a9e:	f043 0301 	orr.w	r3, r3, #1
 8002aa2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002aa4:	e01c      	b.n	8002ae0 <HAL_RCC_OscConfig+0x324>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	2b05      	cmp	r3, #5
 8002aac:	d10c      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x30c>
 8002aae:	4b5f      	ldr	r3, [pc, #380]	@ (8002c2c <HAL_RCC_OscConfig+0x470>)
 8002ab0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ab2:	4a5e      	ldr	r2, [pc, #376]	@ (8002c2c <HAL_RCC_OscConfig+0x470>)
 8002ab4:	f043 0304 	orr.w	r3, r3, #4
 8002ab8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002aba:	4b5c      	ldr	r3, [pc, #368]	@ (8002c2c <HAL_RCC_OscConfig+0x470>)
 8002abc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002abe:	4a5b      	ldr	r2, [pc, #364]	@ (8002c2c <HAL_RCC_OscConfig+0x470>)
 8002ac0:	f043 0301 	orr.w	r3, r3, #1
 8002ac4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ac6:	e00b      	b.n	8002ae0 <HAL_RCC_OscConfig+0x324>
 8002ac8:	4b58      	ldr	r3, [pc, #352]	@ (8002c2c <HAL_RCC_OscConfig+0x470>)
 8002aca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002acc:	4a57      	ldr	r2, [pc, #348]	@ (8002c2c <HAL_RCC_OscConfig+0x470>)
 8002ace:	f023 0301 	bic.w	r3, r3, #1
 8002ad2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ad4:	4b55      	ldr	r3, [pc, #340]	@ (8002c2c <HAL_RCC_OscConfig+0x470>)
 8002ad6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ad8:	4a54      	ldr	r2, [pc, #336]	@ (8002c2c <HAL_RCC_OscConfig+0x470>)
 8002ada:	f023 0304 	bic.w	r3, r3, #4
 8002ade:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d015      	beq.n	8002b14 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ae8:	f7ff f818 	bl	8001b1c <HAL_GetTick>
 8002aec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aee:	e00a      	b.n	8002b06 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002af0:	f7ff f814 	bl	8001b1c <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d901      	bls.n	8002b06 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e0cb      	b.n	8002c9e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b06:	4b49      	ldr	r3, [pc, #292]	@ (8002c2c <HAL_RCC_OscConfig+0x470>)
 8002b08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b0a:	f003 0302 	and.w	r3, r3, #2
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d0ee      	beq.n	8002af0 <HAL_RCC_OscConfig+0x334>
 8002b12:	e014      	b.n	8002b3e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b14:	f7ff f802 	bl	8001b1c <HAL_GetTick>
 8002b18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b1a:	e00a      	b.n	8002b32 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b1c:	f7fe fffe 	bl	8001b1c <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e0b5      	b.n	8002c9e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b32:	4b3e      	ldr	r3, [pc, #248]	@ (8002c2c <HAL_RCC_OscConfig+0x470>)
 8002b34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b36:	f003 0302 	and.w	r3, r3, #2
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d1ee      	bne.n	8002b1c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b3e:	7dfb      	ldrb	r3, [r7, #23]
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d105      	bne.n	8002b50 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b44:	4b39      	ldr	r3, [pc, #228]	@ (8002c2c <HAL_RCC_OscConfig+0x470>)
 8002b46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b48:	4a38      	ldr	r2, [pc, #224]	@ (8002c2c <HAL_RCC_OscConfig+0x470>)
 8002b4a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b4e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	699b      	ldr	r3, [r3, #24]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	f000 80a1 	beq.w	8002c9c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b5a:	4b34      	ldr	r3, [pc, #208]	@ (8002c2c <HAL_RCC_OscConfig+0x470>)
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f003 030c 	and.w	r3, r3, #12
 8002b62:	2b08      	cmp	r3, #8
 8002b64:	d05c      	beq.n	8002c20 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	699b      	ldr	r3, [r3, #24]
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d141      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b6e:	4b31      	ldr	r3, [pc, #196]	@ (8002c34 <HAL_RCC_OscConfig+0x478>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b74:	f7fe ffd2 	bl	8001b1c <HAL_GetTick>
 8002b78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b7a:	e008      	b.n	8002b8e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b7c:	f7fe ffce 	bl	8001b1c <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d901      	bls.n	8002b8e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e087      	b.n	8002c9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b8e:	4b27      	ldr	r3, [pc, #156]	@ (8002c2c <HAL_RCC_OscConfig+0x470>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d1f0      	bne.n	8002b7c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	69da      	ldr	r2, [r3, #28]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6a1b      	ldr	r3, [r3, #32]
 8002ba2:	431a      	orrs	r2, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba8:	019b      	lsls	r3, r3, #6
 8002baa:	431a      	orrs	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bb0:	085b      	lsrs	r3, r3, #1
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	041b      	lsls	r3, r3, #16
 8002bb6:	431a      	orrs	r2, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bbc:	061b      	lsls	r3, r3, #24
 8002bbe:	491b      	ldr	r1, [pc, #108]	@ (8002c2c <HAL_RCC_OscConfig+0x470>)
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bc4:	4b1b      	ldr	r3, [pc, #108]	@ (8002c34 <HAL_RCC_OscConfig+0x478>)
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bca:	f7fe ffa7 	bl	8001b1c <HAL_GetTick>
 8002bce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bd0:	e008      	b.n	8002be4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bd2:	f7fe ffa3 	bl	8001b1c <HAL_GetTick>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d901      	bls.n	8002be4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002be0:	2303      	movs	r3, #3
 8002be2:	e05c      	b.n	8002c9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002be4:	4b11      	ldr	r3, [pc, #68]	@ (8002c2c <HAL_RCC_OscConfig+0x470>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d0f0      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x416>
 8002bf0:	e054      	b.n	8002c9c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bf2:	4b10      	ldr	r3, [pc, #64]	@ (8002c34 <HAL_RCC_OscConfig+0x478>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf8:	f7fe ff90 	bl	8001b1c <HAL_GetTick>
 8002bfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bfe:	e008      	b.n	8002c12 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c00:	f7fe ff8c 	bl	8001b1c <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d901      	bls.n	8002c12 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e045      	b.n	8002c9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c12:	4b06      	ldr	r3, [pc, #24]	@ (8002c2c <HAL_RCC_OscConfig+0x470>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d1f0      	bne.n	8002c00 <HAL_RCC_OscConfig+0x444>
 8002c1e:	e03d      	b.n	8002c9c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	699b      	ldr	r3, [r3, #24]
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d107      	bne.n	8002c38 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e038      	b.n	8002c9e <HAL_RCC_OscConfig+0x4e2>
 8002c2c:	40023800 	.word	0x40023800
 8002c30:	40007000 	.word	0x40007000
 8002c34:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c38:	4b1b      	ldr	r3, [pc, #108]	@ (8002ca8 <HAL_RCC_OscConfig+0x4ec>)
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	699b      	ldr	r3, [r3, #24]
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d028      	beq.n	8002c98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d121      	bne.n	8002c98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d11a      	bne.n	8002c98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c62:	68fa      	ldr	r2, [r7, #12]
 8002c64:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002c68:	4013      	ands	r3, r2
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002c6e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d111      	bne.n	8002c98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c7e:	085b      	lsrs	r3, r3, #1
 8002c80:	3b01      	subs	r3, #1
 8002c82:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d107      	bne.n	8002c98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c92:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d001      	beq.n	8002c9c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e000      	b.n	8002c9e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3718      	adds	r7, #24
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	40023800 	.word	0x40023800

08002cac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d101      	bne.n	8002cc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e0cc      	b.n	8002e5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002cc0:	4b68      	ldr	r3, [pc, #416]	@ (8002e64 <HAL_RCC_ClockConfig+0x1b8>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0307 	and.w	r3, r3, #7
 8002cc8:	683a      	ldr	r2, [r7, #0]
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d90c      	bls.n	8002ce8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cce:	4b65      	ldr	r3, [pc, #404]	@ (8002e64 <HAL_RCC_ClockConfig+0x1b8>)
 8002cd0:	683a      	ldr	r2, [r7, #0]
 8002cd2:	b2d2      	uxtb	r2, r2
 8002cd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cd6:	4b63      	ldr	r3, [pc, #396]	@ (8002e64 <HAL_RCC_ClockConfig+0x1b8>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0307 	and.w	r3, r3, #7
 8002cde:	683a      	ldr	r2, [r7, #0]
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d001      	beq.n	8002ce8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e0b8      	b.n	8002e5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0302 	and.w	r3, r3, #2
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d020      	beq.n	8002d36 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0304 	and.w	r3, r3, #4
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d005      	beq.n	8002d0c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d00:	4b59      	ldr	r3, [pc, #356]	@ (8002e68 <HAL_RCC_ClockConfig+0x1bc>)
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	4a58      	ldr	r2, [pc, #352]	@ (8002e68 <HAL_RCC_ClockConfig+0x1bc>)
 8002d06:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002d0a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0308 	and.w	r3, r3, #8
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d005      	beq.n	8002d24 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d18:	4b53      	ldr	r3, [pc, #332]	@ (8002e68 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	4a52      	ldr	r2, [pc, #328]	@ (8002e68 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002d22:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d24:	4b50      	ldr	r3, [pc, #320]	@ (8002e68 <HAL_RCC_ClockConfig+0x1bc>)
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	494d      	ldr	r1, [pc, #308]	@ (8002e68 <HAL_RCC_ClockConfig+0x1bc>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0301 	and.w	r3, r3, #1
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d044      	beq.n	8002dcc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d107      	bne.n	8002d5a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d4a:	4b47      	ldr	r3, [pc, #284]	@ (8002e68 <HAL_RCC_ClockConfig+0x1bc>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d119      	bne.n	8002d8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e07f      	b.n	8002e5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d003      	beq.n	8002d6a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d66:	2b03      	cmp	r3, #3
 8002d68:	d107      	bne.n	8002d7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d6a:	4b3f      	ldr	r3, [pc, #252]	@ (8002e68 <HAL_RCC_ClockConfig+0x1bc>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d109      	bne.n	8002d8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e06f      	b.n	8002e5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d7a:	4b3b      	ldr	r3, [pc, #236]	@ (8002e68 <HAL_RCC_ClockConfig+0x1bc>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0302 	and.w	r3, r3, #2
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d101      	bne.n	8002d8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e067      	b.n	8002e5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d8a:	4b37      	ldr	r3, [pc, #220]	@ (8002e68 <HAL_RCC_ClockConfig+0x1bc>)
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	f023 0203 	bic.w	r2, r3, #3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	4934      	ldr	r1, [pc, #208]	@ (8002e68 <HAL_RCC_ClockConfig+0x1bc>)
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d9c:	f7fe febe 	bl	8001b1c <HAL_GetTick>
 8002da0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002da2:	e00a      	b.n	8002dba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002da4:	f7fe feba 	bl	8001b1c <HAL_GetTick>
 8002da8:	4602      	mov	r2, r0
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d901      	bls.n	8002dba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e04f      	b.n	8002e5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dba:	4b2b      	ldr	r3, [pc, #172]	@ (8002e68 <HAL_RCC_ClockConfig+0x1bc>)
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f003 020c 	and.w	r2, r3, #12
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d1eb      	bne.n	8002da4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002dcc:	4b25      	ldr	r3, [pc, #148]	@ (8002e64 <HAL_RCC_ClockConfig+0x1b8>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0307 	and.w	r3, r3, #7
 8002dd4:	683a      	ldr	r2, [r7, #0]
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d20c      	bcs.n	8002df4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dda:	4b22      	ldr	r3, [pc, #136]	@ (8002e64 <HAL_RCC_ClockConfig+0x1b8>)
 8002ddc:	683a      	ldr	r2, [r7, #0]
 8002dde:	b2d2      	uxtb	r2, r2
 8002de0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002de2:	4b20      	ldr	r3, [pc, #128]	@ (8002e64 <HAL_RCC_ClockConfig+0x1b8>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0307 	and.w	r3, r3, #7
 8002dea:	683a      	ldr	r2, [r7, #0]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d001      	beq.n	8002df4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e032      	b.n	8002e5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0304 	and.w	r3, r3, #4
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d008      	beq.n	8002e12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e00:	4b19      	ldr	r3, [pc, #100]	@ (8002e68 <HAL_RCC_ClockConfig+0x1bc>)
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	4916      	ldr	r1, [pc, #88]	@ (8002e68 <HAL_RCC_ClockConfig+0x1bc>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0308 	and.w	r3, r3, #8
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d009      	beq.n	8002e32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e1e:	4b12      	ldr	r3, [pc, #72]	@ (8002e68 <HAL_RCC_ClockConfig+0x1bc>)
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	00db      	lsls	r3, r3, #3
 8002e2c:	490e      	ldr	r1, [pc, #56]	@ (8002e68 <HAL_RCC_ClockConfig+0x1bc>)
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e32:	f000 f821 	bl	8002e78 <HAL_RCC_GetSysClockFreq>
 8002e36:	4602      	mov	r2, r0
 8002e38:	4b0b      	ldr	r3, [pc, #44]	@ (8002e68 <HAL_RCC_ClockConfig+0x1bc>)
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	091b      	lsrs	r3, r3, #4
 8002e3e:	f003 030f 	and.w	r3, r3, #15
 8002e42:	490a      	ldr	r1, [pc, #40]	@ (8002e6c <HAL_RCC_ClockConfig+0x1c0>)
 8002e44:	5ccb      	ldrb	r3, [r1, r3]
 8002e46:	fa22 f303 	lsr.w	r3, r2, r3
 8002e4a:	4a09      	ldr	r2, [pc, #36]	@ (8002e70 <HAL_RCC_ClockConfig+0x1c4>)
 8002e4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002e4e:	4b09      	ldr	r3, [pc, #36]	@ (8002e74 <HAL_RCC_ClockConfig+0x1c8>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7fe fe1e 	bl	8001a94 <HAL_InitTick>

  return HAL_OK;
 8002e58:	2300      	movs	r3, #0
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3710      	adds	r7, #16
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	40023c00 	.word	0x40023c00
 8002e68:	40023800 	.word	0x40023800
 8002e6c:	08005c00 	.word	0x08005c00
 8002e70:	20000004 	.word	0x20000004
 8002e74:	20000008 	.word	0x20000008

08002e78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e7c:	b090      	sub	sp, #64	@ 0x40
 8002e7e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002e80:	2300      	movs	r3, #0
 8002e82:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002e84:	2300      	movs	r3, #0
 8002e86:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e90:	4b59      	ldr	r3, [pc, #356]	@ (8002ff8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	f003 030c 	and.w	r3, r3, #12
 8002e98:	2b08      	cmp	r3, #8
 8002e9a:	d00d      	beq.n	8002eb8 <HAL_RCC_GetSysClockFreq+0x40>
 8002e9c:	2b08      	cmp	r3, #8
 8002e9e:	f200 80a1 	bhi.w	8002fe4 <HAL_RCC_GetSysClockFreq+0x16c>
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d002      	beq.n	8002eac <HAL_RCC_GetSysClockFreq+0x34>
 8002ea6:	2b04      	cmp	r3, #4
 8002ea8:	d003      	beq.n	8002eb2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002eaa:	e09b      	b.n	8002fe4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002eac:	4b53      	ldr	r3, [pc, #332]	@ (8002ffc <HAL_RCC_GetSysClockFreq+0x184>)
 8002eae:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002eb0:	e09b      	b.n	8002fea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002eb2:	4b53      	ldr	r3, [pc, #332]	@ (8003000 <HAL_RCC_GetSysClockFreq+0x188>)
 8002eb4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002eb6:	e098      	b.n	8002fea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002eb8:	4b4f      	ldr	r3, [pc, #316]	@ (8002ff8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ec0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ec2:	4b4d      	ldr	r3, [pc, #308]	@ (8002ff8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d028      	beq.n	8002f20 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ece:	4b4a      	ldr	r3, [pc, #296]	@ (8002ff8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	099b      	lsrs	r3, r3, #6
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	623b      	str	r3, [r7, #32]
 8002ed8:	627a      	str	r2, [r7, #36]	@ 0x24
 8002eda:	6a3b      	ldr	r3, [r7, #32]
 8002edc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002ee0:	2100      	movs	r1, #0
 8002ee2:	4b47      	ldr	r3, [pc, #284]	@ (8003000 <HAL_RCC_GetSysClockFreq+0x188>)
 8002ee4:	fb03 f201 	mul.w	r2, r3, r1
 8002ee8:	2300      	movs	r3, #0
 8002eea:	fb00 f303 	mul.w	r3, r0, r3
 8002eee:	4413      	add	r3, r2
 8002ef0:	4a43      	ldr	r2, [pc, #268]	@ (8003000 <HAL_RCC_GetSysClockFreq+0x188>)
 8002ef2:	fba0 1202 	umull	r1, r2, r0, r2
 8002ef6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002ef8:	460a      	mov	r2, r1
 8002efa:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002efc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002efe:	4413      	add	r3, r2
 8002f00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f04:	2200      	movs	r2, #0
 8002f06:	61bb      	str	r3, [r7, #24]
 8002f08:	61fa      	str	r2, [r7, #28]
 8002f0a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f0e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002f12:	f7fd f9b5 	bl	8000280 <__aeabi_uldivmod>
 8002f16:	4602      	mov	r2, r0
 8002f18:	460b      	mov	r3, r1
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002f1e:	e053      	b.n	8002fc8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f20:	4b35      	ldr	r3, [pc, #212]	@ (8002ff8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	099b      	lsrs	r3, r3, #6
 8002f26:	2200      	movs	r2, #0
 8002f28:	613b      	str	r3, [r7, #16]
 8002f2a:	617a      	str	r2, [r7, #20]
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002f32:	f04f 0b00 	mov.w	fp, #0
 8002f36:	4652      	mov	r2, sl
 8002f38:	465b      	mov	r3, fp
 8002f3a:	f04f 0000 	mov.w	r0, #0
 8002f3e:	f04f 0100 	mov.w	r1, #0
 8002f42:	0159      	lsls	r1, r3, #5
 8002f44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f48:	0150      	lsls	r0, r2, #5
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	ebb2 080a 	subs.w	r8, r2, sl
 8002f52:	eb63 090b 	sbc.w	r9, r3, fp
 8002f56:	f04f 0200 	mov.w	r2, #0
 8002f5a:	f04f 0300 	mov.w	r3, #0
 8002f5e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002f62:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002f66:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002f6a:	ebb2 0408 	subs.w	r4, r2, r8
 8002f6e:	eb63 0509 	sbc.w	r5, r3, r9
 8002f72:	f04f 0200 	mov.w	r2, #0
 8002f76:	f04f 0300 	mov.w	r3, #0
 8002f7a:	00eb      	lsls	r3, r5, #3
 8002f7c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f80:	00e2      	lsls	r2, r4, #3
 8002f82:	4614      	mov	r4, r2
 8002f84:	461d      	mov	r5, r3
 8002f86:	eb14 030a 	adds.w	r3, r4, sl
 8002f8a:	603b      	str	r3, [r7, #0]
 8002f8c:	eb45 030b 	adc.w	r3, r5, fp
 8002f90:	607b      	str	r3, [r7, #4]
 8002f92:	f04f 0200 	mov.w	r2, #0
 8002f96:	f04f 0300 	mov.w	r3, #0
 8002f9a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f9e:	4629      	mov	r1, r5
 8002fa0:	028b      	lsls	r3, r1, #10
 8002fa2:	4621      	mov	r1, r4
 8002fa4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002fa8:	4621      	mov	r1, r4
 8002faa:	028a      	lsls	r2, r1, #10
 8002fac:	4610      	mov	r0, r2
 8002fae:	4619      	mov	r1, r3
 8002fb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	60bb      	str	r3, [r7, #8]
 8002fb6:	60fa      	str	r2, [r7, #12]
 8002fb8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002fbc:	f7fd f960 	bl	8000280 <__aeabi_uldivmod>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	460b      	mov	r3, r1
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002fc8:	4b0b      	ldr	r3, [pc, #44]	@ (8002ff8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	0c1b      	lsrs	r3, r3, #16
 8002fce:	f003 0303 	and.w	r3, r3, #3
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	005b      	lsls	r3, r3, #1
 8002fd6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002fd8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fe0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002fe2:	e002      	b.n	8002fea <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002fe4:	4b05      	ldr	r3, [pc, #20]	@ (8002ffc <HAL_RCC_GetSysClockFreq+0x184>)
 8002fe6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002fe8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3740      	adds	r7, #64	@ 0x40
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ff6:	bf00      	nop
 8002ff8:	40023800 	.word	0x40023800
 8002ffc:	00f42400 	.word	0x00f42400
 8003000:	017d7840 	.word	0x017d7840

08003004 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d101      	bne.n	8003016 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e07b      	b.n	800310e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800301a:	2b00      	cmp	r3, #0
 800301c:	d108      	bne.n	8003030 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003026:	d009      	beq.n	800303c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	61da      	str	r2, [r3, #28]
 800302e:	e005      	b.n	800303c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003048:	b2db      	uxtb	r3, r3
 800304a:	2b00      	cmp	r3, #0
 800304c:	d106      	bne.n	800305c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f7fe fbd4 	bl	8001804 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2202      	movs	r2, #2
 8003060:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003072:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003084:	431a      	orrs	r2, r3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800308e:	431a      	orrs	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	691b      	ldr	r3, [r3, #16]
 8003094:	f003 0302 	and.w	r3, r3, #2
 8003098:	431a      	orrs	r2, r3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	695b      	ldr	r3, [r3, #20]
 800309e:	f003 0301 	and.w	r3, r3, #1
 80030a2:	431a      	orrs	r2, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	699b      	ldr	r3, [r3, #24]
 80030a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030ac:	431a      	orrs	r2, r3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	69db      	ldr	r3, [r3, #28]
 80030b2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80030b6:	431a      	orrs	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6a1b      	ldr	r3, [r3, #32]
 80030bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030c0:	ea42 0103 	orr.w	r1, r2, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030c8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	430a      	orrs	r2, r1
 80030d2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	699b      	ldr	r3, [r3, #24]
 80030d8:	0c1b      	lsrs	r3, r3, #16
 80030da:	f003 0104 	and.w	r1, r3, #4
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e2:	f003 0210 	and.w	r2, r3, #16
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	430a      	orrs	r2, r1
 80030ec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	69da      	ldr	r2, [r3, #28]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80030fc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800310c:	2300      	movs	r3, #0
}
 800310e:	4618      	mov	r0, r3
 8003110:	3708      	adds	r7, #8
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}

08003116 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003116:	b580      	push	{r7, lr}
 8003118:	b088      	sub	sp, #32
 800311a:	af00      	add	r7, sp, #0
 800311c:	60f8      	str	r0, [r7, #12]
 800311e:	60b9      	str	r1, [r7, #8]
 8003120:	603b      	str	r3, [r7, #0]
 8003122:	4613      	mov	r3, r2
 8003124:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003126:	f7fe fcf9 	bl	8001b1c <HAL_GetTick>
 800312a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800312c:	88fb      	ldrh	r3, [r7, #6]
 800312e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003136:	b2db      	uxtb	r3, r3
 8003138:	2b01      	cmp	r3, #1
 800313a:	d001      	beq.n	8003140 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800313c:	2302      	movs	r3, #2
 800313e:	e12a      	b.n	8003396 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d002      	beq.n	800314c <HAL_SPI_Transmit+0x36>
 8003146:	88fb      	ldrh	r3, [r7, #6]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d101      	bne.n	8003150 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e122      	b.n	8003396 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003156:	2b01      	cmp	r3, #1
 8003158:	d101      	bne.n	800315e <HAL_SPI_Transmit+0x48>
 800315a:	2302      	movs	r3, #2
 800315c:	e11b      	b.n	8003396 <HAL_SPI_Transmit+0x280>
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2201      	movs	r2, #1
 8003162:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2203      	movs	r2, #3
 800316a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2200      	movs	r2, #0
 8003172:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	68ba      	ldr	r2, [r7, #8]
 8003178:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	88fa      	ldrh	r2, [r7, #6]
 800317e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	88fa      	ldrh	r2, [r7, #6]
 8003184:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2200      	movs	r2, #0
 800318a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2200      	movs	r2, #0
 8003190:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2200      	movs	r2, #0
 8003196:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2200      	movs	r2, #0
 800319c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2200      	movs	r2, #0
 80031a2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80031ac:	d10f      	bne.n	80031ce <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80031bc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80031cc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031d8:	2b40      	cmp	r3, #64	@ 0x40
 80031da:	d007      	beq.n	80031ec <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80031ea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80031f4:	d152      	bne.n	800329c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d002      	beq.n	8003204 <HAL_SPI_Transmit+0xee>
 80031fe:	8b7b      	ldrh	r3, [r7, #26]
 8003200:	2b01      	cmp	r3, #1
 8003202:	d145      	bne.n	8003290 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003208:	881a      	ldrh	r2, [r3, #0]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003214:	1c9a      	adds	r2, r3, #2
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800321e:	b29b      	uxth	r3, r3
 8003220:	3b01      	subs	r3, #1
 8003222:	b29a      	uxth	r2, r3
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003228:	e032      	b.n	8003290 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	f003 0302 	and.w	r3, r3, #2
 8003234:	2b02      	cmp	r3, #2
 8003236:	d112      	bne.n	800325e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800323c:	881a      	ldrh	r2, [r3, #0]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003248:	1c9a      	adds	r2, r3, #2
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003252:	b29b      	uxth	r3, r3
 8003254:	3b01      	subs	r3, #1
 8003256:	b29a      	uxth	r2, r3
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800325c:	e018      	b.n	8003290 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800325e:	f7fe fc5d 	bl	8001b1c <HAL_GetTick>
 8003262:	4602      	mov	r2, r0
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	683a      	ldr	r2, [r7, #0]
 800326a:	429a      	cmp	r2, r3
 800326c:	d803      	bhi.n	8003276 <HAL_SPI_Transmit+0x160>
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003274:	d102      	bne.n	800327c <HAL_SPI_Transmit+0x166>
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d109      	bne.n	8003290 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2200      	movs	r2, #0
 8003288:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	e082      	b.n	8003396 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003294:	b29b      	uxth	r3, r3
 8003296:	2b00      	cmp	r3, #0
 8003298:	d1c7      	bne.n	800322a <HAL_SPI_Transmit+0x114>
 800329a:	e053      	b.n	8003344 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d002      	beq.n	80032aa <HAL_SPI_Transmit+0x194>
 80032a4:	8b7b      	ldrh	r3, [r7, #26]
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d147      	bne.n	800333a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	330c      	adds	r3, #12
 80032b4:	7812      	ldrb	r2, [r2, #0]
 80032b6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032bc:	1c5a      	adds	r2, r3, #1
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	3b01      	subs	r3, #1
 80032ca:	b29a      	uxth	r2, r3
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80032d0:	e033      	b.n	800333a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	f003 0302 	and.w	r3, r3, #2
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d113      	bne.n	8003308 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	330c      	adds	r3, #12
 80032ea:	7812      	ldrb	r2, [r2, #0]
 80032ec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032f2:	1c5a      	adds	r2, r3, #1
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	3b01      	subs	r3, #1
 8003300:	b29a      	uxth	r2, r3
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003306:	e018      	b.n	800333a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003308:	f7fe fc08 	bl	8001b1c <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	683a      	ldr	r2, [r7, #0]
 8003314:	429a      	cmp	r2, r3
 8003316:	d803      	bhi.n	8003320 <HAL_SPI_Transmit+0x20a>
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800331e:	d102      	bne.n	8003326 <HAL_SPI_Transmit+0x210>
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d109      	bne.n	800333a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2201      	movs	r2, #1
 800332a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003336:	2303      	movs	r3, #3
 8003338:	e02d      	b.n	8003396 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800333e:	b29b      	uxth	r3, r3
 8003340:	2b00      	cmp	r3, #0
 8003342:	d1c6      	bne.n	80032d2 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003344:	69fa      	ldr	r2, [r7, #28]
 8003346:	6839      	ldr	r1, [r7, #0]
 8003348:	68f8      	ldr	r0, [r7, #12]
 800334a:	f000 f9f9 	bl	8003740 <SPI_EndRxTxTransaction>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d002      	beq.n	800335a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2220      	movs	r2, #32
 8003358:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d10a      	bne.n	8003378 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003362:	2300      	movs	r3, #0
 8003364:	617b      	str	r3, [r7, #20]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	617b      	str	r3, [r7, #20]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	617b      	str	r3, [r7, #20]
 8003376:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2200      	movs	r2, #0
 8003384:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800338c:	2b00      	cmp	r3, #0
 800338e:	d001      	beq.n	8003394 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e000      	b.n	8003396 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003394:	2300      	movs	r3, #0
  }
}
 8003396:	4618      	mov	r0, r3
 8003398:	3720      	adds	r7, #32
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
	...

080033a0 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	60f8      	str	r0, [r7, #12]
 80033a8:	60b9      	str	r1, [r7, #8]
 80033aa:	4613      	mov	r3, r2
 80033ac:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d001      	beq.n	80033be <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 80033ba:	2302      	movs	r3, #2
 80033bc:	e097      	b.n	80034ee <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d002      	beq.n	80033ca <HAL_SPI_Transmit_DMA+0x2a>
 80033c4:	88fb      	ldrh	r3, [r7, #6]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d101      	bne.n	80033ce <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e08f      	b.n	80034ee <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d101      	bne.n	80033dc <HAL_SPI_Transmit_DMA+0x3c>
 80033d8:	2302      	movs	r3, #2
 80033da:	e088      	b.n	80034ee <HAL_SPI_Transmit_DMA+0x14e>
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2203      	movs	r2, #3
 80033e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2200      	movs	r2, #0
 80033f0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	68ba      	ldr	r2, [r7, #8]
 80033f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	88fa      	ldrh	r2, [r7, #6]
 80033fc:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	88fa      	ldrh	r2, [r7, #6]
 8003402:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2200      	movs	r2, #0
 8003408:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2200      	movs	r2, #0
 800340e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2200      	movs	r2, #0
 8003414:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2200      	movs	r2, #0
 800341a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2200      	movs	r2, #0
 8003420:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800342a:	d10f      	bne.n	800344c <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800343a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800344a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003450:	4a29      	ldr	r2, [pc, #164]	@ (80034f8 <HAL_SPI_Transmit_DMA+0x158>)
 8003452:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003458:	4a28      	ldr	r2, [pc, #160]	@ (80034fc <HAL_SPI_Transmit_DMA+0x15c>)
 800345a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003460:	4a27      	ldr	r2, [pc, #156]	@ (8003500 <HAL_SPI_Transmit_DMA+0x160>)
 8003462:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003468:	2200      	movs	r2, #0
 800346a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003474:	4619      	mov	r1, r3
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	330c      	adds	r3, #12
 800347c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003482:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003484:	f7fe fd3a 	bl	8001efc <HAL_DMA_Start_IT>
 8003488:	4603      	mov	r3, r0
 800348a:	2b00      	cmp	r3, #0
 800348c:	d00b      	beq.n	80034a6 <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003492:	f043 0210 	orr.w	r2, r3, #16
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2200      	movs	r2, #0
 800349e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e023      	b.n	80034ee <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034b0:	2b40      	cmp	r3, #64	@ 0x40
 80034b2:	d007      	beq.n	80034c4 <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80034c2:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2200      	movs	r2, #0
 80034c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	685a      	ldr	r2, [r3, #4]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f042 0220 	orr.w	r2, r2, #32
 80034da:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	685a      	ldr	r2, [r3, #4]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f042 0202 	orr.w	r2, r2, #2
 80034ea:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80034ec:	2300      	movs	r3, #0
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3710      	adds	r7, #16
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	080035d5 	.word	0x080035d5
 80034fc:	0800352d 	.word	0x0800352d
 8003500:	080035f1 	.word	0x080035f1

08003504 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800350c:	bf00      	nop
 800350e:	370c      	adds	r7, #12
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr

08003518 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003518:	b480      	push	{r7}
 800351a:	b083      	sub	sp, #12
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003520:	bf00      	nop
 8003522:	370c      	adds	r7, #12
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr

0800352c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b086      	sub	sp, #24
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003538:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800353a:	f7fe faef 	bl	8001b1c <HAL_GetTick>
 800353e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800354a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800354e:	d03b      	beq.n	80035c8 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	685a      	ldr	r2, [r3, #4]
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f022 0220 	bic.w	r2, r2, #32
 800355e:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	685a      	ldr	r2, [r3, #4]
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f022 0202 	bic.w	r2, r2, #2
 800356e:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003570:	693a      	ldr	r2, [r7, #16]
 8003572:	2164      	movs	r1, #100	@ 0x64
 8003574:	6978      	ldr	r0, [r7, #20]
 8003576:	f000 f8e3 	bl	8003740 <SPI_EndRxTxTransaction>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d005      	beq.n	800358c <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003584:	f043 0220 	orr.w	r2, r3, #32
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d10a      	bne.n	80035aa <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003594:	2300      	movs	r3, #0
 8003596:	60fb      	str	r3, [r7, #12]
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	60fb      	str	r3, [r7, #12]
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	60fb      	str	r3, [r7, #12]
 80035a8:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	2200      	movs	r2, #0
 80035ae:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d003      	beq.n	80035c8 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80035c0:	6978      	ldr	r0, [r7, #20]
 80035c2:	f7ff ffa9 	bl	8003518 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80035c6:	e002      	b.n	80035ce <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80035c8:	6978      	ldr	r0, [r7, #20]
 80035ca:	f7fd fa53 	bl	8000a74 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80035ce:	3718      	adds	r7, #24
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035e0:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80035e2:	68f8      	ldr	r0, [r7, #12]
 80035e4:	f7ff ff8e 	bl	8003504 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80035e8:	bf00      	nop
 80035ea:	3710      	adds	r7, #16
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035fc:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	685a      	ldr	r2, [r3, #4]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f022 0203 	bic.w	r2, r2, #3
 800360c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003612:	f043 0210 	orr.w	r2, r3, #16
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2201      	movs	r2, #1
 800361e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003622:	68f8      	ldr	r0, [r7, #12]
 8003624:	f7ff ff78 	bl	8003518 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003628:	bf00      	nop
 800362a:	3710      	adds	r7, #16
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}

08003630 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b088      	sub	sp, #32
 8003634:	af00      	add	r7, sp, #0
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	603b      	str	r3, [r7, #0]
 800363c:	4613      	mov	r3, r2
 800363e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003640:	f7fe fa6c 	bl	8001b1c <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003648:	1a9b      	subs	r3, r3, r2
 800364a:	683a      	ldr	r2, [r7, #0]
 800364c:	4413      	add	r3, r2
 800364e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003650:	f7fe fa64 	bl	8001b1c <HAL_GetTick>
 8003654:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003656:	4b39      	ldr	r3, [pc, #228]	@ (800373c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	015b      	lsls	r3, r3, #5
 800365c:	0d1b      	lsrs	r3, r3, #20
 800365e:	69fa      	ldr	r2, [r7, #28]
 8003660:	fb02 f303 	mul.w	r3, r2, r3
 8003664:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003666:	e054      	b.n	8003712 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800366e:	d050      	beq.n	8003712 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003670:	f7fe fa54 	bl	8001b1c <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	69fa      	ldr	r2, [r7, #28]
 800367c:	429a      	cmp	r2, r3
 800367e:	d902      	bls.n	8003686 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d13d      	bne.n	8003702 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	685a      	ldr	r2, [r3, #4]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003694:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800369e:	d111      	bne.n	80036c4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80036a8:	d004      	beq.n	80036b4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036b2:	d107      	bne.n	80036c4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80036c2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036cc:	d10f      	bne.n	80036ee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80036dc:	601a      	str	r2, [r3, #0]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80036ec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2201      	movs	r2, #1
 80036f2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2200      	movs	r2, #0
 80036fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e017      	b.n	8003732 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d101      	bne.n	800370c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003708:	2300      	movs	r3, #0
 800370a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	3b01      	subs	r3, #1
 8003710:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	689a      	ldr	r2, [r3, #8]
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	4013      	ands	r3, r2
 800371c:	68ba      	ldr	r2, [r7, #8]
 800371e:	429a      	cmp	r2, r3
 8003720:	bf0c      	ite	eq
 8003722:	2301      	moveq	r3, #1
 8003724:	2300      	movne	r3, #0
 8003726:	b2db      	uxtb	r3, r3
 8003728:	461a      	mov	r2, r3
 800372a:	79fb      	ldrb	r3, [r7, #7]
 800372c:	429a      	cmp	r2, r3
 800372e:	d19b      	bne.n	8003668 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003730:	2300      	movs	r3, #0
}
 8003732:	4618      	mov	r0, r3
 8003734:	3720      	adds	r7, #32
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	20000004 	.word	0x20000004

08003740 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b088      	sub	sp, #32
 8003744:	af02      	add	r7, sp, #8
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	60b9      	str	r1, [r7, #8]
 800374a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	9300      	str	r3, [sp, #0]
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	2201      	movs	r2, #1
 8003754:	2102      	movs	r1, #2
 8003756:	68f8      	ldr	r0, [r7, #12]
 8003758:	f7ff ff6a 	bl	8003630 <SPI_WaitFlagStateUntilTimeout>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d007      	beq.n	8003772 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003766:	f043 0220 	orr.w	r2, r3, #32
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	e032      	b.n	80037d8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003772:	4b1b      	ldr	r3, [pc, #108]	@ (80037e0 <SPI_EndRxTxTransaction+0xa0>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a1b      	ldr	r2, [pc, #108]	@ (80037e4 <SPI_EndRxTxTransaction+0xa4>)
 8003778:	fba2 2303 	umull	r2, r3, r2, r3
 800377c:	0d5b      	lsrs	r3, r3, #21
 800377e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003782:	fb02 f303 	mul.w	r3, r2, r3
 8003786:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003790:	d112      	bne.n	80037b8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	9300      	str	r3, [sp, #0]
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	2200      	movs	r2, #0
 800379a:	2180      	movs	r1, #128	@ 0x80
 800379c:	68f8      	ldr	r0, [r7, #12]
 800379e:	f7ff ff47 	bl	8003630 <SPI_WaitFlagStateUntilTimeout>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d016      	beq.n	80037d6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037ac:	f043 0220 	orr.w	r2, r3, #32
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80037b4:	2303      	movs	r3, #3
 80037b6:	e00f      	b.n	80037d8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d00a      	beq.n	80037d4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	3b01      	subs	r3, #1
 80037c2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037ce:	2b80      	cmp	r3, #128	@ 0x80
 80037d0:	d0f2      	beq.n	80037b8 <SPI_EndRxTxTransaction+0x78>
 80037d2:	e000      	b.n	80037d6 <SPI_EndRxTxTransaction+0x96>
        break;
 80037d4:	bf00      	nop
  }

  return HAL_OK;
 80037d6:	2300      	movs	r3, #0
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3718      	adds	r7, #24
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	20000004 	.word	0x20000004
 80037e4:	165e9f81 	.word	0x165e9f81

080037e8 <siprintf>:
 80037e8:	b40e      	push	{r1, r2, r3}
 80037ea:	b500      	push	{lr}
 80037ec:	b09c      	sub	sp, #112	@ 0x70
 80037ee:	ab1d      	add	r3, sp, #116	@ 0x74
 80037f0:	9002      	str	r0, [sp, #8]
 80037f2:	9006      	str	r0, [sp, #24]
 80037f4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80037f8:	4809      	ldr	r0, [pc, #36]	@ (8003820 <siprintf+0x38>)
 80037fa:	9107      	str	r1, [sp, #28]
 80037fc:	9104      	str	r1, [sp, #16]
 80037fe:	4909      	ldr	r1, [pc, #36]	@ (8003824 <siprintf+0x3c>)
 8003800:	f853 2b04 	ldr.w	r2, [r3], #4
 8003804:	9105      	str	r1, [sp, #20]
 8003806:	6800      	ldr	r0, [r0, #0]
 8003808:	9301      	str	r3, [sp, #4]
 800380a:	a902      	add	r1, sp, #8
 800380c:	f000 f994 	bl	8003b38 <_svfiprintf_r>
 8003810:	9b02      	ldr	r3, [sp, #8]
 8003812:	2200      	movs	r2, #0
 8003814:	701a      	strb	r2, [r3, #0]
 8003816:	b01c      	add	sp, #112	@ 0x70
 8003818:	f85d eb04 	ldr.w	lr, [sp], #4
 800381c:	b003      	add	sp, #12
 800381e:	4770      	bx	lr
 8003820:	20000010 	.word	0x20000010
 8003824:	ffff0208 	.word	0xffff0208

08003828 <memset>:
 8003828:	4402      	add	r2, r0
 800382a:	4603      	mov	r3, r0
 800382c:	4293      	cmp	r3, r2
 800382e:	d100      	bne.n	8003832 <memset+0xa>
 8003830:	4770      	bx	lr
 8003832:	f803 1b01 	strb.w	r1, [r3], #1
 8003836:	e7f9      	b.n	800382c <memset+0x4>

08003838 <__errno>:
 8003838:	4b01      	ldr	r3, [pc, #4]	@ (8003840 <__errno+0x8>)
 800383a:	6818      	ldr	r0, [r3, #0]
 800383c:	4770      	bx	lr
 800383e:	bf00      	nop
 8003840:	20000010 	.word	0x20000010

08003844 <__libc_init_array>:
 8003844:	b570      	push	{r4, r5, r6, lr}
 8003846:	4d0d      	ldr	r5, [pc, #52]	@ (800387c <__libc_init_array+0x38>)
 8003848:	4c0d      	ldr	r4, [pc, #52]	@ (8003880 <__libc_init_array+0x3c>)
 800384a:	1b64      	subs	r4, r4, r5
 800384c:	10a4      	asrs	r4, r4, #2
 800384e:	2600      	movs	r6, #0
 8003850:	42a6      	cmp	r6, r4
 8003852:	d109      	bne.n	8003868 <__libc_init_array+0x24>
 8003854:	4d0b      	ldr	r5, [pc, #44]	@ (8003884 <__libc_init_array+0x40>)
 8003856:	4c0c      	ldr	r4, [pc, #48]	@ (8003888 <__libc_init_array+0x44>)
 8003858:	f000 fc66 	bl	8004128 <_init>
 800385c:	1b64      	subs	r4, r4, r5
 800385e:	10a4      	asrs	r4, r4, #2
 8003860:	2600      	movs	r6, #0
 8003862:	42a6      	cmp	r6, r4
 8003864:	d105      	bne.n	8003872 <__libc_init_array+0x2e>
 8003866:	bd70      	pop	{r4, r5, r6, pc}
 8003868:	f855 3b04 	ldr.w	r3, [r5], #4
 800386c:	4798      	blx	r3
 800386e:	3601      	adds	r6, #1
 8003870:	e7ee      	b.n	8003850 <__libc_init_array+0xc>
 8003872:	f855 3b04 	ldr.w	r3, [r5], #4
 8003876:	4798      	blx	r3
 8003878:	3601      	adds	r6, #1
 800387a:	e7f2      	b.n	8003862 <__libc_init_array+0x1e>
 800387c:	08005c54 	.word	0x08005c54
 8003880:	08005c54 	.word	0x08005c54
 8003884:	08005c54 	.word	0x08005c54
 8003888:	08005c58 	.word	0x08005c58

0800388c <__retarget_lock_acquire_recursive>:
 800388c:	4770      	bx	lr

0800388e <__retarget_lock_release_recursive>:
 800388e:	4770      	bx	lr

08003890 <_free_r>:
 8003890:	b538      	push	{r3, r4, r5, lr}
 8003892:	4605      	mov	r5, r0
 8003894:	2900      	cmp	r1, #0
 8003896:	d041      	beq.n	800391c <_free_r+0x8c>
 8003898:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800389c:	1f0c      	subs	r4, r1, #4
 800389e:	2b00      	cmp	r3, #0
 80038a0:	bfb8      	it	lt
 80038a2:	18e4      	addlt	r4, r4, r3
 80038a4:	f000 f8e0 	bl	8003a68 <__malloc_lock>
 80038a8:	4a1d      	ldr	r2, [pc, #116]	@ (8003920 <_free_r+0x90>)
 80038aa:	6813      	ldr	r3, [r2, #0]
 80038ac:	b933      	cbnz	r3, 80038bc <_free_r+0x2c>
 80038ae:	6063      	str	r3, [r4, #4]
 80038b0:	6014      	str	r4, [r2, #0]
 80038b2:	4628      	mov	r0, r5
 80038b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80038b8:	f000 b8dc 	b.w	8003a74 <__malloc_unlock>
 80038bc:	42a3      	cmp	r3, r4
 80038be:	d908      	bls.n	80038d2 <_free_r+0x42>
 80038c0:	6820      	ldr	r0, [r4, #0]
 80038c2:	1821      	adds	r1, r4, r0
 80038c4:	428b      	cmp	r3, r1
 80038c6:	bf01      	itttt	eq
 80038c8:	6819      	ldreq	r1, [r3, #0]
 80038ca:	685b      	ldreq	r3, [r3, #4]
 80038cc:	1809      	addeq	r1, r1, r0
 80038ce:	6021      	streq	r1, [r4, #0]
 80038d0:	e7ed      	b.n	80038ae <_free_r+0x1e>
 80038d2:	461a      	mov	r2, r3
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	b10b      	cbz	r3, 80038dc <_free_r+0x4c>
 80038d8:	42a3      	cmp	r3, r4
 80038da:	d9fa      	bls.n	80038d2 <_free_r+0x42>
 80038dc:	6811      	ldr	r1, [r2, #0]
 80038de:	1850      	adds	r0, r2, r1
 80038e0:	42a0      	cmp	r0, r4
 80038e2:	d10b      	bne.n	80038fc <_free_r+0x6c>
 80038e4:	6820      	ldr	r0, [r4, #0]
 80038e6:	4401      	add	r1, r0
 80038e8:	1850      	adds	r0, r2, r1
 80038ea:	4283      	cmp	r3, r0
 80038ec:	6011      	str	r1, [r2, #0]
 80038ee:	d1e0      	bne.n	80038b2 <_free_r+0x22>
 80038f0:	6818      	ldr	r0, [r3, #0]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	6053      	str	r3, [r2, #4]
 80038f6:	4408      	add	r0, r1
 80038f8:	6010      	str	r0, [r2, #0]
 80038fa:	e7da      	b.n	80038b2 <_free_r+0x22>
 80038fc:	d902      	bls.n	8003904 <_free_r+0x74>
 80038fe:	230c      	movs	r3, #12
 8003900:	602b      	str	r3, [r5, #0]
 8003902:	e7d6      	b.n	80038b2 <_free_r+0x22>
 8003904:	6820      	ldr	r0, [r4, #0]
 8003906:	1821      	adds	r1, r4, r0
 8003908:	428b      	cmp	r3, r1
 800390a:	bf04      	itt	eq
 800390c:	6819      	ldreq	r1, [r3, #0]
 800390e:	685b      	ldreq	r3, [r3, #4]
 8003910:	6063      	str	r3, [r4, #4]
 8003912:	bf04      	itt	eq
 8003914:	1809      	addeq	r1, r1, r0
 8003916:	6021      	streq	r1, [r4, #0]
 8003918:	6054      	str	r4, [r2, #4]
 800391a:	e7ca      	b.n	80038b2 <_free_r+0x22>
 800391c:	bd38      	pop	{r3, r4, r5, pc}
 800391e:	bf00      	nop
 8003920:	200002a0 	.word	0x200002a0

08003924 <sbrk_aligned>:
 8003924:	b570      	push	{r4, r5, r6, lr}
 8003926:	4e0f      	ldr	r6, [pc, #60]	@ (8003964 <sbrk_aligned+0x40>)
 8003928:	460c      	mov	r4, r1
 800392a:	6831      	ldr	r1, [r6, #0]
 800392c:	4605      	mov	r5, r0
 800392e:	b911      	cbnz	r1, 8003936 <sbrk_aligned+0x12>
 8003930:	f000 fba6 	bl	8004080 <_sbrk_r>
 8003934:	6030      	str	r0, [r6, #0]
 8003936:	4621      	mov	r1, r4
 8003938:	4628      	mov	r0, r5
 800393a:	f000 fba1 	bl	8004080 <_sbrk_r>
 800393e:	1c43      	adds	r3, r0, #1
 8003940:	d103      	bne.n	800394a <sbrk_aligned+0x26>
 8003942:	f04f 34ff 	mov.w	r4, #4294967295
 8003946:	4620      	mov	r0, r4
 8003948:	bd70      	pop	{r4, r5, r6, pc}
 800394a:	1cc4      	adds	r4, r0, #3
 800394c:	f024 0403 	bic.w	r4, r4, #3
 8003950:	42a0      	cmp	r0, r4
 8003952:	d0f8      	beq.n	8003946 <sbrk_aligned+0x22>
 8003954:	1a21      	subs	r1, r4, r0
 8003956:	4628      	mov	r0, r5
 8003958:	f000 fb92 	bl	8004080 <_sbrk_r>
 800395c:	3001      	adds	r0, #1
 800395e:	d1f2      	bne.n	8003946 <sbrk_aligned+0x22>
 8003960:	e7ef      	b.n	8003942 <sbrk_aligned+0x1e>
 8003962:	bf00      	nop
 8003964:	2000029c 	.word	0x2000029c

08003968 <_malloc_r>:
 8003968:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800396c:	1ccd      	adds	r5, r1, #3
 800396e:	f025 0503 	bic.w	r5, r5, #3
 8003972:	3508      	adds	r5, #8
 8003974:	2d0c      	cmp	r5, #12
 8003976:	bf38      	it	cc
 8003978:	250c      	movcc	r5, #12
 800397a:	2d00      	cmp	r5, #0
 800397c:	4606      	mov	r6, r0
 800397e:	db01      	blt.n	8003984 <_malloc_r+0x1c>
 8003980:	42a9      	cmp	r1, r5
 8003982:	d904      	bls.n	800398e <_malloc_r+0x26>
 8003984:	230c      	movs	r3, #12
 8003986:	6033      	str	r3, [r6, #0]
 8003988:	2000      	movs	r0, #0
 800398a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800398e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003a64 <_malloc_r+0xfc>
 8003992:	f000 f869 	bl	8003a68 <__malloc_lock>
 8003996:	f8d8 3000 	ldr.w	r3, [r8]
 800399a:	461c      	mov	r4, r3
 800399c:	bb44      	cbnz	r4, 80039f0 <_malloc_r+0x88>
 800399e:	4629      	mov	r1, r5
 80039a0:	4630      	mov	r0, r6
 80039a2:	f7ff ffbf 	bl	8003924 <sbrk_aligned>
 80039a6:	1c43      	adds	r3, r0, #1
 80039a8:	4604      	mov	r4, r0
 80039aa:	d158      	bne.n	8003a5e <_malloc_r+0xf6>
 80039ac:	f8d8 4000 	ldr.w	r4, [r8]
 80039b0:	4627      	mov	r7, r4
 80039b2:	2f00      	cmp	r7, #0
 80039b4:	d143      	bne.n	8003a3e <_malloc_r+0xd6>
 80039b6:	2c00      	cmp	r4, #0
 80039b8:	d04b      	beq.n	8003a52 <_malloc_r+0xea>
 80039ba:	6823      	ldr	r3, [r4, #0]
 80039bc:	4639      	mov	r1, r7
 80039be:	4630      	mov	r0, r6
 80039c0:	eb04 0903 	add.w	r9, r4, r3
 80039c4:	f000 fb5c 	bl	8004080 <_sbrk_r>
 80039c8:	4581      	cmp	r9, r0
 80039ca:	d142      	bne.n	8003a52 <_malloc_r+0xea>
 80039cc:	6821      	ldr	r1, [r4, #0]
 80039ce:	1a6d      	subs	r5, r5, r1
 80039d0:	4629      	mov	r1, r5
 80039d2:	4630      	mov	r0, r6
 80039d4:	f7ff ffa6 	bl	8003924 <sbrk_aligned>
 80039d8:	3001      	adds	r0, #1
 80039da:	d03a      	beq.n	8003a52 <_malloc_r+0xea>
 80039dc:	6823      	ldr	r3, [r4, #0]
 80039de:	442b      	add	r3, r5
 80039e0:	6023      	str	r3, [r4, #0]
 80039e2:	f8d8 3000 	ldr.w	r3, [r8]
 80039e6:	685a      	ldr	r2, [r3, #4]
 80039e8:	bb62      	cbnz	r2, 8003a44 <_malloc_r+0xdc>
 80039ea:	f8c8 7000 	str.w	r7, [r8]
 80039ee:	e00f      	b.n	8003a10 <_malloc_r+0xa8>
 80039f0:	6822      	ldr	r2, [r4, #0]
 80039f2:	1b52      	subs	r2, r2, r5
 80039f4:	d420      	bmi.n	8003a38 <_malloc_r+0xd0>
 80039f6:	2a0b      	cmp	r2, #11
 80039f8:	d917      	bls.n	8003a2a <_malloc_r+0xc2>
 80039fa:	1961      	adds	r1, r4, r5
 80039fc:	42a3      	cmp	r3, r4
 80039fe:	6025      	str	r5, [r4, #0]
 8003a00:	bf18      	it	ne
 8003a02:	6059      	strne	r1, [r3, #4]
 8003a04:	6863      	ldr	r3, [r4, #4]
 8003a06:	bf08      	it	eq
 8003a08:	f8c8 1000 	streq.w	r1, [r8]
 8003a0c:	5162      	str	r2, [r4, r5]
 8003a0e:	604b      	str	r3, [r1, #4]
 8003a10:	4630      	mov	r0, r6
 8003a12:	f000 f82f 	bl	8003a74 <__malloc_unlock>
 8003a16:	f104 000b 	add.w	r0, r4, #11
 8003a1a:	1d23      	adds	r3, r4, #4
 8003a1c:	f020 0007 	bic.w	r0, r0, #7
 8003a20:	1ac2      	subs	r2, r0, r3
 8003a22:	bf1c      	itt	ne
 8003a24:	1a1b      	subne	r3, r3, r0
 8003a26:	50a3      	strne	r3, [r4, r2]
 8003a28:	e7af      	b.n	800398a <_malloc_r+0x22>
 8003a2a:	6862      	ldr	r2, [r4, #4]
 8003a2c:	42a3      	cmp	r3, r4
 8003a2e:	bf0c      	ite	eq
 8003a30:	f8c8 2000 	streq.w	r2, [r8]
 8003a34:	605a      	strne	r2, [r3, #4]
 8003a36:	e7eb      	b.n	8003a10 <_malloc_r+0xa8>
 8003a38:	4623      	mov	r3, r4
 8003a3a:	6864      	ldr	r4, [r4, #4]
 8003a3c:	e7ae      	b.n	800399c <_malloc_r+0x34>
 8003a3e:	463c      	mov	r4, r7
 8003a40:	687f      	ldr	r7, [r7, #4]
 8003a42:	e7b6      	b.n	80039b2 <_malloc_r+0x4a>
 8003a44:	461a      	mov	r2, r3
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	42a3      	cmp	r3, r4
 8003a4a:	d1fb      	bne.n	8003a44 <_malloc_r+0xdc>
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	6053      	str	r3, [r2, #4]
 8003a50:	e7de      	b.n	8003a10 <_malloc_r+0xa8>
 8003a52:	230c      	movs	r3, #12
 8003a54:	6033      	str	r3, [r6, #0]
 8003a56:	4630      	mov	r0, r6
 8003a58:	f000 f80c 	bl	8003a74 <__malloc_unlock>
 8003a5c:	e794      	b.n	8003988 <_malloc_r+0x20>
 8003a5e:	6005      	str	r5, [r0, #0]
 8003a60:	e7d6      	b.n	8003a10 <_malloc_r+0xa8>
 8003a62:	bf00      	nop
 8003a64:	200002a0 	.word	0x200002a0

08003a68 <__malloc_lock>:
 8003a68:	4801      	ldr	r0, [pc, #4]	@ (8003a70 <__malloc_lock+0x8>)
 8003a6a:	f7ff bf0f 	b.w	800388c <__retarget_lock_acquire_recursive>
 8003a6e:	bf00      	nop
 8003a70:	20000298 	.word	0x20000298

08003a74 <__malloc_unlock>:
 8003a74:	4801      	ldr	r0, [pc, #4]	@ (8003a7c <__malloc_unlock+0x8>)
 8003a76:	f7ff bf0a 	b.w	800388e <__retarget_lock_release_recursive>
 8003a7a:	bf00      	nop
 8003a7c:	20000298 	.word	0x20000298

08003a80 <__ssputs_r>:
 8003a80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a84:	688e      	ldr	r6, [r1, #8]
 8003a86:	461f      	mov	r7, r3
 8003a88:	42be      	cmp	r6, r7
 8003a8a:	680b      	ldr	r3, [r1, #0]
 8003a8c:	4682      	mov	sl, r0
 8003a8e:	460c      	mov	r4, r1
 8003a90:	4690      	mov	r8, r2
 8003a92:	d82d      	bhi.n	8003af0 <__ssputs_r+0x70>
 8003a94:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003a98:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003a9c:	d026      	beq.n	8003aec <__ssputs_r+0x6c>
 8003a9e:	6965      	ldr	r5, [r4, #20]
 8003aa0:	6909      	ldr	r1, [r1, #16]
 8003aa2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003aa6:	eba3 0901 	sub.w	r9, r3, r1
 8003aaa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003aae:	1c7b      	adds	r3, r7, #1
 8003ab0:	444b      	add	r3, r9
 8003ab2:	106d      	asrs	r5, r5, #1
 8003ab4:	429d      	cmp	r5, r3
 8003ab6:	bf38      	it	cc
 8003ab8:	461d      	movcc	r5, r3
 8003aba:	0553      	lsls	r3, r2, #21
 8003abc:	d527      	bpl.n	8003b0e <__ssputs_r+0x8e>
 8003abe:	4629      	mov	r1, r5
 8003ac0:	f7ff ff52 	bl	8003968 <_malloc_r>
 8003ac4:	4606      	mov	r6, r0
 8003ac6:	b360      	cbz	r0, 8003b22 <__ssputs_r+0xa2>
 8003ac8:	6921      	ldr	r1, [r4, #16]
 8003aca:	464a      	mov	r2, r9
 8003acc:	f000 fae8 	bl	80040a0 <memcpy>
 8003ad0:	89a3      	ldrh	r3, [r4, #12]
 8003ad2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003ad6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ada:	81a3      	strh	r3, [r4, #12]
 8003adc:	6126      	str	r6, [r4, #16]
 8003ade:	6165      	str	r5, [r4, #20]
 8003ae0:	444e      	add	r6, r9
 8003ae2:	eba5 0509 	sub.w	r5, r5, r9
 8003ae6:	6026      	str	r6, [r4, #0]
 8003ae8:	60a5      	str	r5, [r4, #8]
 8003aea:	463e      	mov	r6, r7
 8003aec:	42be      	cmp	r6, r7
 8003aee:	d900      	bls.n	8003af2 <__ssputs_r+0x72>
 8003af0:	463e      	mov	r6, r7
 8003af2:	6820      	ldr	r0, [r4, #0]
 8003af4:	4632      	mov	r2, r6
 8003af6:	4641      	mov	r1, r8
 8003af8:	f000 faa8 	bl	800404c <memmove>
 8003afc:	68a3      	ldr	r3, [r4, #8]
 8003afe:	1b9b      	subs	r3, r3, r6
 8003b00:	60a3      	str	r3, [r4, #8]
 8003b02:	6823      	ldr	r3, [r4, #0]
 8003b04:	4433      	add	r3, r6
 8003b06:	6023      	str	r3, [r4, #0]
 8003b08:	2000      	movs	r0, #0
 8003b0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b0e:	462a      	mov	r2, r5
 8003b10:	f000 fad4 	bl	80040bc <_realloc_r>
 8003b14:	4606      	mov	r6, r0
 8003b16:	2800      	cmp	r0, #0
 8003b18:	d1e0      	bne.n	8003adc <__ssputs_r+0x5c>
 8003b1a:	6921      	ldr	r1, [r4, #16]
 8003b1c:	4650      	mov	r0, sl
 8003b1e:	f7ff feb7 	bl	8003890 <_free_r>
 8003b22:	230c      	movs	r3, #12
 8003b24:	f8ca 3000 	str.w	r3, [sl]
 8003b28:	89a3      	ldrh	r3, [r4, #12]
 8003b2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b2e:	81a3      	strh	r3, [r4, #12]
 8003b30:	f04f 30ff 	mov.w	r0, #4294967295
 8003b34:	e7e9      	b.n	8003b0a <__ssputs_r+0x8a>
	...

08003b38 <_svfiprintf_r>:
 8003b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b3c:	4698      	mov	r8, r3
 8003b3e:	898b      	ldrh	r3, [r1, #12]
 8003b40:	061b      	lsls	r3, r3, #24
 8003b42:	b09d      	sub	sp, #116	@ 0x74
 8003b44:	4607      	mov	r7, r0
 8003b46:	460d      	mov	r5, r1
 8003b48:	4614      	mov	r4, r2
 8003b4a:	d510      	bpl.n	8003b6e <_svfiprintf_r+0x36>
 8003b4c:	690b      	ldr	r3, [r1, #16]
 8003b4e:	b973      	cbnz	r3, 8003b6e <_svfiprintf_r+0x36>
 8003b50:	2140      	movs	r1, #64	@ 0x40
 8003b52:	f7ff ff09 	bl	8003968 <_malloc_r>
 8003b56:	6028      	str	r0, [r5, #0]
 8003b58:	6128      	str	r0, [r5, #16]
 8003b5a:	b930      	cbnz	r0, 8003b6a <_svfiprintf_r+0x32>
 8003b5c:	230c      	movs	r3, #12
 8003b5e:	603b      	str	r3, [r7, #0]
 8003b60:	f04f 30ff 	mov.w	r0, #4294967295
 8003b64:	b01d      	add	sp, #116	@ 0x74
 8003b66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b6a:	2340      	movs	r3, #64	@ 0x40
 8003b6c:	616b      	str	r3, [r5, #20]
 8003b6e:	2300      	movs	r3, #0
 8003b70:	9309      	str	r3, [sp, #36]	@ 0x24
 8003b72:	2320      	movs	r3, #32
 8003b74:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003b78:	f8cd 800c 	str.w	r8, [sp, #12]
 8003b7c:	2330      	movs	r3, #48	@ 0x30
 8003b7e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003d1c <_svfiprintf_r+0x1e4>
 8003b82:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003b86:	f04f 0901 	mov.w	r9, #1
 8003b8a:	4623      	mov	r3, r4
 8003b8c:	469a      	mov	sl, r3
 8003b8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003b92:	b10a      	cbz	r2, 8003b98 <_svfiprintf_r+0x60>
 8003b94:	2a25      	cmp	r2, #37	@ 0x25
 8003b96:	d1f9      	bne.n	8003b8c <_svfiprintf_r+0x54>
 8003b98:	ebba 0b04 	subs.w	fp, sl, r4
 8003b9c:	d00b      	beq.n	8003bb6 <_svfiprintf_r+0x7e>
 8003b9e:	465b      	mov	r3, fp
 8003ba0:	4622      	mov	r2, r4
 8003ba2:	4629      	mov	r1, r5
 8003ba4:	4638      	mov	r0, r7
 8003ba6:	f7ff ff6b 	bl	8003a80 <__ssputs_r>
 8003baa:	3001      	adds	r0, #1
 8003bac:	f000 80a7 	beq.w	8003cfe <_svfiprintf_r+0x1c6>
 8003bb0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003bb2:	445a      	add	r2, fp
 8003bb4:	9209      	str	r2, [sp, #36]	@ 0x24
 8003bb6:	f89a 3000 	ldrb.w	r3, [sl]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	f000 809f 	beq.w	8003cfe <_svfiprintf_r+0x1c6>
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	f04f 32ff 	mov.w	r2, #4294967295
 8003bc6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003bca:	f10a 0a01 	add.w	sl, sl, #1
 8003bce:	9304      	str	r3, [sp, #16]
 8003bd0:	9307      	str	r3, [sp, #28]
 8003bd2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003bd6:	931a      	str	r3, [sp, #104]	@ 0x68
 8003bd8:	4654      	mov	r4, sl
 8003bda:	2205      	movs	r2, #5
 8003bdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003be0:	484e      	ldr	r0, [pc, #312]	@ (8003d1c <_svfiprintf_r+0x1e4>)
 8003be2:	f7fc fafd 	bl	80001e0 <memchr>
 8003be6:	9a04      	ldr	r2, [sp, #16]
 8003be8:	b9d8      	cbnz	r0, 8003c22 <_svfiprintf_r+0xea>
 8003bea:	06d0      	lsls	r0, r2, #27
 8003bec:	bf44      	itt	mi
 8003bee:	2320      	movmi	r3, #32
 8003bf0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003bf4:	0711      	lsls	r1, r2, #28
 8003bf6:	bf44      	itt	mi
 8003bf8:	232b      	movmi	r3, #43	@ 0x2b
 8003bfa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003bfe:	f89a 3000 	ldrb.w	r3, [sl]
 8003c02:	2b2a      	cmp	r3, #42	@ 0x2a
 8003c04:	d015      	beq.n	8003c32 <_svfiprintf_r+0xfa>
 8003c06:	9a07      	ldr	r2, [sp, #28]
 8003c08:	4654      	mov	r4, sl
 8003c0a:	2000      	movs	r0, #0
 8003c0c:	f04f 0c0a 	mov.w	ip, #10
 8003c10:	4621      	mov	r1, r4
 8003c12:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003c16:	3b30      	subs	r3, #48	@ 0x30
 8003c18:	2b09      	cmp	r3, #9
 8003c1a:	d94b      	bls.n	8003cb4 <_svfiprintf_r+0x17c>
 8003c1c:	b1b0      	cbz	r0, 8003c4c <_svfiprintf_r+0x114>
 8003c1e:	9207      	str	r2, [sp, #28]
 8003c20:	e014      	b.n	8003c4c <_svfiprintf_r+0x114>
 8003c22:	eba0 0308 	sub.w	r3, r0, r8
 8003c26:	fa09 f303 	lsl.w	r3, r9, r3
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	9304      	str	r3, [sp, #16]
 8003c2e:	46a2      	mov	sl, r4
 8003c30:	e7d2      	b.n	8003bd8 <_svfiprintf_r+0xa0>
 8003c32:	9b03      	ldr	r3, [sp, #12]
 8003c34:	1d19      	adds	r1, r3, #4
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	9103      	str	r1, [sp, #12]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	bfbb      	ittet	lt
 8003c3e:	425b      	neglt	r3, r3
 8003c40:	f042 0202 	orrlt.w	r2, r2, #2
 8003c44:	9307      	strge	r3, [sp, #28]
 8003c46:	9307      	strlt	r3, [sp, #28]
 8003c48:	bfb8      	it	lt
 8003c4a:	9204      	strlt	r2, [sp, #16]
 8003c4c:	7823      	ldrb	r3, [r4, #0]
 8003c4e:	2b2e      	cmp	r3, #46	@ 0x2e
 8003c50:	d10a      	bne.n	8003c68 <_svfiprintf_r+0x130>
 8003c52:	7863      	ldrb	r3, [r4, #1]
 8003c54:	2b2a      	cmp	r3, #42	@ 0x2a
 8003c56:	d132      	bne.n	8003cbe <_svfiprintf_r+0x186>
 8003c58:	9b03      	ldr	r3, [sp, #12]
 8003c5a:	1d1a      	adds	r2, r3, #4
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	9203      	str	r2, [sp, #12]
 8003c60:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003c64:	3402      	adds	r4, #2
 8003c66:	9305      	str	r3, [sp, #20]
 8003c68:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003d2c <_svfiprintf_r+0x1f4>
 8003c6c:	7821      	ldrb	r1, [r4, #0]
 8003c6e:	2203      	movs	r2, #3
 8003c70:	4650      	mov	r0, sl
 8003c72:	f7fc fab5 	bl	80001e0 <memchr>
 8003c76:	b138      	cbz	r0, 8003c88 <_svfiprintf_r+0x150>
 8003c78:	9b04      	ldr	r3, [sp, #16]
 8003c7a:	eba0 000a 	sub.w	r0, r0, sl
 8003c7e:	2240      	movs	r2, #64	@ 0x40
 8003c80:	4082      	lsls	r2, r0
 8003c82:	4313      	orrs	r3, r2
 8003c84:	3401      	adds	r4, #1
 8003c86:	9304      	str	r3, [sp, #16]
 8003c88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c8c:	4824      	ldr	r0, [pc, #144]	@ (8003d20 <_svfiprintf_r+0x1e8>)
 8003c8e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003c92:	2206      	movs	r2, #6
 8003c94:	f7fc faa4 	bl	80001e0 <memchr>
 8003c98:	2800      	cmp	r0, #0
 8003c9a:	d036      	beq.n	8003d0a <_svfiprintf_r+0x1d2>
 8003c9c:	4b21      	ldr	r3, [pc, #132]	@ (8003d24 <_svfiprintf_r+0x1ec>)
 8003c9e:	bb1b      	cbnz	r3, 8003ce8 <_svfiprintf_r+0x1b0>
 8003ca0:	9b03      	ldr	r3, [sp, #12]
 8003ca2:	3307      	adds	r3, #7
 8003ca4:	f023 0307 	bic.w	r3, r3, #7
 8003ca8:	3308      	adds	r3, #8
 8003caa:	9303      	str	r3, [sp, #12]
 8003cac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003cae:	4433      	add	r3, r6
 8003cb0:	9309      	str	r3, [sp, #36]	@ 0x24
 8003cb2:	e76a      	b.n	8003b8a <_svfiprintf_r+0x52>
 8003cb4:	fb0c 3202 	mla	r2, ip, r2, r3
 8003cb8:	460c      	mov	r4, r1
 8003cba:	2001      	movs	r0, #1
 8003cbc:	e7a8      	b.n	8003c10 <_svfiprintf_r+0xd8>
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	3401      	adds	r4, #1
 8003cc2:	9305      	str	r3, [sp, #20]
 8003cc4:	4619      	mov	r1, r3
 8003cc6:	f04f 0c0a 	mov.w	ip, #10
 8003cca:	4620      	mov	r0, r4
 8003ccc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003cd0:	3a30      	subs	r2, #48	@ 0x30
 8003cd2:	2a09      	cmp	r2, #9
 8003cd4:	d903      	bls.n	8003cde <_svfiprintf_r+0x1a6>
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d0c6      	beq.n	8003c68 <_svfiprintf_r+0x130>
 8003cda:	9105      	str	r1, [sp, #20]
 8003cdc:	e7c4      	b.n	8003c68 <_svfiprintf_r+0x130>
 8003cde:	fb0c 2101 	mla	r1, ip, r1, r2
 8003ce2:	4604      	mov	r4, r0
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e7f0      	b.n	8003cca <_svfiprintf_r+0x192>
 8003ce8:	ab03      	add	r3, sp, #12
 8003cea:	9300      	str	r3, [sp, #0]
 8003cec:	462a      	mov	r2, r5
 8003cee:	4b0e      	ldr	r3, [pc, #56]	@ (8003d28 <_svfiprintf_r+0x1f0>)
 8003cf0:	a904      	add	r1, sp, #16
 8003cf2:	4638      	mov	r0, r7
 8003cf4:	f3af 8000 	nop.w
 8003cf8:	1c42      	adds	r2, r0, #1
 8003cfa:	4606      	mov	r6, r0
 8003cfc:	d1d6      	bne.n	8003cac <_svfiprintf_r+0x174>
 8003cfe:	89ab      	ldrh	r3, [r5, #12]
 8003d00:	065b      	lsls	r3, r3, #25
 8003d02:	f53f af2d 	bmi.w	8003b60 <_svfiprintf_r+0x28>
 8003d06:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003d08:	e72c      	b.n	8003b64 <_svfiprintf_r+0x2c>
 8003d0a:	ab03      	add	r3, sp, #12
 8003d0c:	9300      	str	r3, [sp, #0]
 8003d0e:	462a      	mov	r2, r5
 8003d10:	4b05      	ldr	r3, [pc, #20]	@ (8003d28 <_svfiprintf_r+0x1f0>)
 8003d12:	a904      	add	r1, sp, #16
 8003d14:	4638      	mov	r0, r7
 8003d16:	f000 f879 	bl	8003e0c <_printf_i>
 8003d1a:	e7ed      	b.n	8003cf8 <_svfiprintf_r+0x1c0>
 8003d1c:	08005c18 	.word	0x08005c18
 8003d20:	08005c22 	.word	0x08005c22
 8003d24:	00000000 	.word	0x00000000
 8003d28:	08003a81 	.word	0x08003a81
 8003d2c:	08005c1e 	.word	0x08005c1e

08003d30 <_printf_common>:
 8003d30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d34:	4616      	mov	r6, r2
 8003d36:	4698      	mov	r8, r3
 8003d38:	688a      	ldr	r2, [r1, #8]
 8003d3a:	690b      	ldr	r3, [r1, #16]
 8003d3c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003d40:	4293      	cmp	r3, r2
 8003d42:	bfb8      	it	lt
 8003d44:	4613      	movlt	r3, r2
 8003d46:	6033      	str	r3, [r6, #0]
 8003d48:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003d4c:	4607      	mov	r7, r0
 8003d4e:	460c      	mov	r4, r1
 8003d50:	b10a      	cbz	r2, 8003d56 <_printf_common+0x26>
 8003d52:	3301      	adds	r3, #1
 8003d54:	6033      	str	r3, [r6, #0]
 8003d56:	6823      	ldr	r3, [r4, #0]
 8003d58:	0699      	lsls	r1, r3, #26
 8003d5a:	bf42      	ittt	mi
 8003d5c:	6833      	ldrmi	r3, [r6, #0]
 8003d5e:	3302      	addmi	r3, #2
 8003d60:	6033      	strmi	r3, [r6, #0]
 8003d62:	6825      	ldr	r5, [r4, #0]
 8003d64:	f015 0506 	ands.w	r5, r5, #6
 8003d68:	d106      	bne.n	8003d78 <_printf_common+0x48>
 8003d6a:	f104 0a19 	add.w	sl, r4, #25
 8003d6e:	68e3      	ldr	r3, [r4, #12]
 8003d70:	6832      	ldr	r2, [r6, #0]
 8003d72:	1a9b      	subs	r3, r3, r2
 8003d74:	42ab      	cmp	r3, r5
 8003d76:	dc26      	bgt.n	8003dc6 <_printf_common+0x96>
 8003d78:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003d7c:	6822      	ldr	r2, [r4, #0]
 8003d7e:	3b00      	subs	r3, #0
 8003d80:	bf18      	it	ne
 8003d82:	2301      	movne	r3, #1
 8003d84:	0692      	lsls	r2, r2, #26
 8003d86:	d42b      	bmi.n	8003de0 <_printf_common+0xb0>
 8003d88:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003d8c:	4641      	mov	r1, r8
 8003d8e:	4638      	mov	r0, r7
 8003d90:	47c8      	blx	r9
 8003d92:	3001      	adds	r0, #1
 8003d94:	d01e      	beq.n	8003dd4 <_printf_common+0xa4>
 8003d96:	6823      	ldr	r3, [r4, #0]
 8003d98:	6922      	ldr	r2, [r4, #16]
 8003d9a:	f003 0306 	and.w	r3, r3, #6
 8003d9e:	2b04      	cmp	r3, #4
 8003da0:	bf02      	ittt	eq
 8003da2:	68e5      	ldreq	r5, [r4, #12]
 8003da4:	6833      	ldreq	r3, [r6, #0]
 8003da6:	1aed      	subeq	r5, r5, r3
 8003da8:	68a3      	ldr	r3, [r4, #8]
 8003daa:	bf0c      	ite	eq
 8003dac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003db0:	2500      	movne	r5, #0
 8003db2:	4293      	cmp	r3, r2
 8003db4:	bfc4      	itt	gt
 8003db6:	1a9b      	subgt	r3, r3, r2
 8003db8:	18ed      	addgt	r5, r5, r3
 8003dba:	2600      	movs	r6, #0
 8003dbc:	341a      	adds	r4, #26
 8003dbe:	42b5      	cmp	r5, r6
 8003dc0:	d11a      	bne.n	8003df8 <_printf_common+0xc8>
 8003dc2:	2000      	movs	r0, #0
 8003dc4:	e008      	b.n	8003dd8 <_printf_common+0xa8>
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	4652      	mov	r2, sl
 8003dca:	4641      	mov	r1, r8
 8003dcc:	4638      	mov	r0, r7
 8003dce:	47c8      	blx	r9
 8003dd0:	3001      	adds	r0, #1
 8003dd2:	d103      	bne.n	8003ddc <_printf_common+0xac>
 8003dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8003dd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ddc:	3501      	adds	r5, #1
 8003dde:	e7c6      	b.n	8003d6e <_printf_common+0x3e>
 8003de0:	18e1      	adds	r1, r4, r3
 8003de2:	1c5a      	adds	r2, r3, #1
 8003de4:	2030      	movs	r0, #48	@ 0x30
 8003de6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003dea:	4422      	add	r2, r4
 8003dec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003df0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003df4:	3302      	adds	r3, #2
 8003df6:	e7c7      	b.n	8003d88 <_printf_common+0x58>
 8003df8:	2301      	movs	r3, #1
 8003dfa:	4622      	mov	r2, r4
 8003dfc:	4641      	mov	r1, r8
 8003dfe:	4638      	mov	r0, r7
 8003e00:	47c8      	blx	r9
 8003e02:	3001      	adds	r0, #1
 8003e04:	d0e6      	beq.n	8003dd4 <_printf_common+0xa4>
 8003e06:	3601      	adds	r6, #1
 8003e08:	e7d9      	b.n	8003dbe <_printf_common+0x8e>
	...

08003e0c <_printf_i>:
 8003e0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e10:	7e0f      	ldrb	r7, [r1, #24]
 8003e12:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003e14:	2f78      	cmp	r7, #120	@ 0x78
 8003e16:	4691      	mov	r9, r2
 8003e18:	4680      	mov	r8, r0
 8003e1a:	460c      	mov	r4, r1
 8003e1c:	469a      	mov	sl, r3
 8003e1e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003e22:	d807      	bhi.n	8003e34 <_printf_i+0x28>
 8003e24:	2f62      	cmp	r7, #98	@ 0x62
 8003e26:	d80a      	bhi.n	8003e3e <_printf_i+0x32>
 8003e28:	2f00      	cmp	r7, #0
 8003e2a:	f000 80d2 	beq.w	8003fd2 <_printf_i+0x1c6>
 8003e2e:	2f58      	cmp	r7, #88	@ 0x58
 8003e30:	f000 80b9 	beq.w	8003fa6 <_printf_i+0x19a>
 8003e34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003e38:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003e3c:	e03a      	b.n	8003eb4 <_printf_i+0xa8>
 8003e3e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003e42:	2b15      	cmp	r3, #21
 8003e44:	d8f6      	bhi.n	8003e34 <_printf_i+0x28>
 8003e46:	a101      	add	r1, pc, #4	@ (adr r1, 8003e4c <_printf_i+0x40>)
 8003e48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003e4c:	08003ea5 	.word	0x08003ea5
 8003e50:	08003eb9 	.word	0x08003eb9
 8003e54:	08003e35 	.word	0x08003e35
 8003e58:	08003e35 	.word	0x08003e35
 8003e5c:	08003e35 	.word	0x08003e35
 8003e60:	08003e35 	.word	0x08003e35
 8003e64:	08003eb9 	.word	0x08003eb9
 8003e68:	08003e35 	.word	0x08003e35
 8003e6c:	08003e35 	.word	0x08003e35
 8003e70:	08003e35 	.word	0x08003e35
 8003e74:	08003e35 	.word	0x08003e35
 8003e78:	08003fb9 	.word	0x08003fb9
 8003e7c:	08003ee3 	.word	0x08003ee3
 8003e80:	08003f73 	.word	0x08003f73
 8003e84:	08003e35 	.word	0x08003e35
 8003e88:	08003e35 	.word	0x08003e35
 8003e8c:	08003fdb 	.word	0x08003fdb
 8003e90:	08003e35 	.word	0x08003e35
 8003e94:	08003ee3 	.word	0x08003ee3
 8003e98:	08003e35 	.word	0x08003e35
 8003e9c:	08003e35 	.word	0x08003e35
 8003ea0:	08003f7b 	.word	0x08003f7b
 8003ea4:	6833      	ldr	r3, [r6, #0]
 8003ea6:	1d1a      	adds	r2, r3, #4
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	6032      	str	r2, [r6, #0]
 8003eac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003eb0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e09d      	b.n	8003ff4 <_printf_i+0x1e8>
 8003eb8:	6833      	ldr	r3, [r6, #0]
 8003eba:	6820      	ldr	r0, [r4, #0]
 8003ebc:	1d19      	adds	r1, r3, #4
 8003ebe:	6031      	str	r1, [r6, #0]
 8003ec0:	0606      	lsls	r6, r0, #24
 8003ec2:	d501      	bpl.n	8003ec8 <_printf_i+0xbc>
 8003ec4:	681d      	ldr	r5, [r3, #0]
 8003ec6:	e003      	b.n	8003ed0 <_printf_i+0xc4>
 8003ec8:	0645      	lsls	r5, r0, #25
 8003eca:	d5fb      	bpl.n	8003ec4 <_printf_i+0xb8>
 8003ecc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003ed0:	2d00      	cmp	r5, #0
 8003ed2:	da03      	bge.n	8003edc <_printf_i+0xd0>
 8003ed4:	232d      	movs	r3, #45	@ 0x2d
 8003ed6:	426d      	negs	r5, r5
 8003ed8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003edc:	4859      	ldr	r0, [pc, #356]	@ (8004044 <_printf_i+0x238>)
 8003ede:	230a      	movs	r3, #10
 8003ee0:	e011      	b.n	8003f06 <_printf_i+0xfa>
 8003ee2:	6821      	ldr	r1, [r4, #0]
 8003ee4:	6833      	ldr	r3, [r6, #0]
 8003ee6:	0608      	lsls	r0, r1, #24
 8003ee8:	f853 5b04 	ldr.w	r5, [r3], #4
 8003eec:	d402      	bmi.n	8003ef4 <_printf_i+0xe8>
 8003eee:	0649      	lsls	r1, r1, #25
 8003ef0:	bf48      	it	mi
 8003ef2:	b2ad      	uxthmi	r5, r5
 8003ef4:	2f6f      	cmp	r7, #111	@ 0x6f
 8003ef6:	4853      	ldr	r0, [pc, #332]	@ (8004044 <_printf_i+0x238>)
 8003ef8:	6033      	str	r3, [r6, #0]
 8003efa:	bf14      	ite	ne
 8003efc:	230a      	movne	r3, #10
 8003efe:	2308      	moveq	r3, #8
 8003f00:	2100      	movs	r1, #0
 8003f02:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003f06:	6866      	ldr	r6, [r4, #4]
 8003f08:	60a6      	str	r6, [r4, #8]
 8003f0a:	2e00      	cmp	r6, #0
 8003f0c:	bfa2      	ittt	ge
 8003f0e:	6821      	ldrge	r1, [r4, #0]
 8003f10:	f021 0104 	bicge.w	r1, r1, #4
 8003f14:	6021      	strge	r1, [r4, #0]
 8003f16:	b90d      	cbnz	r5, 8003f1c <_printf_i+0x110>
 8003f18:	2e00      	cmp	r6, #0
 8003f1a:	d04b      	beq.n	8003fb4 <_printf_i+0x1a8>
 8003f1c:	4616      	mov	r6, r2
 8003f1e:	fbb5 f1f3 	udiv	r1, r5, r3
 8003f22:	fb03 5711 	mls	r7, r3, r1, r5
 8003f26:	5dc7      	ldrb	r7, [r0, r7]
 8003f28:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003f2c:	462f      	mov	r7, r5
 8003f2e:	42bb      	cmp	r3, r7
 8003f30:	460d      	mov	r5, r1
 8003f32:	d9f4      	bls.n	8003f1e <_printf_i+0x112>
 8003f34:	2b08      	cmp	r3, #8
 8003f36:	d10b      	bne.n	8003f50 <_printf_i+0x144>
 8003f38:	6823      	ldr	r3, [r4, #0]
 8003f3a:	07df      	lsls	r7, r3, #31
 8003f3c:	d508      	bpl.n	8003f50 <_printf_i+0x144>
 8003f3e:	6923      	ldr	r3, [r4, #16]
 8003f40:	6861      	ldr	r1, [r4, #4]
 8003f42:	4299      	cmp	r1, r3
 8003f44:	bfde      	ittt	le
 8003f46:	2330      	movle	r3, #48	@ 0x30
 8003f48:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003f4c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003f50:	1b92      	subs	r2, r2, r6
 8003f52:	6122      	str	r2, [r4, #16]
 8003f54:	f8cd a000 	str.w	sl, [sp]
 8003f58:	464b      	mov	r3, r9
 8003f5a:	aa03      	add	r2, sp, #12
 8003f5c:	4621      	mov	r1, r4
 8003f5e:	4640      	mov	r0, r8
 8003f60:	f7ff fee6 	bl	8003d30 <_printf_common>
 8003f64:	3001      	adds	r0, #1
 8003f66:	d14a      	bne.n	8003ffe <_printf_i+0x1f2>
 8003f68:	f04f 30ff 	mov.w	r0, #4294967295
 8003f6c:	b004      	add	sp, #16
 8003f6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f72:	6823      	ldr	r3, [r4, #0]
 8003f74:	f043 0320 	orr.w	r3, r3, #32
 8003f78:	6023      	str	r3, [r4, #0]
 8003f7a:	4833      	ldr	r0, [pc, #204]	@ (8004048 <_printf_i+0x23c>)
 8003f7c:	2778      	movs	r7, #120	@ 0x78
 8003f7e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003f82:	6823      	ldr	r3, [r4, #0]
 8003f84:	6831      	ldr	r1, [r6, #0]
 8003f86:	061f      	lsls	r7, r3, #24
 8003f88:	f851 5b04 	ldr.w	r5, [r1], #4
 8003f8c:	d402      	bmi.n	8003f94 <_printf_i+0x188>
 8003f8e:	065f      	lsls	r7, r3, #25
 8003f90:	bf48      	it	mi
 8003f92:	b2ad      	uxthmi	r5, r5
 8003f94:	6031      	str	r1, [r6, #0]
 8003f96:	07d9      	lsls	r1, r3, #31
 8003f98:	bf44      	itt	mi
 8003f9a:	f043 0320 	orrmi.w	r3, r3, #32
 8003f9e:	6023      	strmi	r3, [r4, #0]
 8003fa0:	b11d      	cbz	r5, 8003faa <_printf_i+0x19e>
 8003fa2:	2310      	movs	r3, #16
 8003fa4:	e7ac      	b.n	8003f00 <_printf_i+0xf4>
 8003fa6:	4827      	ldr	r0, [pc, #156]	@ (8004044 <_printf_i+0x238>)
 8003fa8:	e7e9      	b.n	8003f7e <_printf_i+0x172>
 8003faa:	6823      	ldr	r3, [r4, #0]
 8003fac:	f023 0320 	bic.w	r3, r3, #32
 8003fb0:	6023      	str	r3, [r4, #0]
 8003fb2:	e7f6      	b.n	8003fa2 <_printf_i+0x196>
 8003fb4:	4616      	mov	r6, r2
 8003fb6:	e7bd      	b.n	8003f34 <_printf_i+0x128>
 8003fb8:	6833      	ldr	r3, [r6, #0]
 8003fba:	6825      	ldr	r5, [r4, #0]
 8003fbc:	6961      	ldr	r1, [r4, #20]
 8003fbe:	1d18      	adds	r0, r3, #4
 8003fc0:	6030      	str	r0, [r6, #0]
 8003fc2:	062e      	lsls	r6, r5, #24
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	d501      	bpl.n	8003fcc <_printf_i+0x1c0>
 8003fc8:	6019      	str	r1, [r3, #0]
 8003fca:	e002      	b.n	8003fd2 <_printf_i+0x1c6>
 8003fcc:	0668      	lsls	r0, r5, #25
 8003fce:	d5fb      	bpl.n	8003fc8 <_printf_i+0x1bc>
 8003fd0:	8019      	strh	r1, [r3, #0]
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	6123      	str	r3, [r4, #16]
 8003fd6:	4616      	mov	r6, r2
 8003fd8:	e7bc      	b.n	8003f54 <_printf_i+0x148>
 8003fda:	6833      	ldr	r3, [r6, #0]
 8003fdc:	1d1a      	adds	r2, r3, #4
 8003fde:	6032      	str	r2, [r6, #0]
 8003fe0:	681e      	ldr	r6, [r3, #0]
 8003fe2:	6862      	ldr	r2, [r4, #4]
 8003fe4:	2100      	movs	r1, #0
 8003fe6:	4630      	mov	r0, r6
 8003fe8:	f7fc f8fa 	bl	80001e0 <memchr>
 8003fec:	b108      	cbz	r0, 8003ff2 <_printf_i+0x1e6>
 8003fee:	1b80      	subs	r0, r0, r6
 8003ff0:	6060      	str	r0, [r4, #4]
 8003ff2:	6863      	ldr	r3, [r4, #4]
 8003ff4:	6123      	str	r3, [r4, #16]
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003ffc:	e7aa      	b.n	8003f54 <_printf_i+0x148>
 8003ffe:	6923      	ldr	r3, [r4, #16]
 8004000:	4632      	mov	r2, r6
 8004002:	4649      	mov	r1, r9
 8004004:	4640      	mov	r0, r8
 8004006:	47d0      	blx	sl
 8004008:	3001      	adds	r0, #1
 800400a:	d0ad      	beq.n	8003f68 <_printf_i+0x15c>
 800400c:	6823      	ldr	r3, [r4, #0]
 800400e:	079b      	lsls	r3, r3, #30
 8004010:	d413      	bmi.n	800403a <_printf_i+0x22e>
 8004012:	68e0      	ldr	r0, [r4, #12]
 8004014:	9b03      	ldr	r3, [sp, #12]
 8004016:	4298      	cmp	r0, r3
 8004018:	bfb8      	it	lt
 800401a:	4618      	movlt	r0, r3
 800401c:	e7a6      	b.n	8003f6c <_printf_i+0x160>
 800401e:	2301      	movs	r3, #1
 8004020:	4632      	mov	r2, r6
 8004022:	4649      	mov	r1, r9
 8004024:	4640      	mov	r0, r8
 8004026:	47d0      	blx	sl
 8004028:	3001      	adds	r0, #1
 800402a:	d09d      	beq.n	8003f68 <_printf_i+0x15c>
 800402c:	3501      	adds	r5, #1
 800402e:	68e3      	ldr	r3, [r4, #12]
 8004030:	9903      	ldr	r1, [sp, #12]
 8004032:	1a5b      	subs	r3, r3, r1
 8004034:	42ab      	cmp	r3, r5
 8004036:	dcf2      	bgt.n	800401e <_printf_i+0x212>
 8004038:	e7eb      	b.n	8004012 <_printf_i+0x206>
 800403a:	2500      	movs	r5, #0
 800403c:	f104 0619 	add.w	r6, r4, #25
 8004040:	e7f5      	b.n	800402e <_printf_i+0x222>
 8004042:	bf00      	nop
 8004044:	08005c29 	.word	0x08005c29
 8004048:	08005c3a 	.word	0x08005c3a

0800404c <memmove>:
 800404c:	4288      	cmp	r0, r1
 800404e:	b510      	push	{r4, lr}
 8004050:	eb01 0402 	add.w	r4, r1, r2
 8004054:	d902      	bls.n	800405c <memmove+0x10>
 8004056:	4284      	cmp	r4, r0
 8004058:	4623      	mov	r3, r4
 800405a:	d807      	bhi.n	800406c <memmove+0x20>
 800405c:	1e43      	subs	r3, r0, #1
 800405e:	42a1      	cmp	r1, r4
 8004060:	d008      	beq.n	8004074 <memmove+0x28>
 8004062:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004066:	f803 2f01 	strb.w	r2, [r3, #1]!
 800406a:	e7f8      	b.n	800405e <memmove+0x12>
 800406c:	4402      	add	r2, r0
 800406e:	4601      	mov	r1, r0
 8004070:	428a      	cmp	r2, r1
 8004072:	d100      	bne.n	8004076 <memmove+0x2a>
 8004074:	bd10      	pop	{r4, pc}
 8004076:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800407a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800407e:	e7f7      	b.n	8004070 <memmove+0x24>

08004080 <_sbrk_r>:
 8004080:	b538      	push	{r3, r4, r5, lr}
 8004082:	4d06      	ldr	r5, [pc, #24]	@ (800409c <_sbrk_r+0x1c>)
 8004084:	2300      	movs	r3, #0
 8004086:	4604      	mov	r4, r0
 8004088:	4608      	mov	r0, r1
 800408a:	602b      	str	r3, [r5, #0]
 800408c:	f7fd fc6e 	bl	800196c <_sbrk>
 8004090:	1c43      	adds	r3, r0, #1
 8004092:	d102      	bne.n	800409a <_sbrk_r+0x1a>
 8004094:	682b      	ldr	r3, [r5, #0]
 8004096:	b103      	cbz	r3, 800409a <_sbrk_r+0x1a>
 8004098:	6023      	str	r3, [r4, #0]
 800409a:	bd38      	pop	{r3, r4, r5, pc}
 800409c:	20000294 	.word	0x20000294

080040a0 <memcpy>:
 80040a0:	440a      	add	r2, r1
 80040a2:	4291      	cmp	r1, r2
 80040a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80040a8:	d100      	bne.n	80040ac <memcpy+0xc>
 80040aa:	4770      	bx	lr
 80040ac:	b510      	push	{r4, lr}
 80040ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80040b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80040b6:	4291      	cmp	r1, r2
 80040b8:	d1f9      	bne.n	80040ae <memcpy+0xe>
 80040ba:	bd10      	pop	{r4, pc}

080040bc <_realloc_r>:
 80040bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040c0:	4680      	mov	r8, r0
 80040c2:	4615      	mov	r5, r2
 80040c4:	460c      	mov	r4, r1
 80040c6:	b921      	cbnz	r1, 80040d2 <_realloc_r+0x16>
 80040c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80040cc:	4611      	mov	r1, r2
 80040ce:	f7ff bc4b 	b.w	8003968 <_malloc_r>
 80040d2:	b92a      	cbnz	r2, 80040e0 <_realloc_r+0x24>
 80040d4:	f7ff fbdc 	bl	8003890 <_free_r>
 80040d8:	2400      	movs	r4, #0
 80040da:	4620      	mov	r0, r4
 80040dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040e0:	f000 f81a 	bl	8004118 <_malloc_usable_size_r>
 80040e4:	4285      	cmp	r5, r0
 80040e6:	4606      	mov	r6, r0
 80040e8:	d802      	bhi.n	80040f0 <_realloc_r+0x34>
 80040ea:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80040ee:	d8f4      	bhi.n	80040da <_realloc_r+0x1e>
 80040f0:	4629      	mov	r1, r5
 80040f2:	4640      	mov	r0, r8
 80040f4:	f7ff fc38 	bl	8003968 <_malloc_r>
 80040f8:	4607      	mov	r7, r0
 80040fa:	2800      	cmp	r0, #0
 80040fc:	d0ec      	beq.n	80040d8 <_realloc_r+0x1c>
 80040fe:	42b5      	cmp	r5, r6
 8004100:	462a      	mov	r2, r5
 8004102:	4621      	mov	r1, r4
 8004104:	bf28      	it	cs
 8004106:	4632      	movcs	r2, r6
 8004108:	f7ff ffca 	bl	80040a0 <memcpy>
 800410c:	4621      	mov	r1, r4
 800410e:	4640      	mov	r0, r8
 8004110:	f7ff fbbe 	bl	8003890 <_free_r>
 8004114:	463c      	mov	r4, r7
 8004116:	e7e0      	b.n	80040da <_realloc_r+0x1e>

08004118 <_malloc_usable_size_r>:
 8004118:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800411c:	1f18      	subs	r0, r3, #4
 800411e:	2b00      	cmp	r3, #0
 8004120:	bfbc      	itt	lt
 8004122:	580b      	ldrlt	r3, [r1, r0]
 8004124:	18c0      	addlt	r0, r0, r3
 8004126:	4770      	bx	lr

08004128 <_init>:
 8004128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800412a:	bf00      	nop
 800412c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800412e:	bc08      	pop	{r3}
 8004130:	469e      	mov	lr, r3
 8004132:	4770      	bx	lr

08004134 <_fini>:
 8004134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004136:	bf00      	nop
 8004138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800413a:	bc08      	pop	{r3}
 800413c:	469e      	mov	lr, r3
 800413e:	4770      	bx	lr
